; Structure and Interpretation of Computer Programs, 2nd edition


; My evaluator (The metacircular evaluator)

; See myeval.scm for the source code

-------------------------------------------------------------------------
Exercise 4.3.

Rewrite eval so that the dispatch is done in data-directed style.
Compare this with the data-directed differentiation procedure of
exercise 2.73. (You may use the car of a compound expression as
the type of the expression, as is appropriate for the syntax
implemented in this section.) . 


Solution:
Added definitions:
  "assoc", "make-table", "operation-table", "get", "put"
Modified definitions:
  "eval"

-------------------------------------------------------------------------
Exercise 4.4.

Recall the definitions of the special forms and and or from chapter 1: 

	and: The expressions are evaluated from left to right. If any
	expression evaluates to false, false is returned; any remaining
	expressions are not evaluated. If all the expressions evaluate
	to true values, the value of the last expression is returned.
	If there are no expressions then true is returned.

	or: The expressions are evaluated from left to right. If any
	expression evaluates to a true value, that value is returned;
	any remaining expressions are not evaluated. If all expressions
	evaluate to false, or if there are no expressions, then false is
	returned.

Install and and or as new special forms for the evaluator by defining
appropriate syntax procedures and evaluation procedures eval-and and
eval-or. Alternatively, show how to implement and and or as derived
expressions. 


Solution:
Added definitions:
  "eval-and", "eval-or", "and-expressions", "or-expressions"

-------------------------------------------------------------------------
Exercise 4.6.

Let expressions are derived expressions, because

(let ((<var1> <exp1>) ... (<varn> <expn>))
  <body>)

is equivalent to

((lambda (<var1> ... <varn>)
   <body>)
 <exp1>
 
 <expn>)

Implement a syntactic transformation let->combination that reduces
evaluating let expressions to evaluating combinations of the type
shown above, and add the appropriate clause to eval to handle let
expressions. 


Solution:
Added definitions
  "let->combination", "let-variables", "let-expressions", "let-body"

-------------------------------------------------------------------------
Exercise 4.7.

Let* is similar to let, except that the bindings of the let variables
are performed sequentially from left to right, and each binding is
made in an environment in which all of the preceding bindings are
visible. For example 

(let* ((x 3)
       (y (+ x 2))
       (z (+ x y 5)))
  (* x z))

returns 39. Explain how a let* expression can be rewritten as a set of
nested let expressions, and write a procedure let*->nested-lets that
performs this transformation. If we have already implemented let
(exercise 4.6) and we want to extend the evaluator to handle let*,
is it sufficient to add a clause to eval whose action is 

(eval (let*->nested-lets exp) env)

or must we explicitly expand let* in terms of non-derived expressions? 


Solution:

(let* ((x 3)
       (y (+ x 2))
       (z (+ x y 5)))
  (* x z))

is equivalent to 

(let ((x 3))
  (let ((y (+ x 2)))
    (let ((z (+ x y 5)))
      (* x z))))

which, in turn, is equivalent to

((lambda (x)
   ((lambda (y)
      ((lambda (z)
	 (* x z))
       (+ x y 5)))
    (+ x 2)))
 3)


This let*-expression        Is equivalent to this let-expression

(let* ()                    1
  1)

(let* ()                    (+ 1 2)
 (+ 1 2))

(let* ()                    (+ 1 2) (+ 3 4)
  (+ 1 2)
  (+ 3 4))


(let* ((a 1))               (let ((a 1))
  a)                          a)

(let* ((a 1))               (let ((a 1))
  (+ a 1))                    (+ a 1))

(let* ((a 1))               (let ((a 1))
  (+ a 1)                     (+ a 1)
  (+ a 2))                    (+ a 2))


(let* ((a 1) (b (+ a 1)))   (let ((a 1))
  b)                          (let ((b (+ a 1)))
                                b))

(let* ((a 1) (b (+ a 1)))   (let ((a 1))
  (+ a b))                    (let ((b (+ a 1)))
                                (+ a b)))

(let* ((a 1) (b (+ a 1)))   (let ((a 1))
  (+ a b)                     (let ((b (+ a 1)))
  (- a b))                      (+ a b)
                                (- a b)))

-------------------------------------------------------------------------
Exercise 4.8.

``Named let'' is a variant of let that has the form 

(let <var> <bindings> <body>)

The <bindings> and <body> are just as in ordinary let, except that
<var> is bound within <body> to a procedure whose body is <body> and
whose parameters are the variables in the <bindings>. Thus, one can
repeatedly execute the <body> by invoking the procedure named <var>.
For example, the iterative Fibonacci procedure (section 1.2.2) can be
rewritten using named let as follows: 

(define (fib n)
  (let fib-iter ((a 1)
                 (b 0)
                 (count n))
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1)))))

Modify let->combination of exercise 4.6 to also support named let. 

--

Analysis:

What kind of transformation should we do?

(define (fib n)
  (let fib-iter ((a 1)
                 (b 0)
                 (count n))
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1)))))

Can be converted to:

(define (fib n)
  ((lambda (fib-iter)
     (fib-iter fib-iter 1 0 n))
   (lambda (fib-iter a b count)
     (if (= count 0)
	 b
	 (fib-iter fib-iter (+ a b) a (- count 1))))))

The downside of this is that the body has to be modified.

--

Another try:

(define (fib n)
  (define fib-iter
    (lambda (a b count)
      (if (= count 0)
	  b
	  (fib-iter (+ a b) a (- count 1)))))
  (fib-iter 1 0 n))

This in turn requires internal define. Not good.

--

Yet another:

(define (fib n)
  (let ((fib-iter
	 (lambda (a b count)
	   (if (= count 0)
	       b
	       (fib-iter (+ a b) a (- count 1))))))
    (fib-iter 1 0 n)))

If this is expanded:

(define (fib n)
  ((lambda (fib-iter)
     (fib-iter 1 0 n))
   (lambda (a b count)
     (if (= count 0)
	 b
	 (fib-iter (+ a b) a (- count 1))))))

We see more easily why it does not work. fib-iter is not defined when we
try to call it from the latter lambda.

--

If we expand the original without considering the name:

(define (fib n)
  ((lambda (a b count)
     (if (= count 0)
	 b
	 (fib-iter (+ a b) a (- count 1))))
   1 0 n))

fib-iter is again not defined.

--

(define (fib n)
  (let ((fib-iter '*unassigned*))
    (set! fib-iter
	  (lambda (a b count)
	    (if (= count 0)
		b
		(fib-iter (+ a b) a (- count 1)))))
    (fib-iter 1 0 n)))

This seems to be working ok.

-------------------------------------------------------------------------

Exercise 4.9.

Many languages support a variety of iteration constructs, such as do,
for, while, and until. In Scheme, iterative processes can be expressed
in terms of ordinary procedure calls, so special iteration constructs
provide no essential gain in computational power. On the other hand,
such constructs are often convenient. Design some iteration constructs,
give examples of their use, and show how to implement them as derived
expressions. 

(while predicate
       body)

(while (> a 0)
       (display a)
       (newline)
       (set! a (- a 1)))

(define (while? exp) (tagged-list? exp 'while))
(define (while-predicate exp) (cadr exp))
(define (while-body exp) (cddr exp))

(define (*while-iter*)
  (if (> a 0)
      (begin (display a)
	     (newline)
	     (set! a (- a 1))
	     (*while-iter*))))
    

-------------------------------------------------------------------------

Exercise 4.16.

In this exercise we implement the method just described for interpreting
internal definitions. We assume that the evaluator supports let (see exercise
4.6).

a. Change lookup-variable-value (section 4.1.3) to signal an error if the
   value it finds is the symbol *unassigned*.

b. Write a procedure scan-out-defines that takes a procedure body and returns
   an equivalent one that has no internal definitions, by making the
   transformation described above.

c. Install scan-out-defines in the interpreter, either in make-procedure or
   in procedure-body (see section 4.1.3). Which place is better? Why? 

--

Transform a procedure definition with internal definitions:

	(lambda <vars>
	  (define u <e1>)
	  (define v <e2>)
	  <e3>)
 
would be transformed into
 
	(lambda <vars>
	  (let ((u '*unassigned*)
	        (v '*unassigned*))
	    (set! u <e1>)
	    (set! v <e2>)
	    <e3>))


(define (f x)
  (define (even? n)
    (if (= n 0)
        true
        (odd? (- n 1))))
  (define (odd? n)
    (if (= n 0)
        false
        (even? (- n 1))))
  <rest of body of f>)


-------------------------------------------------------------------------

Exercise 4.17.

Draw diagrams of the environment in effect when evaluating the expression <e3>
in the procedure in the text, comparing how this will be structured when
definitions are interpreted sequentially with how it will be structured if
definitions are scanned out as described. Why is there an extra frame in the
transformed program? Explain why this difference in environment structure can
never make a difference in the behavior of a correct program. Design a way to
make the interpreter implement the ``simultaneous'' scope rule for internal
definitions without constructing the extra frame. 


-------------------------------------------------------------------------

Exercise 4.18.

Consider an alternative strategy for scanning out definitions that translates
the example in the text to 

(lambda <vars>
  (let ((u '*unassigned*)
        (v '*unassigned*))
    (let ((a <e1>)
          (b <e2>))
      (set! u a)
      (set! v b))
    <e3>))

Here a and b are meant to represent new variable names, created by the
interpreter, that do not appear in the user's program. Consider the solve
procedure from section 3.5.4:

(define (solve f y0 dt)
  (define y (integral (delay dy) y0 dt))
  (define dy (stream-map f y))
  y)

Will this procedure work if internal definitions are scanned out as shown
in this exercise? What if they are scanned out as shown in the text? Explain. 

-------------------------------------------------------------------------

Exercise 4.19.

Ben Bitdiddle, Alyssa P. Hacker, and Eva Lu Ator are arguing about the
desired result of evaluating the expression

(let ((a 1))
  (define (f x)
    (define b (+ a x))
    (define a 5)
    (+ a b))
  (f 10))



Ben asserts that the result should be obtained using the sequential rule
for define: b is defined to be 11, then a is defined to be 5, so the result
is 16. Alyssa objects that mutual recursion requires the simultaneous scope
rule for internal procedure definitions, and that it is unreasonable to treat
procedure names differently from other names. Thus, she argues for the mechanism
implemented in exercise 4.16. This would lead to a being unassigned at the time
that the value for b is to be computed. Hence, in Alyssa's view the procedure
should produce an error. Eva has a third opinion. She says that if the definitions
of a and b are truly meant to be simultaneous, then the value 5 for a should be
used in evaluating b. Hence, in Eva's view a should be 5, b should be 15, and
the result should be 20. Which (if any) of these viewpoints do you support?
Can you devise a way to implement internal definitions so that they behave as
Eva prefers?

-------------------------------------------------------------------------

Exercise 4.20.

Because internal definitions look sequential but are actually simultaneous,
some people prefer to avoid them entirely, and use the special form letrec
instead. Letrec looks like let, so it is not surprising that the variables
it binds are bound simultaneously and have the same scope as each other.
The sample procedure f above can be written without internal definitions,
but with exactly the same meaning, as

(define (f x)
  (letrec ((even?
            (lambda (n)
              (if (= n 0)
                  true
                  (odd? (- n 1)))))
           (odd?
            (lambda (n)
              (if (= n 0)
                  false
                  (even? (- n 1))))))
    <rest of body of f>))

Letrec expressions, which have the form 

(letrec ((<var1> <exp1>) ... (<varn> <expn>))
  <body>)

are a variation on let in which the expressions <expk> that provide the
initial values for the variables <vark> are evaluated in an environment
that includes all the letrec bindings. This permits recursion in the
bindings, such as the mutual recursion of even? and odd? in the example
above, or the evaluation of 10 factorial with

(letrec ((fact
          (lambda (n)
            (if (= n 1)
                1
                (* n (fact (- n 1)))))))
  (fact 10))

a. Implement letrec as a derived expression, by transforming a letrec
   expression into a let expression as shown in the text above or in
   exercise 4.18. That is, the letrec variables should be created with
   a let and then be assigned their values with set!.

b. Louis Reasoner is confused by all this fuss about internal definitions.
   The way he sees it, if you don't like to use define inside a procedure,
   you can just use let. Illustrate what is loose about his reasoning by
   drawing an environment diagram that shows the environment in which the
   <rest of body of f> is evaluated during evaluation of the expression
   (f 5), with f defined as in this exercise. Draw an environment diagram
   for the same evaluation, but with let in place of letrec in the definition
   of f. 

Solution (b):

(define (f x)
  (let ((even?
	 (lambda (n)
	   (if (= n 0) true (odd? (- n 1)))))
	(odd?
	 (lambda (n)
	   (if (= n 0) false (even? (- n 1))))))
    <rest of body of f>))


(define (f x)
  ((lambda (even? odd?)
     <rest of body of f>)
   (lambda (n)
     (if (= n 0) true (odd? (- n 1))))
   (lambda (n)
     (if (= n 0) false (even? (- n 1))))))

(define (f x)
  (let ((even? '*unassigned*)
	(odd? '*unassigned*))
    (set! even?
	  (lambda (n) (if (= n 0) true (odd? (- n 1)))))
    (set! odd?
	  (lambda (n) (if (= n 0) false (even? (- n 1)))))
    <rest of body of f>))

(define (f x)
  ((lambda (even? odd?)
    (set! even?
	  (lambda (n) (if (= n 0) true (odd? (- n 1)))))
    (set! odd?
	  (lambda (n) (if (= n 0) false (even? (- n 1)))))
    <rest of body of f>)
   '*unassigned* '*unassigned*))



-------------------------------------------------------------------------

Exercise 4.21.

Amazingly, Louis's intuition in exercise 4.20 is correct. It is indeed
possible to specify recursive procedures without using letrec (or even
define), although the method for accomplishing this is much more subtle
than Louis imagined. The following expression computes 10 factorial by
applying a recursive factorial procedure:

((lambda (n)
   ((lambda (fact)
      (fact fact n))
    (lambda (ft k)
      (if (= k 1)
          1
          (* k (ft ft (- k 1)))))))
 10)

a. Check (by evaluating the expression) that this really does compute
   factorials. Devise an analogous expression for computing Fibonacci numbers.

b. Consider the following procedure, which includes mutually recursive
   internal definitions: 

(define (f x)
  (define (even? n)
    (if (= n 0)
        true
        (odd? (- n 1))))
  (define (odd? n)
    (if (= n 0)
        false
        (even? (- n 1))))
  (even? x))

Fill in the missing expressions to complete an alternative definition of f,
which uses neither internal definitions nor letrec: 

(define (f x)
  ((lambda (even? odd?)
     (even? even? odd? x))
   (lambda (ev? od? n)
     (if (= n 0) true (od? <??> <??> <??>)))
   (lambda (ev? od? n)
     (if (= n 0) false (ev? <??> <??> <??>)))))

