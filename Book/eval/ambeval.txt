execution procedure
(lambda (env succeed fail) ...)

success continuation
(lambda (value fail) ...)

failure continuation
(lambda () ...)



(define (require a)
  (if (not a) (amb)))

(define (distinct? items)
  (cond ((null? items) true)
	((null? (cdr items)) true)
	((member (car items) (cdr items)) false)
	(else (distinct? (cdr items)))))


(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
	(cooper (amb 1 2 3 4 5))
	(fletcher (amb 1 2 3 4 5))
	(miller (amb 1 2 3 4 5))
	(smith (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
	  (list 'cooper cooper)
	  (list 'fletcher fletcher)
	  (list 'miller miller)
	  (list 'smith smith))))


----------------------------------------------------------------

Exercise 4.42.

Solve the following ``Liars'' puzzle (from Phillips 1934):

Five schoolgirls sat for an examination. Their parents -- so they thought
-- showed an undue degree of interest in the result. They therefore agreed
that, in writing home about the examination, each girl should make one true
statement and one untrue one. The following are the relevant passages from
their letters:

 Betty: ``Kitty was second in the examination. I was only third.''
 Ethel: ``You'll be glad to hear that I was on top. Joan was second.''
 Joan: ``I was third, and poor old Ethel was bottom.''
 Kitty: ``I came out second. Mary was only fourth.''
 Mary: ``I was fourth. Top place was taken by Betty.''

What in fact was the order in which the five girls were placed?


(define (schoolgirls)
  (let ((betty (amb 1 2 3 4 5))
	(ethel (amb 1 2 3 4 5))
	(joan  (amb 1 2 3 4 5))
	(kitty (amb 1 2 3 4 5))
	(mary  (amb 1 2 3 4 5)))
    (require (distinct? (list betty ethel joan kitty mary)))
    (require (or (and (= kitty 2) (not (= betty 3)))
		 (and (not (= kitty 2)) (= betty 3))))
    (require (or (and (= ethel 1) (not (= joan 2)))
		 (and (not (= ethel 1) (= joan 2)))))
    (require (or (and (= joan 3) (not (= ethel 5)))
		 (and (not (= joan 3)) (= ethel 5))))
    (require (or (and (= kitty 2) (not (= mary 4)))
		 (and (not (= kitty 2)) (= mary 4))))
    (require (or (and (= mary 4) (not (= betty 1)))
		 (and (not (= mary 4)) (= betty 1))))
    (list (list 'betty betty)
	  (list 'ethel ethel)
	  (list 'joan joan)
	  (list 'kitty kitty)
	  (list 'mary mary))))


----------------------------------------------------------------

Exercise 4.43.

Use the amb evaluator to solve the following puzzle:

Mary Ann Moore's father has a yacht and so has each of his four friends:
Colonel Downing, Mr. Hall, Sir Barnacle Hood, and Dr. Parker. Each of
the five also has one daughter and each has named his yacht after a
daughter of one of the others. Sir Barnacle's yacht is the Gabrielle,
Mr. Moore owns the Lorna; Mr. Hall the Rosalind. The Melissa, owned by
Colonel Downing, is named after Sir Barnacle's daughter. Gabrielle's
father owns the yacht that is named after Dr. Parker's daughter. Who
is Lorna's father?

Try to write the program so that it runs efficiently (see exercise 4.40).
Also determine how many solutions there are if we are not told that Mary
Ann's last name is Moore.


                      Colonel    Mr.   Barnacle   Dr.
fathers:     Moore    Downing    Hall    Hood    Parker

daughters:

MaryAnn        f
Gabrielle                                  o
Lorna          o
Rosalind                           o
Melissa                  o                 f


f=father of
o=owns a yacht named after


(father Moore MaryAnn)
(father Hood Melissa)
(owns Moore Lorna)
(owns Downing Melissa)
(owns Hall Rosalind)
(owns Hood Gabrielle)
(and (father x gabrielle)
     (owns x y)
     (father parker y))

----------------------------------------------------------------

Exercise 4.44.

Exercise 2.42 described the ``eight-queens puzzle'' of placing queens
on a chessboard so that no two attack each other. Write a nondeterministic
program to solve this puzzle.


     1  2  3  4  5  6  7  8
   +--+--+--+--+--+--+--+--+
1  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
2  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
3  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
4  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
5  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
6  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
7  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+
8  |  |  |  |  |  |  |  |  |
   +--+--+--+--+--+--+--+--+


(define (row q) (car q))

(define (col q) (cadr q))

(define (attacks? q1 q2)
  (cond ((= (row q1) (row q2)) true)
	((= (col q1) (col q2)) true)
	((= (abs (- (row q1) (col q1)))
	    (abs (- (row q2) (col q2))))
	 true)
	((= (+ (row q1) (col q2))
	    (+ (row q1) (col q2)))
	 true)
	(else false)))

(define (eight-queens)
  (let ((q1 (list 1 (amb 1 2 3 4 5 6 7 8)))
	(q2 (list 2 (amb 1 2 3 4 5 6 7 8)))
	(q3 (list 3 (amb 1 2 3 4 5 6 7 8)))
	(q4 (list 4 (amb 1 2 3 4 5 6 7 8)))
	(q5 (list 5 (amb 1 2 3 4 5 6 7 8)))
	(q6 (list 6 (amb 1 2 3 4 5 6 7 8)))
	(q7 (list 7 (amb 1 2 3 4 5 6 7 8)))
	(q8 (list 8 (amb 1 2 3 4 5 6 7 8))))

    (require (not (attacks? q1 q2)))
    (require (not (attacks? q1 q3)))
    (require (not (attacks? q1 q4)))
    (require (not (attacks? q1 q5)))
    (require (not (attacks? q1 q6)))
    (require (not (attacks? q1 q7)))
    (require (not (attacks? q1 q8)))

    (require (not (attacks? q2 q3)))
    (require (not (attacks? q2 q4)))
    (require (not (attacks? q2 q5)))
    (require (not (attacks? q2 q6)))
    (require (not (attacks? q2 q7)))
    (require (not (attacks? q2 q8)))

    (require (not (attacks? q3 q4)))
    (require (not (attacks? q3 q5)))
    (require (not (attacks? q3 q6)))
    (require (not (attacks? q3 q7)))
    (require (not (attacks? q3 q8)))

    (require (not (attacks? q4 q5)))
    (require (not (attacks? q4 q6)))
    (require (not (attacks? q4 q7)))
    (require (not (attacks? q4 q8)))

    (require (not (attacks? q5 q6)))
    (require (not (attacks? q5 q7)))
    (require (not (attacks? q5 q8)))

    (require (not (attacks? q6 q7)))
    (require (not (attacks? q6 q8)))

    (require (not (attacks? q7 q8)))

    (list (list 'q1 q1)
	  (list 'q2 q2)
	  (list 'q3 q3)
	  (list 'q4 q4)
	  (list 'q5 q5)
	  (list 'q6 q6)
	  (list 'q7 q7)
	  (list 'q8 q8))))


This is very inefficient.

(define (attacks? q1row q1col q2row q2col)
  (cond ((= q1row q2row) true)
	((= q1col q2col) true)
	((= (abs (- q1row q1col))
	    (abs (- q2row q2col)))
	 true)
	((= (+ q1row q2col)
	    (+ q1row q2col))
	 true)
	(else false)))


(define (queens)
  (let ((all '())
	(q1 (list 1 (amb (filter (lambda (pos)
				   (not (attacks? 1 pos 


----------------------------------------------------------------

Exercise 4.52.

Implement a new construct called if-fail that permits the user to catch
the failure of an expression. If-fail takes two expressions. It evaluates
the first expression as usual and returns as usual if the evaluation
succeeds. If the evaluation fails, however, the value of the second
expression is returned, as in the following example: 

           ;;; Amb-Eval input:
           (if-fail (let ((x (an-element-of '(1 3 5))))
                      (require (even? x))
                      x)
                    'all-odd)
           ;;; Starting a new problem
           ;;; Amb-Eval value:
           all-odd
           ;;; Amb-Eval input:
           (if-fail (let ((x (an-element-of '(1 3 5 8))))
                      (require (even? x))
                      x)
                    'all-odd)
           ;;; Starting a new problem
           ;;; Amb-Eval value:
           8


See file ex452-if-fail.scm for a solution.
