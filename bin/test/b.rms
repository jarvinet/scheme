
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (assign val (op make-compiled-procedure) (label entry200308141943200) (reg env))
  (goto (label after-lambda200308141943201))
entry200308141943200
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  (save continue)
  (assign proc (op lookup-variable-value) (const c) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308141943213))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308141943214))
compound-branch200308141943215
  (assign continue (label after-call200308141943216))
  (goto (label compound-apply-compiled))
compiled-branch200308141943214
  (assign continue (label after-call200308141943216))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch200308141943213
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308141943216
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch200308141943211))
true-branch200308141943210
  (assign val  (const 1))
  (goto (reg continue))
false-branch200308141943211
  (assign val  (const 2))
  (goto (reg continue))
after-if200308141943212
after-lambda200308141943201
  (perform (op define-variable!) (const b1) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry200308141943230) (reg env))
  (goto (label after-lambda200308141943231))
entry200308141943230
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  (save continue)
  (assign proc (op lookup-variable-value) (const integer-less-than) (reg env))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308141943235))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308141943236))
compound-branch200308141943237
  (assign continue (label after-call200308141943238))
  (goto (label compound-apply-compiled))
compiled-branch200308141943236
  (assign continue (label after-call200308141943238))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch200308141943235
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308141943238
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch200308141943233))
true-branch200308141943232
  (assign val  (const 1))
  (goto (reg continue))
false-branch200308141943233
  (assign val  (const 2))
  (goto (reg continue))
after-if200308141943234
after-lambda200308141943231
  (perform (op define-variable!) (const b2) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry200308141943250) (reg env))
  (goto (label after-lambda200308141943251))
entry200308141943250
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  (save continue)
  (save env)
  (assign proc (op lookup-variable-value) (const c) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308141943255))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308141943256))
compound-branch200308141943257
  (assign continue (label after-call200308141943258))
  (goto (label compound-apply-compiled))
compiled-branch200308141943256
  (assign continue (label after-call200308141943258))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch200308141943255
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308141943258
  (restore env)
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch200308141943253))
true-branch200308141943252
  (assign val  (const 1))
  (goto (reg continue))
false-branch200308141943253
  (assign proc (op lookup-variable-value) (const c) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308141943260))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308141943261))
compound-branch200308141943262
  (goto (label compound-apply-compiled))
compiled-branch200308141943261
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch200308141943260
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308141943263
after-if200308141943254
after-lambda200308141943251
  (perform (op define-variable!) (const b3) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry200308141943280) (reg env))
  (goto (label after-lambda200308141943281))
entry200308141943280
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  (save continue)
  (assign proc (op lookup-variable-value) (const <) (reg env))
  (assign val  (const 2))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308141943293))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308141943294))
compound-branch200308141943295
  (assign continue (label after-call200308141943296))
  (goto (label compound-apply-compiled))
compiled-branch200308141943294
  (assign continue (label after-call200308141943296))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch200308141943293
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308141943296
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch200308141943291))
true-branch200308141943290
  (assign val  (const 1))
  (goto (reg continue))
false-branch200308141943291
  (assign val  (const 2))
  (goto (reg continue))
after-if200308141943292
after-lambda200308141943281
  (perform (op define-variable!) (const b4) (reg val) (reg env))
  (assign val  (const ok))
))
