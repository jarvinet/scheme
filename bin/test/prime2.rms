
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (assign val (op make-compiled-procedure) (label entry1) (reg env))
  (goto (label after-lambda2))
entry1
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n )) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const *) (reg env))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch3))
compiled-branch4
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch3
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call5
after-lambda2
  (perform (op define-variable!) (const square) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry6) (reg env))
  (goto (label after-lambda7))
entry6
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n )) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const find-divisor) (reg env))
  (assign val  (const 2))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch8))
compiled-branch9
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch8
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call10
after-lambda7
  (perform (op define-variable!) (const smallest-divisor) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry11) (reg env))
  (goto (label after-lambda12))
entry11
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n test-divisor )) (reg argl) (reg env))
  (save continue)
  (save env)
  (assign proc (op lookup-variable-value) (const >) (reg env))
  (save proc)
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (assign proc (op lookup-variable-value) (const square) (reg env))
  (assign val (op lookup-variable-value) (const test-divisor) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch16))
compiled-branch17
  (assign continue (label after-call18))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch16
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call18
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch19))
compiled-branch20
  (assign continue (label after-call21))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch19
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call21
  (restore env)
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch14))
true-branch13
  (assign val (op lookup-variable-value) (const n) (reg env))
  (goto (reg continue))
false-branch14
  (save continue)
  (save env)
  (assign proc (op lookup-variable-value) (const divides?) (reg env))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const test-divisor) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch25))
compiled-branch26
  (assign continue (label after-call27))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch25
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call27
  (restore env)
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch23))
true-branch22
  (assign val (op lookup-variable-value) (const test-divisor) (reg env))
  (goto (reg continue))
false-branch23
  (assign proc (op lookup-variable-value) (const find-divisor) (reg env))
  (save continue)
  (save proc)
  (save env)
  (assign proc (op lookup-variable-value) (const +) (reg env))
  (assign val  (const 1))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const test-divisor) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch28))
compiled-branch29
  (assign continue (label after-call30))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch28
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call30
  (assign argl (op list) (reg val))
  (restore env)
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch31))
compiled-branch32
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch31
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call33
after-if24
after-if15
after-lambda12
  (perform (op define-variable!) (const find-divisor) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry34) (reg env))
  (goto (label after-lambda35))
entry34
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (a b )) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const =) (reg env))
  (save continue)
  (save proc)
  (assign val  (const 0))
  (assign argl (op list) (reg val))
  (save argl)
  (assign proc (op lookup-variable-value) (const remainder) (reg env))
  (assign val (op lookup-variable-value) (const a) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const b) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch36))
compiled-branch37
  (assign continue (label after-call38))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch36
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call38
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch39))
compiled-branch40
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch39
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call41
after-lambda35
  (perform (op define-variable!) (const divides?) (reg val) (reg env))
  (assign val  (const ok))
  (assign val (op make-compiled-procedure) (label entry42) (reg env))
  (goto (label after-lambda43))
entry42
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n )) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const =) (reg env))
  (save continue)
  (save proc)
  (save env)
  (assign proc (op lookup-variable-value) (const smallest-divisor) (reg env))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch44))
compiled-branch45
  (assign continue (label after-call46))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch44
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call46
  (assign argl (op list) (reg val))
  (restore env)
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch47))
compiled-branch48
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch47
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call49
after-lambda43
  (perform (op define-variable!) (const prime?) (reg val) (reg env))
  (assign val  (const ok))
  (save env)
  (assign proc (op lookup-variable-value) (const display) (reg env))
  (save proc)
  (assign proc (op lookup-variable-value) (const prime?) (reg env))
  (assign val  (const 173))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch50))
compiled-branch51
  (assign continue (label after-call52))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch50
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call52
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch53))
compiled-branch54
  (assign continue (label after-call55))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch53
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call55
  (restore env)
  (assign proc (op lookup-variable-value) (const newline) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch56))
compiled-branch57
  (assign continue (label after-call58))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch56
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call58
))
