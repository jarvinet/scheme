
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (comment (lambda (predicate sequence) (cond ((null? sequence) (quote ())) ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence)))) (else (filter predicate (cdr sequence))))))
  (assign val (op make-compiled-procedure) (label entry200308202116251) (reg env))
  (goto (label after-lambda200308202116250))
  (comment (lambda (predicate sequence) (cond ((null? sequence) (quote ())) ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence)))) (else (filter predicate (cdr sequence))))))
entry200308202116251
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (predicate sequence)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116301))
compound-branch200308202116302
  (assign continue (label after-call200308202116300))
  (goto (label compound-apply-compiled))
compiled-branch200308202116303
  (assign continue (label after-call200308202116300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116300
  (restore env)
  (restore continue)
  (comment (if (null? sequence) (quote ()) (if (predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))) (filter predicate (cdr sequence)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202116253))
true-branch200308202116254
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308202116253
  (save continue)
  (save env)
  (comment predicate)
  (assign proc (op lookup-variable-value) (const predicate) (reg env))
  (save proc)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116291))
compound-branch200308202116292
  (assign continue (label after-call200308202116290))
  (goto (label compound-apply-compiled))
compiled-branch200308202116293
  (assign continue (label after-call200308202116290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116290
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116299))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116298))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116296))
compound-branch200308202116297
  (assign continue (label after-call200308202116295))
  (goto (label compound-apply-compiled))
compiled-branch200308202116298
  (assign continue (label after-call200308202116295))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116296
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116299
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116295
  (restore env)
  (restore continue)
  (comment (if (predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))) (filter predicate (cdr sequence))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202116256))
true-branch200308202116257
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116261))
compound-branch200308202116262
  (assign continue (label after-call200308202116260))
  (goto (label compound-apply-compiled))
compiled-branch200308202116263
  (assign continue (label after-call200308202116260))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116261
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116260
  (assign argl (op list) (reg val))
  (restore env)
  (comment predicate)
  (assign val (op lookup-variable-value) (const predicate) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116269))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116268))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116266))
compound-branch200308202116267
  (assign continue (label after-call200308202116265))
  (goto (label compound-apply-compiled))
compiled-branch200308202116268
  (assign continue (label after-call200308202116265))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116266
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116269
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116265
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116281))
compound-branch200308202116282
  (assign continue (label after-call200308202116280))
  (goto (label compound-apply-compiled))
compiled-branch200308202116283
  (assign continue (label after-call200308202116280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116280
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116289))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116288))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116286))
compound-branch200308202116287
  (goto (label compound-apply-compiled))
compiled-branch200308202116288
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116286
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116289
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116285
false-branch200308202116256
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021162512))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021162511))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116259))
compound-branch2003082021162510
  (assign continue (label after-call200308202116258))
  (goto (label compound-apply-compiled))
compiled-branch2003082021162511
  (assign continue (label after-call200308202116258))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116259
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021162512
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116258
  (assign argl (op list) (reg val))
  (restore env)
  (comment predicate)
  (assign val (op lookup-variable-value) (const predicate) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021162517))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021162516))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021162514))
compound-branch2003082021162515
  (goto (label compound-apply-compiled))
compiled-branch2003082021162516
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021162514
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021162517
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021162513
after-if200308202116255
after-if200308202116252
after-lambda200308202116250
  (comment (define (filter predicate sequence) (cond ((null? sequence) (quote ())) ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence)))) (else (filter predicate (cdr sequence))))))
  (perform (op define-variable!) (const filter) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (oper initial-value seq) (cond ((null? seq) initial-value) ((pair? seq) (oper (car seq) (fold-right oper initial-value (cdr seq)))) (else seq))))
  (assign val (op make-compiled-procedure) (label entry200308202116191) (reg env))
  (goto (label after-lambda200308202116190))
  (comment (lambda (oper initial-value seq) (cond ((null? seq) initial-value) ((pair? seq) (oper (car seq) (fold-right oper initial-value (cdr seq)))) (else seq))))
entry200308202116191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (oper initial-value seq)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116231))
compound-branch200308202116232
  (assign continue (label after-call200308202116230))
  (goto (label compound-apply-compiled))
compiled-branch200308202116233
  (assign continue (label after-call200308202116230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116230
  (restore env)
  (restore continue)
  (comment (if (null? seq) initial-value (if (pair? seq) (oper (car seq) (fold-right oper initial-value (cdr seq))) seq)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202116193))
true-branch200308202116194
  (comment initial-value)
  (assign val (op lookup-variable-value) (const initial-value) (reg env))
  (goto (reg continue))
false-branch200308202116193
  (save continue)
  (save env)
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116221))
compound-branch200308202116222
  (assign continue (label after-call200308202116220))
  (goto (label compound-apply-compiled))
compiled-branch200308202116223
  (assign continue (label after-call200308202116220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116220
  (restore env)
  (restore continue)
  (comment (if (pair? seq) (oper (car seq) (fold-right oper initial-value (cdr seq))) seq))
  (test (op false?) (reg val))
  (branch (label false-branch200308202116196))
true-branch200308202116197
  (comment oper)
  (assign proc (op lookup-variable-value) (const oper) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment fold-right)
  (assign proc (op lookup-variable-value) (const fold-right) (reg env))
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021161912))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021161911))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116199))
compound-branch2003082021161910
  (assign continue (label after-call200308202116198))
  (goto (label compound-apply-compiled))
compiled-branch2003082021161911
  (assign continue (label after-call200308202116198))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116199
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021161912
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116198
  (assign argl (op list) (reg val))
  (restore env)
  (comment initial-value)
  (assign val (op lookup-variable-value) (const initial-value) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment oper)
  (assign val (op lookup-variable-value) (const oper) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021161917))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021161916))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021161914))
compound-branch2003082021161915
  (assign continue (label after-call2003082021161913))
  (goto (label compound-apply-compiled))
compiled-branch2003082021161916
  (assign continue (label after-call2003082021161913))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021161914
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021161917
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021161913
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116201))
compound-branch200308202116202
  (assign continue (label after-call200308202116200))
  (goto (label compound-apply-compiled))
compiled-branch200308202116203
  (assign continue (label after-call200308202116200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116200
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116209))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116208))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116206))
compound-branch200308202116207
  (goto (label compound-apply-compiled))
compiled-branch200308202116208
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116206
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116209
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116205
false-branch200308202116196
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (goto (reg continue))
after-if200308202116195
after-if200308202116192
after-lambda200308202116190
  (comment (define (fold-right oper initial-value seq) (cond ((null? seq) initial-value) ((pair? seq) (oper (car seq) (fold-right oper initial-value (cdr seq)))) (else seq))))
  (perform (op define-variable!) (const fold-right) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (oper initial sequence) (define (iter result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest)))) (iter initial sequence)))
  (assign val (op make-compiled-procedure) (label entry200308202116111) (reg env))
  (goto (label after-lambda200308202116110))
  (comment (lambda (oper initial sequence) (define (iter result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest)))) (iter initial sequence)))
entry200308202116111
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (oper initial sequence)) (reg argl) (reg env))
  (comment (lambda (iter) (set! iter (lambda (result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest))))) (iter initial sequence)))
  (assign proc (op make-compiled-procedure) (label entry200308202116113) (reg env))
  (goto (label after-lambda200308202116112))
  (comment (lambda (iter) (set! iter (lambda (result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest))))) (iter initial sequence)))
entry200308202116113
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (iter)) (reg argl) (reg env))
  (comment (lambda (result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest)))))
  (assign val (op make-compiled-procedure) (label entry2003082021161110) (reg env))
  (goto (label after-lambda200308202116119))
  (comment (lambda (result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest)))))
entry2003082021161110
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (result rest)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116151))
compound-branch200308202116152
  (assign continue (label after-call200308202116150))
  (goto (label compound-apply-compiled))
compiled-branch200308202116153
  (assign continue (label after-call200308202116150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116150
  (restore env)
  (restore continue)
  (comment (if (null? rest) result (iter (oper result (car rest)) (cdr rest))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021161112))
true-branch2003082021161113
  (comment result)
  (assign val (op lookup-variable-value) (const result) (reg env))
  (goto (reg continue))
false-branch2003082021161112
  (comment iter)
  (assign proc (op lookup-variable-value) (const iter) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116121))
compound-branch200308202116122
  (assign continue (label after-call200308202116120))
  (goto (label compound-apply-compiled))
compiled-branch200308202116123
  (assign continue (label after-call200308202116120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116120
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment oper)
  (assign proc (op lookup-variable-value) (const oper) (reg env))
  (save proc)
  (save env)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116129))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116128))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116126))
compound-branch200308202116127
  (assign continue (label after-call200308202116125))
  (goto (label compound-apply-compiled))
compiled-branch200308202116128
  (assign continue (label after-call200308202116125))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116126
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116129
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116125
  (assign argl (op list) (reg val))
  (restore env)
  (comment result)
  (assign val (op lookup-variable-value) (const result) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021161214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021161213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021161211))
compound-branch2003082021161212
  (assign continue (label after-call2003082021161210))
  (goto (label compound-apply-compiled))
compiled-branch2003082021161213
  (assign continue (label after-call2003082021161210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021161211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021161214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021161210
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116131))
compound-branch200308202116132
  (goto (label compound-apply-compiled))
compiled-branch200308202116133
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116131
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116130
after-if2003082021161111
after-lambda200308202116119
  (comment (set! iter (lambda (result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest))))))
  (perform (op set-variable-value!) (const iter) (reg val) (reg env))
  (assign val  (const ok))
  (comment iter)
  (assign proc (op lookup-variable-value) (const iter) (reg env))
  (comment sequence)
  (assign val (op lookup-variable-value) (const sequence) (reg env))
  (assign argl (op list) (reg val))
  (comment initial)
  (assign val (op lookup-variable-value) (const initial) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116118))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116117))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116115))
compound-branch200308202116116
  (goto (label compound-apply-compiled))
compiled-branch200308202116117
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116115
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116118
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116114
after-lambda200308202116112
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116171))
compound-branch200308202116172
  (goto (label compound-apply-compiled))
compiled-branch200308202116173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116170
after-lambda200308202116110
  (comment (define (fold-left oper initial sequence) (define (iter result rest) (if (null? rest) result (iter (oper result (car rest)) (cdr rest)))) (iter initial sequence)))
  (perform (op define-variable!) (const fold-left) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (oper initial-value seq) (fold-right oper initial-value seq)))
  (assign val (op make-compiled-procedure) (label entry200308202116101) (reg env))
  (goto (label after-lambda200308202116100))
  (comment (lambda (oper initial-value seq) (fold-right oper initial-value seq)))
entry200308202116101
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (oper initial-value seq)) (reg argl) (reg env))
  (comment fold-right)
  (assign proc (op lookup-variable-value) (const fold-right) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (comment initial-value)
  (assign val (op lookup-variable-value) (const initial-value) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment oper)
  (assign val (op lookup-variable-value) (const oper) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116106))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116105))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116103))
compound-branch200308202116104
  (goto (label compound-apply-compiled))
compiled-branch200308202116105
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116103
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116106
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116102
after-lambda200308202116100
  (comment (define (accumulate oper initial-value seq) (fold-right oper initial-value seq)))
  (perform (op define-variable!) (const accumulate) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda args (define (iter args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args))))) (iter args)))
  (assign val (op make-compiled-procedure) (label entry200308202116031) (reg env))
  (goto (label after-lambda200308202116030))
  (comment (lambda args (define (iter args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args))))) (iter args)))
entry200308202116031
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const args) (reg argl) (reg env))
  (comment (lambda (iter) (set! iter (lambda (args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args)))))) (iter args)))
  (assign proc (op make-compiled-procedure) (label entry200308202116033) (reg env))
  (goto (label after-lambda200308202116032))
  (comment (lambda (iter) (set! iter (lambda (args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args)))))) (iter args)))
entry200308202116033
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (iter)) (reg argl) (reg env))
  (comment (lambda (args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args))))))
  (assign val (op make-compiled-procedure) (label entry200308202116041) (reg env))
  (goto (label after-lambda200308202116040))
  (comment (lambda (args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args))))))
entry200308202116041
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (args)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment args)
  (assign val (op lookup-variable-value) (const args) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116061))
compound-branch200308202116062
  (assign continue (label after-call200308202116060))
  (goto (label compound-apply-compiled))
compiled-branch200308202116063
  (assign continue (label after-call200308202116060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116060
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116066))
compound-branch200308202116067
  (assign continue (label after-call200308202116065))
  (goto (label compound-apply-compiled))
compiled-branch200308202116068
  (assign continue (label after-call200308202116065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116065
  (restore env)
  (restore continue)
  (comment (if (not (null? args)) (begin (display (car args)) (iter (cdr args)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202116043))
true-branch200308202116044
  (save continue)
  (save env)
  (comment display)
  (assign proc (op lookup-variable-value) (const display) (reg env))
  (save proc)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment args)
  (assign val (op lookup-variable-value) (const args) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116051))
compound-branch200308202116052
  (assign continue (label after-call200308202116050))
  (goto (label compound-apply-compiled))
compiled-branch200308202116053
  (assign continue (label after-call200308202116050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116050
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116059))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116058))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116056))
compound-branch200308202116057
  (assign continue (label after-call200308202116055))
  (goto (label compound-apply-compiled))
compiled-branch200308202116058
  (assign continue (label after-call200308202116055))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116056
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116059
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116055
  (restore env)
  (restore continue)
  (comment iter)
  (assign proc (op lookup-variable-value) (const iter) (reg env))
  (save continue)
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment args)
  (assign val (op lookup-variable-value) (const args) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116049))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116048))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116046))
compound-branch200308202116047
  (assign continue (label after-call200308202116045))
  (goto (label compound-apply-compiled))
compiled-branch200308202116048
  (assign continue (label after-call200308202116045))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116046
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202116049
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202116045
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021160414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021160413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021160411))
compound-branch2003082021160412
  (goto (label compound-apply-compiled))
compiled-branch2003082021160413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021160411
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021160414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021160410
false-branch200308202116043
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if200308202116042
after-lambda200308202116040
  (comment (set! iter (lambda (args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args)))))))
  (perform (op set-variable-value!) (const iter) (reg val) (reg env))
  (assign val  (const ok))
  (comment iter)
  (assign proc (op lookup-variable-value) (const iter) (reg env))
  (comment args)
  (assign val (op lookup-variable-value) (const args) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116038))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116037))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116035))
compound-branch200308202116036
  (goto (label compound-apply-compiled))
compiled-branch200308202116037
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116035
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116038
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116034
after-lambda200308202116032
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202116084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202116083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202116081))
compound-branch200308202116082
  (goto (label compound-apply-compiled))
compiled-branch200308202116083
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202116081
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202116084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202116080
after-lambda200308202116030
  (comment (define (error . args) (define (iter args) (if (not (null? args)) (begin (display (car args)) (iter (cdr args))))) (iter args)))
  (perform (op define-variable!) (const error) (reg val) (reg env))
  (assign val  (const ok))
))
