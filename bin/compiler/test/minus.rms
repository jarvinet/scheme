
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (comment (lambda (first . rest) (if (null? rest) (integer-minus 0 first) (fold-left integer-minus first rest))))
  (assign val (op make-compiled-procedure) (label entry200308172206421) (reg env))
  (goto (label after-lambda200308172206420))
  (comment (lambda (first . rest) (if (null? rest) (integer-minus 0 first) (fold-left integer-minus first rest))))
entry200308172206421
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (first . rest)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172206439))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172206438))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172206436))
compound-branch200308172206437
  (assign continue (label after-call200308172206435))
  (goto (label compound-apply-compiled))
compiled-branch200308172206438
  (assign continue (label after-call200308172206435))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172206436
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172206439
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172206435
  (restore env)
  (restore continue)
  (comment (if (null? rest) (integer-minus 0 first) (fold-left integer-minus first rest)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172206423))
true-branch200308172206424
  (comment integer-minus)
  (assign proc (op lookup-variable-value) (const integer-minus) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (comment 0)
  (assign val  (const 0))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172206434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172206433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172206431))
compound-branch200308172206432
  (goto (label compound-apply-compiled))
compiled-branch200308172206433
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172206431
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172206434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172206430
false-branch200308172206423
  (comment fold-left)
  (assign proc (op lookup-variable-value) (const fold-left) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment integer-minus)
  (assign val (op lookup-variable-value) (const integer-minus) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172206429))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172206428))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172206426))
compound-branch200308172206427
  (goto (label compound-apply-compiled))
compiled-branch200308172206428
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172206426
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172206429
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172206425
after-if200308172206422
after-lambda200308172206420
  (comment (define (- first . rest) (if (null? rest) (integer-minus 0 first) (fold-left integer-minus first rest))))
  (perform (op define-variable!) (const -) (reg val) (reg env))
  (assign val  (const ok))
))
