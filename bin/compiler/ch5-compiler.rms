
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (comment (lambda (exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180527301) (reg env))
  (goto (label after-lambda200308180527300))
  (comment (lambda (exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
entry200308180527301
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment self-evaluating?)
  (assign proc (op lookup-variable-value) (const self-evaluating?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528401))
compound-branch200308180528402
  (assign continue (label after-call200308180528400))
  (goto (label compound-apply-compiled))
compiled-branch200308180528403
  (assign continue (label after-call200308180528400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528400
  (restore env)
  (restore continue)
  (comment (if (self-evaluating? exp) (compile-self-evaluating exp target linkage) (if (quoted? exp) (compile-quoted exp target linkage) (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180527303))
true-branch200308180527304
  (comment compile-self-evaluating)
  (assign proc (op lookup-variable-value) (const compile-self-evaluating) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528391))
compound-branch200308180528392
  (goto (label compound-apply-compiled))
compiled-branch200308180528393
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528391
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528390
false-branch200308180527303
  (save continue)
  (save env)
  (comment quoted?)
  (assign proc (op lookup-variable-value) (const quoted?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528341))
compound-branch200308180528342
  (assign continue (label after-call200308180528340))
  (goto (label compound-apply-compiled))
compiled-branch200308180528343
  (assign continue (label after-call200308180528340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528340
  (restore env)
  (restore continue)
  (comment (if (quoted? exp) (compile-quoted exp target linkage) (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180527306))
true-branch200308180527307
  (comment compile-quoted)
  (assign proc (op lookup-variable-value) (const compile-quoted) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528331))
compound-branch200308180528332
  (goto (label compound-apply-compiled))
compiled-branch200308180528333
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528331
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528330
false-branch200308180527306
  (save continue)
  (save env)
  (comment variable?)
  (assign proc (op lookup-variable-value) (const variable?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528281))
compound-branch200308180528282
  (assign continue (label after-call200308180528280))
  (goto (label compound-apply-compiled))
compiled-branch200308180528283
  (assign continue (label after-call200308180528280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528280
  (restore env)
  (restore continue)
  (comment (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180527309))
true-branch2003081805273010
  (comment compile-variable)
  (assign proc (op lookup-variable-value) (const compile-variable) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528271))
compound-branch200308180528272
  (goto (label compound-apply-compiled))
compiled-branch200308180528273
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528271
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528270
false-branch200308180527309
  (save continue)
  (save env)
  (comment assignment?)
  (assign proc (op lookup-variable-value) (const assignment?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528221))
compound-branch200308180528222
  (assign continue (label after-call200308180528220))
  (goto (label compound-apply-compiled))
compiled-branch200308180528223
  (assign continue (label after-call200308180528220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528220
  (restore env)
  (restore continue)
  (comment (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273012))
true-branch2003081805273013
  (comment compile-assignment)
  (assign proc (op lookup-variable-value) (const compile-assignment) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528211))
compound-branch200308180528212
  (goto (label compound-apply-compiled))
compiled-branch200308180528213
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528211
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528210
false-branch2003081805273012
  (save continue)
  (save env)
  (comment definition?)
  (assign proc (op lookup-variable-value) (const definition?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528169))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528168))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528166))
compound-branch200308180528167
  (assign continue (label after-call200308180528165))
  (goto (label compound-apply-compiled))
compiled-branch200308180528168
  (assign continue (label after-call200308180528165))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528166
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528169
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528165
  (restore env)
  (restore continue)
  (comment (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273015))
true-branch2003081805273016
  (comment compile-definition)
  (assign proc (op lookup-variable-value) (const compile-definition) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528161))
compound-branch200308180528162
  (goto (label compound-apply-compiled))
compiled-branch200308180528163
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528161
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528160
false-branch2003081805273015
  (save continue)
  (save env)
  (comment if?)
  (assign proc (op lookup-variable-value) (const if?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528121))
compound-branch200308180528122
  (assign continue (label after-call200308180528120))
  (goto (label compound-apply-compiled))
compiled-branch200308180528123
  (assign continue (label after-call200308180528120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528120
  (restore env)
  (restore continue)
  (comment (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273018))
true-branch2003081805273019
  (comment compile-if)
  (assign proc (op lookup-variable-value) (const compile-if) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528111))
compound-branch200308180528112
  (goto (label compound-apply-compiled))
compiled-branch200308180528113
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528111
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528110
false-branch2003081805273018
  (save continue)
  (save env)
  (comment lambda?)
  (assign proc (op lookup-variable-value) (const lambda?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528071))
compound-branch200308180528072
  (assign continue (label after-call200308180528070))
  (goto (label compound-apply-compiled))
compiled-branch200308180528073
  (assign continue (label after-call200308180528070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528070
  (restore env)
  (restore continue)
  (comment (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273021))
true-branch2003081805273022
  (comment compile-lambda)
  (assign proc (op lookup-variable-value) (const compile-lambda) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528061))
compound-branch200308180528062
  (goto (label compound-apply-compiled))
compiled-branch200308180528063
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528061
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528060
false-branch2003081805273021
  (save continue)
  (save env)
  (comment begin?)
  (assign proc (op lookup-variable-value) (const begin?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528021))
compound-branch200308180528022
  (assign continue (label after-call200308180528020))
  (goto (label compound-apply-compiled))
compiled-branch200308180528023
  (assign continue (label after-call200308180528020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528020
  (restore env)
  (restore continue)
  (comment (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273024))
true-branch2003081805273025
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment begin-actions)
  (assign proc (op lookup-variable-value) (const begin-actions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528001))
compound-branch200308180528002
  (assign continue (label after-call200308180528000))
  (goto (label compound-apply-compiled))
compiled-branch200308180528003
  (assign continue (label after-call200308180528000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180528004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180528000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180528014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180528013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180528011))
compound-branch200308180528012
  (goto (label compound-apply-compiled))
compiled-branch200308180528013
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180528011
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180528014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180528010
false-branch2003081805273024
  (save continue)
  (save env)
  (comment cond?)
  (assign proc (op lookup-variable-value) (const cond?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527571))
compound-branch200308180527572
  (assign continue (label after-call200308180527570))
  (goto (label compound-apply-compiled))
compiled-branch200308180527573
  (assign continue (label after-call200308180527570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527570
  (restore env)
  (restore continue)
  (comment (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273027))
true-branch2003081805273028
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment cond->if)
  (assign proc (op lookup-variable-value) (const cond->if) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527551))
compound-branch200308180527552
  (assign continue (label after-call200308180527550))
  (goto (label compound-apply-compiled))
compiled-branch200308180527553
  (assign continue (label after-call200308180527550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527550
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527556))
compound-branch200308180527557
  (goto (label compound-apply-compiled))
compiled-branch200308180527558
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527556
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527555
false-branch2003081805273027
  (save continue)
  (save env)
  (comment let?)
  (assign proc (op lookup-variable-value) (const let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527516))
compound-branch200308180527517
  (assign continue (label after-call200308180527515))
  (goto (label compound-apply-compiled))
compiled-branch200308180527518
  (assign continue (label after-call200308180527515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527515
  (restore env)
  (restore continue)
  (comment (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273030))
true-branch2003081805273031
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment let->combination)
  (assign proc (op lookup-variable-value) (const let->combination) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527501))
compound-branch200308180527502
  (assign continue (label after-call200308180527500))
  (goto (label compound-apply-compiled))
compiled-branch200308180527503
  (assign continue (label after-call200308180527500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527511))
compound-branch200308180527512
  (goto (label compound-apply-compiled))
compiled-branch200308180527513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527511
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527510
false-branch2003081805273030
  (save continue)
  (save env)
  (comment let*?)
  (assign proc (op lookup-variable-value) (const let*?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527471))
compound-branch200308180527472
  (assign continue (label after-call200308180527470))
  (goto (label compound-apply-compiled))
compiled-branch200308180527473
  (assign continue (label after-call200308180527470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527470
  (restore env)
  (restore continue)
  (comment (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273033))
true-branch2003081805273034
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment let*->nested-lets)
  (assign proc (op lookup-variable-value) (const let*->nested-lets) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527451))
compound-branch200308180527452
  (assign continue (label after-call200308180527450))
  (goto (label compound-apply-compiled))
compiled-branch200308180527453
  (assign continue (label after-call200308180527450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527450
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527461))
compound-branch200308180527462
  (goto (label compound-apply-compiled))
compiled-branch200308180527463
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527461
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527460
false-branch2003081805273033
  (save continue)
  (save env)
  (comment letrec?)
  (assign proc (op lookup-variable-value) (const letrec?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527431))
compound-branch200308180527432
  (assign continue (label after-call200308180527430))
  (goto (label compound-apply-compiled))
compiled-branch200308180527433
  (assign continue (label after-call200308180527430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527430
  (restore env)
  (restore continue)
  (comment (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273036))
true-branch2003081805273037
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment letrec->let)
  (assign proc (op lookup-variable-value) (const letrec->let) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527411))
compound-branch200308180527412
  (assign continue (label after-call200308180527410))
  (goto (label compound-apply-compiled))
compiled-branch200308180527413
  (assign continue (label after-call200308180527410))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527411
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527410
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527419))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527418))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527416))
compound-branch200308180527417
  (goto (label compound-apply-compiled))
compiled-branch200308180527418
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527416
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527419
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527415
false-branch2003081805273036
  (save continue)
  (save env)
  (comment and?)
  (assign proc (op lookup-variable-value) (const and?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527391))
compound-branch200308180527392
  (assign continue (label after-call200308180527390))
  (goto (label compound-apply-compiled))
compiled-branch200308180527393
  (assign continue (label after-call200308180527390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527390
  (restore env)
  (restore continue)
  (comment (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273039))
true-branch2003081805273040
  (comment compile-and)
  (assign proc (op lookup-variable-value) (const compile-and) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment and-expressions)
  (assign proc (op lookup-variable-value) (const and-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527371))
compound-branch200308180527372
  (assign continue (label after-call200308180527370))
  (goto (label compound-apply-compiled))
compiled-branch200308180527373
  (assign continue (label after-call200308180527370))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527371
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527370
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527379))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527378))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527376))
compound-branch200308180527377
  (goto (label compound-apply-compiled))
compiled-branch200308180527378
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527376
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527379
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527375
false-branch2003081805273039
  (save continue)
  (save env)
  (comment or?)
  (assign proc (op lookup-variable-value) (const or?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527351))
compound-branch200308180527352
  (assign continue (label after-call200308180527350))
  (goto (label compound-apply-compiled))
compiled-branch200308180527353
  (assign continue (label after-call200308180527350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527350
  (restore env)
  (restore continue)
  (comment (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273042))
true-branch2003081805273043
  (comment compile-or)
  (assign proc (op lookup-variable-value) (const compile-or) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment or-expressions)
  (assign proc (op lookup-variable-value) (const or-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527331))
compound-branch200308180527332
  (assign continue (label after-call200308180527330))
  (goto (label compound-apply-compiled))
compiled-branch200308180527333
  (assign continue (label after-call200308180527330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527341))
compound-branch200308180527342
  (goto (label compound-apply-compiled))
compiled-branch200308180527343
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527341
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527340
false-branch2003081805273042
  (save continue)
  (save env)
  (comment application?)
  (assign proc (op lookup-variable-value) (const application?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527316))
compound-branch200308180527317
  (assign continue (label after-call200308180527315))
  (goto (label compound-apply-compiled))
compiled-branch200308180527318
  (assign continue (label after-call200308180527315))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527315
  (restore env)
  (restore continue)
  (comment (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805273045))
true-branch2003081805273046
  (comment compile-application)
  (assign proc (op lookup-variable-value) (const compile-application) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527311))
compound-branch200308180527312
  (goto (label compound-apply-compiled))
compiled-branch200308180527313
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527311
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527310
false-branch2003081805273045
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment "Unknown expression type -- COMPILE")
  (assign val  (const "Unknown expression type -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805273051))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805273050))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805273048))
compound-branch2003081805273049
  (goto (label compound-apply-compiled))
compiled-branch2003081805273050
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805273048
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805273051
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003081805273047
after-if2003081805273044
after-if2003081805273041
after-if2003081805273038
after-if2003081805273035
after-if2003081805273032
after-if2003081805273029
after-if2003081805273026
after-if2003081805273023
after-if2003081805273020
after-if2003081805273017
after-if2003081805273014
after-if2003081805273011
after-if200308180527308
after-if200308180527305
after-if200308180527302
after-lambda200308180527300
  (comment (define (compile exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
  (perform (op define-variable!) (const compile) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (needs modifies statements comment) (list needs modifies (if (null? comment) statements (cons (list (quote comment) comment) statements)))))
  (assign val (op make-compiled-procedure) (label entry200308180527081) (reg env))
  (goto (label after-lambda200308180527080))
  (comment (lambda (needs modifies statements comment) (list needs modifies (if (null? comment) statements (cons (list (quote comment) comment) statements)))))
entry200308180527081
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (needs modifies statements comment)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (save env)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment comment)
  (assign val (op lookup-variable-value) (const comment) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527111))
compound-branch200308180527112
  (assign continue (label after-call200308180527110))
  (goto (label compound-apply-compiled))
compiled-branch200308180527113
  (assign continue (label after-call200308180527110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527110
  (restore env)
  (comment (if (null? comment) statements (cons (list (quote comment) comment) statements)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180527101))
true-branch200308180527102
  (comment statements)
  (assign val (op lookup-variable-value) (const statements) (reg env))
  (goto (label after-if200308180527100))
false-branch200308180527101
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save proc)
  (comment statements)
  (assign val (op lookup-variable-value) (const statements) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment comment)
  (assign val (op lookup-variable-value) (const comment) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote comment))
  (assign val  (const comment))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527107))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527106))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527104))
compound-branch200308180527105
  (assign continue (label after-call200308180527103))
  (goto (label compound-apply-compiled))
compiled-branch200308180527106
  (assign continue (label after-call200308180527103))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527104
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180527107
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527103
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805271012))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805271011))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527109))
compound-branch2003081805271010
  (assign continue (label after-call200308180527108))
  (goto (label compound-apply-compiled))
compiled-branch2003081805271011
  (assign continue (label after-call200308180527108))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527109
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805271012
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180527108
after-if200308180527100
  (assign argl (op list) (reg val))
  (restore env)
  (comment modifies)
  (assign val (op lookup-variable-value) (const modifies) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment needs)
  (assign val (op lookup-variable-value) (const needs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180527134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180527133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180527131))
compound-branch200308180527132
  (goto (label compound-apply-compiled))
compiled-branch200308180527133
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180527131
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180527134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180527130
after-lambda200308180527080
  (comment (define (make-instruction-sequence needs modifies statements comment) (list needs modifies (if (null? comment) statements (cons (list (quote comment) comment) statements)))))
  (perform (op define-variable!) (const make-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda () (make-instruction-sequence (quote ()) (quote ()) (quote ()) (quote ()))))
  (assign val (op make-compiled-procedure) (label entry200308180526531) (reg env))
  (goto (label after-lambda200308180526530))
  (comment (lambda () (make-instruction-sequence (quote ()) (quote ()) (quote ()) (quote ()))))
entry200308180526531
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const ()) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526536))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526535))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526533))
compound-branch200308180526534
  (goto (label compound-apply-compiled))
compiled-branch200308180526535
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526533
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180526536
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180526532
after-lambda200308180526530
  (comment (define (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (quote ()) (quote ()))))
  (perform (op define-variable!) (const empty-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))) (quote ()))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))) (quote ()))))))
  (assign val (op make-compiled-procedure) (label entry200308180526281) (reg env))
  (goto (label after-lambda200308180526280))
  (comment (lambda (linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))) (quote ()))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))) (quote ()))))))
entry200308180526281
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526361))
compound-branch200308180526362
  (assign continue (label after-call200308180526360))
  (goto (label compound-apply-compiled))
compiled-branch200308180526363
  (assign continue (label after-call200308180526360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526360
  (restore env)
  (restore continue)
  (comment (if (eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))) (quote ())) (if (eq? linkage (quote next)) (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))) (quote ())))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180526283))
true-branch200308180526284
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((goto (reg continue)))))
  (assign val  (const ((goto (reg continue)))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (continue)))
  (assign val  (const (continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526351))
compound-branch200308180526352
  (goto (label compound-apply-compiled))
compiled-branch200308180526353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180526354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180526350
false-branch200308180526283
  (save continue)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526336))
compound-branch200308180526337
  (assign continue (label after-call200308180526335))
  (goto (label compound-apply-compiled))
compiled-branch200308180526338
  (assign continue (label after-call200308180526335))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526336
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526335
  (restore env)
  (restore continue)
  (comment (if (eq? linkage (quote next)) (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))) (quote ()))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180526286))
true-branch200308180526287
  (comment empty-instruction-sequence)
  (assign proc (op lookup-variable-value) (const empty-instruction-sequence) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526331))
compound-branch200308180526332
  (goto (label compound-apply-compiled))
compiled-branch200308180526333
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526331
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180526334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180526330
false-branch200308180526286
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526291))
compound-branch200308180526292
  (assign continue (label after-call200308180526290))
  (goto (label compound-apply-compiled))
compiled-branch200308180526293
  (assign continue (label after-call200308180526290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526290
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526301))
compound-branch200308180526302
  (assign continue (label after-call200308180526300))
  (goto (label compound-apply-compiled))
compiled-branch200308180526303
  (assign continue (label after-call200308180526300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526300
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526309))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526308))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526306))
compound-branch200308180526307
  (assign continue (label after-call200308180526305))
  (goto (label compound-apply-compiled))
compiled-branch200308180526308
  (assign continue (label after-call200308180526305))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526306
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526309
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526305
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526311))
compound-branch200308180526312
  (goto (label compound-apply-compiled))
compiled-branch200308180526313
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526311
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180526314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180526310
after-if200308180526285
after-if200308180526282
after-lambda200308180526280
  (comment (define (compile-linkage linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))) (quote ()))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))) (quote ()))))))
  (perform (op define-variable!) (const compile-linkage) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
  (assign val (op make-compiled-procedure) (label entry200308180526121) (reg env))
  (goto (label after-lambda200308180526120))
  (comment (lambda (linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
entry200308180526121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (linkage instruction-sequence)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-linkage)
  (assign proc (op lookup-variable-value) (const compile-linkage) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526126))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526125))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526123))
compound-branch200308180526124
  (assign continue (label after-call200308180526122))
  (goto (label compound-apply-compiled))
compiled-branch200308180526125
  (assign continue (label after-call200308180526122))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180526126
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180526122
  (assign argl (op list) (reg val))
  (restore env)
  (comment instruction-sequence)
  (assign val (op lookup-variable-value) (const instruction-sequence) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (continue)))
  (assign val  (const (continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180526134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180526133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180526131))
compound-branch200308180526132
  (goto (label compound-apply-compiled))
compiled-branch200308180526133
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180526131
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180526134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180526130
after-lambda200308180526120
  (comment (define (end-with-linkage linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
  (perform (op define-variable!) (const end-with-linkage) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp))) exp))))
  (assign val (op make-compiled-procedure) (label entry200308180525511) (reg env))
  (goto (label after-lambda200308180525510))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp))) exp))))
entry200308180525511
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525516))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525515))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525513))
compound-branch200308180525514
  (assign continue (label after-call200308180525512))
  (goto (label compound-apply-compiled))
compiled-branch200308180525515
  (assign continue (label after-call200308180525512))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525513
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525516
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525512
  (assign argl (op list) (reg val))
  (restore env)
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525521))
compound-branch200308180525522
  (assign continue (label after-call200308180525520))
  (goto (label compound-apply-compiled))
compiled-branch200308180525523
  (assign continue (label after-call200308180525520))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525521
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525520
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525531))
compound-branch200308180525532
  (assign continue (label after-call200308180525530))
  (goto (label compound-apply-compiled))
compiled-branch200308180525533
  (assign continue (label after-call200308180525530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525530
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525541))
compound-branch200308180525542
  (assign continue (label after-call200308180525540))
  (goto (label compound-apply-compiled))
compiled-branch200308180525543
  (assign continue (label after-call200308180525540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525540
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525551))
compound-branch200308180525552
  (assign continue (label after-call200308180525550))
  (goto (label compound-apply-compiled))
compiled-branch200308180525553
  (assign continue (label after-call200308180525550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525550
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525561))
compound-branch200308180525562
  (goto (label compound-apply-compiled))
compiled-branch200308180525563
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525561
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180525564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180525560
after-lambda200308180525510
  (comment (define (compile-self-evaluating exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp))) exp))))
  (perform (op define-variable!) (const compile-self-evaluating) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp)))) exp))))
  (assign val (op make-compiled-procedure) (label entry200308180525291) (reg env))
  (goto (label after-lambda200308180525290))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp)))) exp))))
entry200308180525291
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment text-of-quotation)
  (assign proc (op lookup-variable-value) (const text-of-quotation) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525301))
compound-branch200308180525302
  (assign continue (label after-call200308180525300))
  (goto (label compound-apply-compiled))
compiled-branch200308180525303
  (assign continue (label after-call200308180525300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525300
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525309))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525308))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525306))
compound-branch200308180525307
  (assign continue (label after-call200308180525305))
  (goto (label compound-apply-compiled))
compiled-branch200308180525308
  (assign continue (label after-call200308180525305))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525306
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525309
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525305
  (assign argl (op list) (reg val))
  (restore env)
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525311))
compound-branch200308180525312
  (assign continue (label after-call200308180525310))
  (goto (label compound-apply-compiled))
compiled-branch200308180525313
  (assign continue (label after-call200308180525310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525310
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525321))
compound-branch200308180525322
  (assign continue (label after-call200308180525320))
  (goto (label compound-apply-compiled))
compiled-branch200308180525323
  (assign continue (label after-call200308180525320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525320
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525331))
compound-branch200308180525332
  (assign continue (label after-call200308180525330))
  (goto (label compound-apply-compiled))
compiled-branch200308180525333
  (assign continue (label after-call200308180525330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525341))
compound-branch200308180525342
  (assign continue (label after-call200308180525340))
  (goto (label compound-apply-compiled))
compiled-branch200308180525343
  (assign continue (label after-call200308180525340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525340
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525361))
compound-branch200308180525362
  (goto (label compound-apply-compiled))
compiled-branch200308180525363
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525361
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180525364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180525360
after-lambda200308180525290
  (comment (define (compile-quoted exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp)))) exp))))
  (perform (op define-variable!) (const compile-quoted) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env)))) exp))))
  (assign val (op make-compiled-procedure) (label entry200308180525081) (reg env))
  (goto (label after-lambda200308180525080))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env)))) exp))))
entry200308180525081
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525086))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525085))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525083))
compound-branch200308180525084
  (assign continue (label after-call200308180525082))
  (goto (label compound-apply-compiled))
compiled-branch200308180525085
  (assign continue (label after-call200308180525082))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525083
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525086
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525082
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment (quote (op lookup-variable-value)))
  (assign val  (const (op lookup-variable-value)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525101))
compound-branch200308180525102
  (assign continue (label after-call200308180525100))
  (goto (label compound-apply-compiled))
compiled-branch200308180525103
  (assign continue (label after-call200308180525100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525100
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525109))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525108))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525106))
compound-branch200308180525107
  (assign continue (label after-call200308180525105))
  (goto (label compound-apply-compiled))
compiled-branch200308180525108
  (assign continue (label after-call200308180525105))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525106
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525109
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525105
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525111))
compound-branch200308180525112
  (assign continue (label after-call200308180525110))
  (goto (label compound-apply-compiled))
compiled-branch200308180525113
  (assign continue (label after-call200308180525110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525110
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525121))
compound-branch200308180525122
  (assign continue (label after-call200308180525120))
  (goto (label compound-apply-compiled))
compiled-branch200308180525123
  (assign continue (label after-call200308180525120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180525124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180525120
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180525144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180525143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180525141))
compound-branch200308180525142
  (goto (label compound-apply-compiled))
compiled-branch200308180525143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180525141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180525144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180525140
after-lambda200308180525080
  (comment (define (compile-variable exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env)))) exp))))
  (perform (op define-variable!) (const compile-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
  (assign val (op make-compiled-procedure) (label entry200308180524391) (reg env))
  (goto (label after-lambda200308180524390))
  (comment (lambda (exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
entry200308180524391
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp)))))
  (assign proc (op make-compiled-procedure) (label entry200308180524421) (reg env))
  (goto (label after-lambda200308180524420))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp)))))
entry200308180524421
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var get-value-code)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (const ok)))
  (assign val  (const (const ok)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524426))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524425))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524423))
compound-branch200308180524424
  (assign continue (label after-call200308180524422))
  (goto (label compound-apply-compiled))
compiled-branch200308180524425
  (assign continue (label after-call200308180524422))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524423
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524426
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524422
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524431))
compound-branch200308180524432
  (assign continue (label after-call200308180524430))
  (goto (label compound-apply-compiled))
compiled-branch200308180524433
  (assign continue (label after-call200308180524430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524430
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op set-variable-value!)))
  (assign val  (const (op set-variable-value!)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote perform))
  (assign val  (const perform))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524441))
compound-branch200308180524442
  (assign continue (label after-call200308180524440))
  (goto (label compound-apply-compiled))
compiled-branch200308180524443
  (assign continue (label after-call200308180524440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524440
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524461))
compound-branch200308180524462
  (assign continue (label after-call200308180524460))
  (goto (label compound-apply-compiled))
compiled-branch200308180524463
  (assign continue (label after-call200308180524460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524460
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524469))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524468))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524466))
compound-branch200308180524467
  (assign continue (label after-call200308180524465))
  (goto (label compound-apply-compiled))
compiled-branch200308180524468
  (assign continue (label after-call200308180524465))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524466
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524469
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524465
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env val)))
  (assign val  (const (env val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524471))
compound-branch200308180524472
  (assign continue (label after-call200308180524470))
  (goto (label compound-apply-compiled))
compiled-branch200308180524473
  (assign continue (label after-call200308180524470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524470
  (assign argl (op list) (reg val))
  (restore env)
  (comment get-value-code)
  (assign val (op lookup-variable-value) (const get-value-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524491))
compound-branch200308180524492
  (assign continue (label after-call200308180524490))
  (goto (label compound-apply-compiled))
compiled-branch200308180524493
  (assign continue (label after-call200308180524490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524490
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524511))
compound-branch200308180524512
  (goto (label compound-apply-compiled))
compiled-branch200308180524513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524511
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180524514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180524510
after-lambda200308180524420
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment assignment-value)
  (assign proc (op lookup-variable-value) (const assignment-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524401))
compound-branch200308180524402
  (assign continue (label after-call200308180524400))
  (goto (label compound-apply-compiled))
compiled-branch200308180524403
  (assign continue (label after-call200308180524400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524400
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524409))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524408))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524406))
compound-branch200308180524407
  (assign continue (label after-call200308180524405))
  (goto (label compound-apply-compiled))
compiled-branch200308180524408
  (assign continue (label after-call200308180524405))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524406
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524409
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524405
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment assignment-variable)
  (assign proc (op lookup-variable-value) (const assignment-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524411))
compound-branch200308180524412
  (assign continue (label after-call200308180524410))
  (goto (label compound-apply-compiled))
compiled-branch200308180524413
  (assign continue (label after-call200308180524410))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524411
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524410
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524531))
compound-branch200308180524532
  (goto (label compound-apply-compiled))
compiled-branch200308180524533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180524534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180524530
after-lambda200308180524390
  (comment (define (compile-assignment exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
  (perform (op define-variable!) (const compile-assignment) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
  (assign val (op make-compiled-procedure) (label entry200308180524121) (reg env))
  (goto (label after-lambda200308180524120))
  (comment (lambda (exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
entry200308180524121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp)))))
  (assign proc (op make-compiled-procedure) (label entry200308180524141) (reg env))
  (goto (label after-lambda200308180524140))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp)))))
entry200308180524141
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var get-value-code)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (const ok)))
  (assign val  (const (const ok)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524151))
compound-branch200308180524152
  (assign continue (label after-call200308180524150))
  (goto (label compound-apply-compiled))
compiled-branch200308180524153
  (assign continue (label after-call200308180524150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524150
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524161))
compound-branch200308180524162
  (assign continue (label after-call200308180524160))
  (goto (label compound-apply-compiled))
compiled-branch200308180524163
  (assign continue (label after-call200308180524160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524160
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op define-variable!)))
  (assign val  (const (op define-variable!)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote perform))
  (assign val  (const perform))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524169))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524168))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524166))
compound-branch200308180524167
  (assign continue (label after-call200308180524165))
  (goto (label compound-apply-compiled))
compiled-branch200308180524168
  (assign continue (label after-call200308180524165))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524166
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524169
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524165
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524181))
compound-branch200308180524182
  (assign continue (label after-call200308180524180))
  (goto (label compound-apply-compiled))
compiled-branch200308180524183
  (assign continue (label after-call200308180524180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524180
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524191))
compound-branch200308180524192
  (assign continue (label after-call200308180524190))
  (goto (label compound-apply-compiled))
compiled-branch200308180524193
  (assign continue (label after-call200308180524190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524190
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env val)))
  (assign val  (const (env val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524199))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524198))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524196))
compound-branch200308180524197
  (assign continue (label after-call200308180524195))
  (goto (label compound-apply-compiled))
compiled-branch200308180524198
  (assign continue (label after-call200308180524195))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524196
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524199
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524195
  (assign argl (op list) (reg val))
  (restore env)
  (comment get-value-code)
  (assign val (op lookup-variable-value) (const get-value-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524221))
compound-branch200308180524222
  (assign continue (label after-call200308180524220))
  (goto (label compound-apply-compiled))
compiled-branch200308180524223
  (assign continue (label after-call200308180524220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524220
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524231))
compound-branch200308180524232
  (goto (label compound-apply-compiled))
compiled-branch200308180524233
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524231
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180524234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180524230
after-lambda200308180524140
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment definition-value)
  (assign proc (op lookup-variable-value) (const definition-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524126))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524125))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524123))
compound-branch200308180524124
  (assign continue (label after-call200308180524122))
  (goto (label compound-apply-compiled))
compiled-branch200308180524125
  (assign continue (label after-call200308180524122))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524126
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524122
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524131))
compound-branch200308180524132
  (assign continue (label after-call200308180524130))
  (goto (label compound-apply-compiled))
compiled-branch200308180524133
  (assign continue (label after-call200308180524130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524130
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment definition-variable)
  (assign proc (op lookup-variable-value) (const definition-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524139))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524138))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524136))
compound-branch200308180524137
  (assign continue (label after-call200308180524135))
  (goto (label compound-apply-compiled))
compiled-branch200308180524138
  (assign continue (label after-call200308180524135))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524136
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180524139
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180524135
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524261))
compound-branch200308180524262
  (goto (label compound-apply-compiled))
compiled-branch200308180524263
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524261
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180524264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180524260
after-lambda200308180524120
  (comment (define (compile-definition exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))) exp))))))
  (perform (op define-variable!) (const compile-definition) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (name) (gensym name)))
  (assign val (op make-compiled-procedure) (label entry200308180524001) (reg env))
  (goto (label after-lambda200308180524000))
  (comment (lambda (name) (gensym name)))
entry200308180524001
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (name)) (reg argl) (reg env))
  (comment gensym)
  (assign proc (op lookup-variable-value) (const gensym) (reg env))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180524006))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180524005))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180524003))
compound-branch200308180524004
  (goto (label compound-apply-compiled))
compiled-branch200308180524005
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180524003
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180524006
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180524002
after-lambda200308180524000
  (comment (define (make-label name) (gensym name)))
  (perform (op define-variable!) (const make-label) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
  (assign val (op make-compiled-procedure) (label entry200308180523181) (reg env))
  (goto (label after-lambda200308180523180))
  (comment (lambda (exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
entry200308180523181
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (t-branch f-branch after-if) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))))
  (assign proc (op make-compiled-procedure) (label entry200308180523196) (reg env))
  (goto (label after-lambda200308180523195))
  (comment (lambda (t-branch f-branch after-if) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))))
entry200308180523196
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (t-branch f-branch after-if)) (reg argl) (reg env))
  (comment (lambda (consequent-linkage) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))
  (assign proc (op make-compiled-procedure) (label entry200308180523211) (reg env))
  (goto (label after-lambda200308180523210))
  (comment (lambda (consequent-linkage) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))
entry200308180523211
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (consequent-linkage)) (reg argl) (reg env))
  (comment (lambda (p-code c-code a-code) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))
  (assign proc (op make-compiled-procedure) (label entry200308180523261) (reg env))
  (goto (label after-lambda200308180523260))
  (comment (lambda (p-code c-code a-code) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))
entry200308180523261
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (p-code c-code a-code)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (comment after-if)
  (assign val (op lookup-variable-value) (const after-if) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment a-code)
  (assign val (op lookup-variable-value) (const a-code) (reg env))
  (assign argl (op list) (reg val))
  (comment f-branch)
  (assign val (op lookup-variable-value) (const f-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523271))
compound-branch200308180523272
  (assign continue (label after-call200308180523270))
  (goto (label compound-apply-compiled))
compiled-branch200308180523273
  (assign continue (label after-call200308180523270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523270
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment c-code)
  (assign val (op lookup-variable-value) (const c-code) (reg env))
  (assign argl (op list) (reg val))
  (comment t-branch)
  (assign val (op lookup-variable-value) (const t-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523281))
compound-branch200308180523282
  (assign continue (label after-call200308180523280))
  (goto (label compound-apply-compiled))
compiled-branch200308180523283
  (assign continue (label after-call200308180523280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523280
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523289))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523288))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523286))
compound-branch200308180523287
  (assign continue (label after-call200308180523285))
  (goto (label compound-apply-compiled))
compiled-branch200308180523288
  (assign continue (label after-call200308180523285))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523286
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523289
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523285
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment f-branch)
  (assign val (op lookup-variable-value) (const f-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523291))
compound-branch200308180523292
  (assign continue (label after-call200308180523290))
  (goto (label compound-apply-compiled))
compiled-branch200308180523293
  (assign continue (label after-call200308180523290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523290
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523301))
compound-branch200308180523302
  (assign continue (label after-call200308180523300))
  (goto (label compound-apply-compiled))
compiled-branch200308180523303
  (assign continue (label after-call200308180523300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523300
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment (quote (op false?)))
  (assign val  (const (op false?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523311))
compound-branch200308180523312
  (assign continue (label after-call200308180523310))
  (goto (label compound-apply-compiled))
compiled-branch200308180523313
  (assign continue (label after-call200308180523310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523310
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523321))
compound-branch200308180523322
  (assign continue (label after-call200308180523320))
  (goto (label compound-apply-compiled))
compiled-branch200308180523323
  (assign continue (label after-call200308180523320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523320
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523331))
compound-branch200308180523332
  (assign continue (label after-call200308180523330))
  (goto (label compound-apply-compiled))
compiled-branch200308180523333
  (assign continue (label after-call200308180523330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523351))
compound-branch200308180523352
  (assign continue (label after-call200308180523350))
  (goto (label compound-apply-compiled))
compiled-branch200308180523353
  (assign continue (label after-call200308180523350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523350
  (assign argl (op list) (reg val))
  (restore env)
  (comment p-code)
  (assign val (op lookup-variable-value) (const p-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523371))
compound-branch200308180523372
  (goto (label compound-apply-compiled))
compiled-branch200308180523373
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523371
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523370
after-lambda200308180523260
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-alternative)
  (assign proc (op lookup-variable-value) (const if-alternative) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523216))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523215))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523213))
compound-branch200308180523214
  (assign continue (label after-call200308180523212))
  (goto (label compound-apply-compiled))
compiled-branch200308180523215
  (assign continue (label after-call200308180523212))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523213
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523216
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523212
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523221))
compound-branch200308180523222
  (assign continue (label after-call200308180523220))
  (goto (label compound-apply-compiled))
compiled-branch200308180523223
  (assign continue (label after-call200308180523220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523220
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment consequent-linkage)
  (assign val (op lookup-variable-value) (const consequent-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-consequent)
  (assign proc (op lookup-variable-value) (const if-consequent) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523231))
compound-branch200308180523232
  (assign continue (label after-call200308180523230))
  (goto (label compound-apply-compiled))
compiled-branch200308180523233
  (assign continue (label after-call200308180523230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523230
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523241))
compound-branch200308180523242
  (assign continue (label after-call200308180523240))
  (goto (label compound-apply-compiled))
compiled-branch200308180523243
  (assign continue (label after-call200308180523240))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523241
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523240
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-predicate)
  (assign proc (op lookup-variable-value) (const if-predicate) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523251))
compound-branch200308180523252
  (assign continue (label after-call200308180523250))
  (goto (label compound-apply-compiled))
compiled-branch200308180523253
  (assign continue (label after-call200308180523250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523250
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523259))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523258))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523256))
compound-branch200308180523257
  (assign continue (label after-call200308180523255))
  (goto (label compound-apply-compiled))
compiled-branch200308180523258
  (assign continue (label after-call200308180523255))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523256
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523259
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523255
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523391))
compound-branch200308180523392
  (goto (label compound-apply-compiled))
compiled-branch200308180523393
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523391
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523390
after-lambda200308180523210
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523201))
compound-branch200308180523202
  (assign continue (label after-call200308180523200))
  (goto (label compound-apply-compiled))
compiled-branch200308180523203
  (assign continue (label after-call200308180523200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523200
  (restore env)
  (comment (if (eq? linkage (quote next)) after-if linkage))
  (test (op false?) (reg val))
  (branch (label false-branch200308180523198))
true-branch200308180523199
  (comment after-if)
  (assign val (op lookup-variable-value) (const after-if) (reg env))
  (goto (label after-if200308180523197))
false-branch200308180523198
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if200308180523197
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523431))
compound-branch200308180523432
  (goto (label compound-apply-compiled))
compiled-branch200308180523433
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523431
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523430
after-lambda200308180523195
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-if))
  (assign val  (const after-if))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523186))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523185))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523183))
compound-branch200308180523184
  (assign continue (label after-call200308180523182))
  (goto (label compound-apply-compiled))
compiled-branch200308180523185
  (assign continue (label after-call200308180523182))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523183
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523186
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523182
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote false-branch))
  (assign val  (const false-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805231811))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805231810))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523188))
compound-branch200308180523189
  (assign continue (label after-call200308180523187))
  (goto (label compound-apply-compiled))
compiled-branch2003081805231810
  (assign continue (label after-call200308180523187))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523188
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805231811
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523187
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote true-branch))
  (assign val  (const true-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523191))
compound-branch200308180523192
  (assign continue (label after-call200308180523190))
  (goto (label compound-apply-compiled))
compiled-branch200308180523193
  (assign continue (label after-call200308180523190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523190
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523451))
compound-branch200308180523452
  (goto (label compound-apply-compiled))
compiled-branch200308180523453
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523451
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523450
after-lambda200308180523180
  (comment (define (compile-if exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch))) exp) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
  (perform (op define-variable!) (const compile-if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
  (assign val (op make-compiled-procedure) (label entry200308180522581) (reg env))
  (goto (label after-lambda200308180522580))
  (comment (lambda (seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
entry200308180522581
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523051))
compound-branch200308180523052
  (assign continue (label after-call200308180523050))
  (goto (label compound-apply-compiled))
compiled-branch200308180523053
  (assign continue (label after-call200308180523050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523050
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180522583))
true-branch200308180522584
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523031))
compound-branch200308180523032
  (assign continue (label after-call200308180523030))
  (goto (label compound-apply-compiled))
compiled-branch200308180523033
  (assign continue (label after-call200308180523030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523041))
compound-branch200308180523042
  (goto (label compound-apply-compiled))
compiled-branch200308180523043
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523041
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523040
false-branch200308180522583
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522589))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522588))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522586))
compound-branch200308180522587
  (assign continue (label after-call200308180522585))
  (goto (label compound-apply-compiled))
compiled-branch200308180522588
  (assign continue (label after-call200308180522585))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522586
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522589
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522585
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522591))
compound-branch200308180522592
  (assign continue (label after-call200308180522590))
  (goto (label compound-apply-compiled))
compiled-branch200308180522593
  (assign continue (label after-call200308180522590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522590
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523001))
compound-branch200308180523002
  (assign continue (label after-call200308180523000))
  (goto (label compound-apply-compiled))
compiled-branch200308180523003
  (assign continue (label after-call200308180523000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523009))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523008))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523006))
compound-branch200308180523007
  (assign continue (label after-call200308180523005))
  (goto (label compound-apply-compiled))
compiled-branch200308180523008
  (assign continue (label after-call200308180523005))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523006
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180523009
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180523005
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180523014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180523013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180523011))
compound-branch200308180523012
  (goto (label compound-apply-compiled))
compiled-branch200308180523013
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180523011
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180523014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180523010
after-if200308180522582
after-lambda200308180522580
  (comment (define (compile-sequence seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
  (perform (op define-variable!) (const compile-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label))) seq) (compile-and-sequence (rest-exps seq) target linkage label))))))
  (assign val (op make-compiled-procedure) (label entry200308180522311) (reg env))
  (goto (label after-lambda200308180522310))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label))) seq) (compile-and-sequence (rest-exps seq) target linkage label))))))
entry200308180522311
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage label)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522451))
compound-branch200308180522452
  (assign continue (label after-call200308180522450))
  (goto (label compound-apply-compiled))
compiled-branch200308180522453
  (assign continue (label after-call200308180522450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522450
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label))) seq) (compile-and-sequence (rest-exps seq) target linkage label)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180522313))
true-branch200308180522314
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522421))
compound-branch200308180522422
  (assign continue (label after-call200308180522420))
  (goto (label compound-apply-compiled))
compiled-branch200308180522423
  (assign continue (label after-call200308180522420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522420
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522429))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522428))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522426))
compound-branch200308180522427
  (assign continue (label after-call200308180522425))
  (goto (label compound-apply-compiled))
compiled-branch200308180522428
  (assign continue (label after-call200308180522425))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522426
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522429
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522425
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522431))
compound-branch200308180522432
  (goto (label compound-apply-compiled))
compiled-branch200308180522433
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522431
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180522434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180522430
false-branch200308180522313
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-and-sequence)
  (assign proc (op lookup-variable-value) (const compile-and-sequence) (reg env))
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522316))
compound-branch200308180522317
  (assign continue (label after-call200308180522315))
  (goto (label compound-apply-compiled))
compiled-branch200308180522318
  (assign continue (label after-call200308180522315))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522315
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805223114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805223113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805223111))
compound-branch2003081805223112
  (assign continue (label after-call2003081805223110))
  (goto (label compound-apply-compiled))
compiled-branch2003081805223113
  (assign continue (label after-call2003081805223110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805223111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805223114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805223110
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522331))
compound-branch200308180522332
  (assign continue (label after-call200308180522330))
  (goto (label compound-apply-compiled))
compiled-branch200308180522333
  (assign continue (label after-call200308180522330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522330
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522341))
compound-branch200308180522342
  (assign continue (label after-call200308180522340))
  (goto (label compound-apply-compiled))
compiled-branch200308180522343
  (assign continue (label after-call200308180522340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522340
  (assign argl (op list) (reg val))
  (comment (quote (test (op false?) (reg val))))
  (assign val  (const (test (op false?) (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522349))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522348))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522346))
compound-branch200308180522347
  (assign continue (label after-call200308180522345))
  (goto (label compound-apply-compiled))
compiled-branch200308180522348
  (assign continue (label after-call200308180522345))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522346
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522349
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522345
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522351))
compound-branch200308180522352
  (assign continue (label after-call200308180522350))
  (goto (label compound-apply-compiled))
compiled-branch200308180522353
  (assign continue (label after-call200308180522350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522350
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522361))
compound-branch200308180522362
  (assign continue (label after-call200308180522360))
  (goto (label compound-apply-compiled))
compiled-branch200308180522363
  (assign continue (label after-call200308180522360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522360
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522381))
compound-branch200308180522382
  (assign continue (label after-call200308180522380))
  (goto (label compound-apply-compiled))
compiled-branch200308180522383
  (assign continue (label after-call200308180522380))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522381
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522380
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522391))
compound-branch200308180522392
  (assign continue (label after-call200308180522390))
  (goto (label compound-apply-compiled))
compiled-branch200308180522393
  (assign continue (label after-call200308180522390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522390
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522401))
compound-branch200308180522402
  (goto (label compound-apply-compiled))
compiled-branch200308180522403
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522401
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180522404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180522400
after-if200308180522312
after-lambda200308180522310
  (comment (define (compile-and-sequence seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label))) seq) (compile-and-sequence (rest-exps seq) target linkage label))))))
  (perform (op define-variable!) (const compile-and-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found))))))
  (assign val (op make-compiled-procedure) (label entry200308180522121) (reg env))
  (goto (label after-lambda200308180522120))
  (comment (lambda (seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found))))))
entry200308180522121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (comment (lambda (false-found) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found)))))
  (assign proc (op make-compiled-procedure) (label entry200308180522131) (reg env))
  (goto (label after-lambda200308180522130))
  (comment (lambda (false-found) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found)))))
entry200308180522131
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (false-found)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (save env)
  (comment no-expressions?)
  (assign proc (op lookup-variable-value) (const no-expressions?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522161))
compound-branch200308180522162
  (assign continue (label after-call200308180522160))
  (goto (label compound-apply-compiled))
compiled-branch200308180522163
  (assign continue (label after-call200308180522160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522160
  (restore env)
  (comment (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180522133))
true-branch200308180522134
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign val  (const (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign argl (op list) (reg val))
  (comment (quote (assign exp (const true))))
  (assign val  (const (assign exp (const true))))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522141))
compound-branch200308180522142
  (assign continue (label after-call200308180522140))
  (goto (label compound-apply-compiled))
compiled-branch200308180522143
  (assign continue (label after-call200308180522140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522140
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522149))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522148))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522146))
compound-branch200308180522147
  (assign continue (label after-if200308180522132))
  (goto (label compound-apply-compiled))
compiled-branch200308180522148
  (assign continue (label after-if200308180522132))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522146
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (label after-if200308180522132))
primitive-branch200308180522149
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (label after-if200308180522132))
after-call200308180522145
false-branch200308180522133
  (comment compile-and-sequence)
  (assign proc (op lookup-variable-value) (const compile-and-sequence) (reg env))
  (comment false-found)
  (assign val (op lookup-variable-value) (const false-found) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522139))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522138))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522136))
compound-branch200308180522137
  (assign continue (label after-call200308180522135))
  (goto (label compound-apply-compiled))
compiled-branch200308180522138
  (assign continue (label after-call200308180522135))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522136
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522139
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522135
after-if200308180522132
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522171))
compound-branch200308180522172
  (goto (label compound-apply-compiled))
compiled-branch200308180522173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180522174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180522170
after-lambda200308180522130
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote and-false-found))
  (assign val  (const and-false-found))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522126))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522125))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522123))
compound-branch200308180522124
  (assign continue (label after-call200308180522122))
  (goto (label compound-apply-compiled))
compiled-branch200308180522125
  (assign continue (label after-call200308180522122))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180522126
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180522122
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180522194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180522193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180522191))
compound-branch200308180522192
  (goto (label compound-apply-compiled))
compiled-branch200308180522193
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180522191
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180522194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180522190
after-lambda200308180522120
  (comment (define (compile-and seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-and-sequence seq target linkage false-found))))))
  (perform (op define-variable!) (const compile-and) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))) seq)) (compile-or-sequence (rest-exps seq) target linkage label)))))
  (assign val (op make-compiled-procedure) (label entry200308180521461) (reg env))
  (goto (label after-lambda200308180521460))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))) seq)) (compile-or-sequence (rest-exps seq) target linkage label)))))
entry200308180521461
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage label)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521591))
compound-branch200308180521592
  (assign continue (label after-call200308180521590))
  (goto (label compound-apply-compiled))
compiled-branch200308180521593
  (assign continue (label after-call200308180521590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521590
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))) seq)) (compile-or-sequence (rest-exps seq) target linkage label))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180521463))
true-branch200308180521464
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521571))
compound-branch200308180521572
  (assign continue (label after-call200308180521570))
  (goto (label compound-apply-compiled))
compiled-branch200308180521573
  (assign continue (label after-call200308180521570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521570
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521579))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521578))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521576))
compound-branch200308180521577
  (assign continue (label after-call200308180521575))
  (goto (label compound-apply-compiled))
compiled-branch200308180521578
  (assign continue (label after-call200308180521575))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521576
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521579
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521575
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521581))
compound-branch200308180521582
  (goto (label compound-apply-compiled))
compiled-branch200308180521583
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521581
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521580
false-branch200308180521463
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-or-sequence)
  (assign proc (op lookup-variable-value) (const compile-or-sequence) (reg env))
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521469))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521468))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521466))
compound-branch200308180521467
  (assign continue (label after-call200308180521465))
  (goto (label compound-apply-compiled))
compiled-branch200308180521468
  (assign continue (label after-call200308180521465))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521466
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521469
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521465
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521471))
compound-branch200308180521472
  (assign continue (label after-call200308180521470))
  (goto (label compound-apply-compiled))
compiled-branch200308180521473
  (assign continue (label after-call200308180521470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521470
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521481))
compound-branch200308180521482
  (assign continue (label after-call200308180521480))
  (goto (label compound-apply-compiled))
compiled-branch200308180521483
  (assign continue (label after-call200308180521480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521480
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521491))
compound-branch200308180521492
  (assign continue (label after-call200308180521490))
  (goto (label compound-apply-compiled))
compiled-branch200308180521493
  (assign continue (label after-call200308180521490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521490
  (assign argl (op list) (reg val))
  (comment (quote (test (op true?) (reg val))))
  (assign val  (const (test (op true?) (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521501))
compound-branch200308180521502
  (assign continue (label after-call200308180521500))
  (goto (label compound-apply-compiled))
compiled-branch200308180521503
  (assign continue (label after-call200308180521500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521506))
compound-branch200308180521507
  (assign continue (label after-call200308180521505))
  (goto (label compound-apply-compiled))
compiled-branch200308180521508
  (assign continue (label after-call200308180521505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521505
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521511))
compound-branch200308180521512
  (assign continue (label after-call200308180521510))
  (goto (label compound-apply-compiled))
compiled-branch200308180521513
  (assign continue (label after-call200308180521510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521510
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521531))
compound-branch200308180521532
  (assign continue (label after-call200308180521530))
  (goto (label compound-apply-compiled))
compiled-branch200308180521533
  (assign continue (label after-call200308180521530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521530
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521539))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521538))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521536))
compound-branch200308180521537
  (assign continue (label after-call200308180521535))
  (goto (label compound-apply-compiled))
compiled-branch200308180521538
  (assign continue (label after-call200308180521535))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521536
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521539
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521535
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521541))
compound-branch200308180521542
  (goto (label compound-apply-compiled))
compiled-branch200308180521543
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521541
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521540
after-if200308180521462
after-lambda200308180521460
  (comment (define (compile-or-sequence seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))) seq)) (compile-or-sequence (rest-exps seq) target linkage label)))))
  (perform (op define-variable!) (const compile-or-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found)))))
  (assign val (op make-compiled-procedure) (label entry200308180521311) (reg env))
  (goto (label after-lambda200308180521310))
  (comment (lambda (seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found)))))
entry200308180521311
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (comment (lambda (true-found) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found))))
  (assign proc (op make-compiled-procedure) (label entry200308180521318) (reg env))
  (goto (label after-lambda200308180521317))
  (comment (lambda (true-found) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found))))
entry200308180521318
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (true-found)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment no-expressions?)
  (assign proc (op lookup-variable-value) (const no-expressions?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521351))
compound-branch200308180521352
  (assign continue (label after-call200308180521350))
  (goto (label compound-apply-compiled))
compiled-branch200308180521353
  (assign continue (label after-call200308180521350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521350
  (restore env)
  (restore continue)
  (comment (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found)))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805213110))
true-branch2003081805213111
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign val  (const (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign argl (op list) (reg val))
  (comment (quote (assign exp (const false))))
  (assign val  (const (assign exp (const false))))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521331))
compound-branch200308180521332
  (assign continue (label after-call200308180521330))
  (goto (label compound-apply-compiled))
compiled-branch200308180521333
  (assign continue (label after-call200308180521330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521341))
compound-branch200308180521342
  (goto (label compound-apply-compiled))
compiled-branch200308180521343
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521341
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521340
false-branch2003081805213110
  (comment compile-or-sequence)
  (assign proc (op lookup-variable-value) (const compile-or-sequence) (reg env))
  (comment true-found)
  (assign val (op lookup-variable-value) (const true-found) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521321))
compound-branch200308180521322
  (goto (label compound-apply-compiled))
compiled-branch200308180521323
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521321
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521320
after-if200308180521319
after-lambda200308180521317
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote or-true-found))
  (assign val  (const or-true-found))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521316))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521315))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521313))
compound-branch200308180521314
  (assign continue (label after-call200308180521312))
  (goto (label compound-apply-compiled))
compiled-branch200308180521315
  (assign continue (label after-call200308180521312))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521313
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521316
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521312
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521361))
compound-branch200308180521362
  (goto (label compound-apply-compiled))
compiled-branch200308180521363
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521361
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521360
after-lambda200308180521310
  (comment (define (compile-or seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env)))) seq) (compile-or-sequence seq target linkage true-found)))))
  (perform (op define-variable!) (const compile-or) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda)))))
  (assign val (op make-compiled-procedure) (label entry200308180521061) (reg env))
  (goto (label after-lambda200308180521060))
  (comment (lambda (exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda)))))
entry200308180521061
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (proc-entry after-lambda) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda))))
  (assign proc (op make-compiled-procedure) (label entry200308180521076) (reg env))
  (goto (label after-lambda200308180521075))
  (comment (lambda (proc-entry after-lambda) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda))))
entry200308180521076
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-entry after-lambda)) (reg argl) (reg env))
  (comment (lambda (lambda-linkage) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda)))
  (assign proc (op make-compiled-procedure) (label entry200308180521086) (reg env))
  (goto (label after-lambda200308180521085))
  (comment (lambda (lambda-linkage) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda)))
entry200308180521086
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (lambda-linkage)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment after-lambda)
  (assign val (op lookup-variable-value) (const after-lambda) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment tack-on-instruction-sequence)
  (assign proc (op lookup-variable-value) (const tack-on-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment compile-lambda-body)
  (assign proc (op lookup-variable-value) (const compile-lambda-body) (reg env))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805210811))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805210810))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521088))
compound-branch200308180521089
  (assign continue (label after-call200308180521087))
  (goto (label compound-apply-compiled))
compiled-branch2003081805210810
  (assign continue (label after-call200308180521087))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521088
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805210811
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521087
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521101))
compound-branch200308180521102
  (assign continue (label after-call200308180521100))
  (goto (label compound-apply-compiled))
compiled-branch200308180521103
  (assign continue (label after-call200308180521100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521100
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment (quote (op make-compiled-procedure)))
  (assign val  (const (op make-compiled-procedure)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521111))
compound-branch200308180521112
  (assign continue (label after-call200308180521110))
  (goto (label compound-apply-compiled))
compiled-branch200308180521113
  (assign continue (label after-call200308180521110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521110
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521119))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521118))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521116))
compound-branch200308180521117
  (assign continue (label after-call200308180521115))
  (goto (label compound-apply-compiled))
compiled-branch200308180521118
  (assign continue (label after-call200308180521115))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521116
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521119
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521115
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521121))
compound-branch200308180521122
  (assign continue (label after-call200308180521120))
  (goto (label compound-apply-compiled))
compiled-branch200308180521123
  (assign continue (label after-call200308180521120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521120
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521131))
compound-branch200308180521132
  (assign continue (label after-call200308180521130))
  (goto (label compound-apply-compiled))
compiled-branch200308180521133
  (assign continue (label after-call200308180521130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521130
  (assign argl (op list) (reg val))
  (restore env)
  (comment lambda-linkage)
  (assign val (op lookup-variable-value) (const lambda-linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521151))
compound-branch200308180521152
  (assign continue (label after-call200308180521150))
  (goto (label compound-apply-compiled))
compiled-branch200308180521153
  (assign continue (label after-call200308180521150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521150
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521161))
compound-branch200308180521162
  (assign continue (label after-call200308180521160))
  (goto (label compound-apply-compiled))
compiled-branch200308180521163
  (assign continue (label after-call200308180521160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521160
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521171))
compound-branch200308180521172
  (goto (label compound-apply-compiled))
compiled-branch200308180521173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521170
after-lambda200308180521085
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521081))
compound-branch200308180521082
  (assign continue (label after-call200308180521080))
  (goto (label compound-apply-compiled))
compiled-branch200308180521083
  (assign continue (label after-call200308180521080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521080
  (restore env)
  (comment (if (eq? linkage (quote next)) after-lambda linkage))
  (test (op false?) (reg val))
  (branch (label false-branch200308180521078))
true-branch200308180521079
  (comment after-lambda)
  (assign val (op lookup-variable-value) (const after-lambda) (reg env))
  (goto (label after-if200308180521077))
false-branch200308180521078
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if200308180521077
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521201))
compound-branch200308180521202
  (goto (label compound-apply-compiled))
compiled-branch200308180521203
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521201
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521200
after-lambda200308180521075
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-lambda))
  (assign val  (const after-lambda))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521066))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521065))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521063))
compound-branch200308180521064
  (assign continue (label after-call200308180521062))
  (goto (label compound-apply-compiled))
compiled-branch200308180521065
  (assign continue (label after-call200308180521062))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521063
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521066
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521062
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote entry))
  (assign val  (const entry))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521071))
compound-branch200308180521072
  (assign continue (label after-call200308180521070))
  (goto (label compound-apply-compiled))
compiled-branch200308180521073
  (assign continue (label after-call200308180521070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180521074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180521070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180521214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180521213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180521211))
compound-branch200308180521212
  (goto (label compound-apply-compiled))
compiled-branch200308180521213
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180521211
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180521214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180521210
after-lambda200308180521060
  (comment (define (compile-lambda exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))) exp)) (compile-lambda-body exp proc-entry)) after-lambda)))))
  (perform (op define-variable!) (const compile-lambda) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env)))) exp) (compile-sequence body (quote val) (quote return))))))
  (assign val (op make-compiled-procedure) (label entry200308180520461) (reg env))
  (goto (label after-lambda200308180520460))
  (comment (lambda (exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env)))) exp) (compile-sequence body (quote val) (quote return))))))
entry200308180520461
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp proc-entry)) (reg argl) (reg env))
  (comment (lambda (formals body) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env)))) exp) (compile-sequence body (quote val) (quote return)))))
  (assign proc (op make-compiled-procedure) (label entry200308180520491) (reg env))
  (goto (label after-lambda200308180520490))
  (comment (lambda (formals body) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env)))) exp) (compile-sequence body (quote val) (quote return)))))
entry200308180520491
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (formals body)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520496))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520495))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520493))
compound-branch200308180520494
  (assign continue (label after-call200308180520492))
  (goto (label compound-apply-compiled))
compiled-branch200308180520495
  (assign continue (label after-call200308180520492))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520493
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520496
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520492
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment formals)
  (assign val (op lookup-variable-value) (const formals) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520501))
compound-branch200308180520502
  (assign continue (label after-call200308180520500))
  (goto (label compound-apply-compiled))
compiled-branch200308180520503
  (assign continue (label after-call200308180520500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op extend-environment)))
  (assign val  (const (op extend-environment)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote env))
  (assign val  (const env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520511))
compound-branch200308180520512
  (assign continue (label after-call200308180520510))
  (goto (label compound-apply-compiled))
compiled-branch200308180520513
  (assign continue (label after-call200308180520510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520510
  (assign argl (op list) (reg val))
  (restore env)
  (comment (quote (assign env (op compiled-procedure-env) (reg proc))))
  (assign val  (const (assign env (op compiled-procedure-env) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520521))
compound-branch200308180520522
  (assign continue (label after-call200308180520520))
  (goto (label compound-apply-compiled))
compiled-branch200308180520523
  (assign continue (label after-call200308180520520))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520521
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520520
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env proc argl)))
  (assign val  (const (env proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520531))
compound-branch200308180520532
  (assign continue (label after-call200308180520530))
  (goto (label compound-apply-compiled))
compiled-branch200308180520533
  (assign continue (label after-call200308180520530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520530
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520551))
compound-branch200308180520552
  (goto (label compound-apply-compiled))
compiled-branch200308180520553
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520551
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520550
after-lambda200308180520490
  (save continue)
  (save proc)
  (save env)
  (comment scan-out-defines)
  (assign proc (op lookup-variable-value) (const scan-out-defines) (reg env))
  (save proc)
  (comment lambda-body)
  (assign proc (op lookup-variable-value) (const lambda-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520471))
compound-branch200308180520472
  (assign continue (label after-call200308180520470))
  (goto (label compound-apply-compiled))
compiled-branch200308180520473
  (assign continue (label after-call200308180520470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520470
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520481))
compound-branch200308180520482
  (assign continue (label after-call200308180520480))
  (goto (label compound-apply-compiled))
compiled-branch200308180520483
  (assign continue (label after-call200308180520480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520480
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment lambda-parameters)
  (assign proc (op lookup-variable-value) (const lambda-parameters) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520486))
compound-branch200308180520487
  (assign continue (label after-call200308180520485))
  (goto (label compound-apply-compiled))
compiled-branch200308180520488
  (assign continue (label after-call200308180520485))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520486
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520485
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520561))
compound-branch200308180520562
  (goto (label compound-apply-compiled))
compiled-branch200308180520563
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520561
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520560
after-lambda200308180520460
  (comment (define (compile-lambda-body exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env)))) exp) (compile-sequence body (quote val) (quote return))))))
  (perform (op define-variable!) (const compile-lambda-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
  (assign val (op make-compiled-procedure) (label entry200308180520261) (reg env))
  (goto (label after-lambda200308180520260))
  (comment (lambda (exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
entry200308180520261
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (proc-code operand-codes) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage)))))
  (assign proc (op make-compiled-procedure) (label entry200308180520311) (reg env))
  (goto (label after-lambda200308180520310))
  (comment (lambda (proc-code operand-codes) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage)))))
entry200308180520311
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-code operand-codes)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment compile-procedure-call)
  (assign proc (op lookup-variable-value) (const compile-procedure-call) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520316))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520315))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520313))
compound-branch200308180520314
  (assign continue (label after-call200308180520312))
  (goto (label compound-apply-compiled))
compiled-branch200308180520315
  (assign continue (label after-call200308180520312))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520313
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520316
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520312
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment construct-arglist)
  (assign proc (op lookup-variable-value) (const construct-arglist) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520321))
compound-branch200308180520322
  (assign continue (label after-call200308180520320))
  (goto (label compound-apply-compiled))
compiled-branch200308180520323
  (assign continue (label after-call200308180520320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520320
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520331))
compound-branch200308180520332
  (assign continue (label after-call200308180520330))
  (goto (label compound-apply-compiled))
compiled-branch200308180520333
  (assign continue (label after-call200308180520330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520330
  (assign argl (op list) (reg val))
  (restore env)
  (comment proc-code)
  (assign val (op lookup-variable-value) (const proc-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520336))
compound-branch200308180520337
  (goto (label compound-apply-compiled))
compiled-branch200308180520338
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520336
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520335
after-lambda200308180520310
  (save continue)
  (save proc)
  (save env)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (save proc)
  (save env)
  (comment operands)
  (assign proc (op lookup-variable-value) (const operands) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520271))
compound-branch200308180520272
  (assign continue (label after-call200308180520270))
  (goto (label compound-apply-compiled))
compiled-branch200308180520273
  (assign continue (label after-call200308180520270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520270
  (assign argl (op list) (reg val))
  (restore env)
  (comment (lambda (operand) (compile operand (quote val) (quote next))))
  (assign val (op make-compiled-procedure) (label entry200308180520276) (reg env))
  (goto (label after-lambda200308180520275))
  (comment (lambda (operand) (compile operand (quote val) (quote next))))
entry200308180520276
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand)) (reg argl) (reg env))
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (comment operand)
  (assign val (op lookup-variable-value) (const operand) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520281))
compound-branch200308180520282
  (goto (label compound-apply-compiled))
compiled-branch200308180520283
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520281
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520280
after-lambda200308180520275
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520291))
compound-branch200308180520292
  (assign continue (label after-call200308180520290))
  (goto (label compound-apply-compiled))
compiled-branch200308180520293
  (assign continue (label after-call200308180520290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520290
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote proc))
  (assign val  (const proc))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment operator)
  (assign proc (op lookup-variable-value) (const operator) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520301))
compound-branch200308180520302
  (assign continue (label after-call200308180520300))
  (goto (label compound-apply-compiled))
compiled-branch200308180520303
  (assign continue (label after-call200308180520300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520300
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520309))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520308))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520306))
compound-branch200308180520307
  (assign continue (label after-call200308180520305))
  (goto (label compound-apply-compiled))
compiled-branch200308180520308
  (assign continue (label after-call200308180520305))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520306
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520309
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520305
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520351))
compound-branch200308180520352
  (goto (label compound-apply-compiled))
compiled-branch200308180520353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520350
after-lambda200308180520260
  (comment (define (compile-application exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
  (perform (op define-variable!) (const compile-application) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
  (assign val (op make-compiled-procedure) (label entry200308180520061) (reg env))
  (goto (label after-lambda200308180520060))
  (comment (lambda (operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
entry200308180520061
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (comment (lambda (operand-codes) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))))
  (assign proc (op make-compiled-procedure) (label entry200308180520076) (reg env))
  (goto (label after-lambda200308180520075))
  (comment (lambda (operand-codes) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))))
entry200308180520076
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520161))
compound-branch200308180520162
  (assign continue (label after-call200308180520160))
  (goto (label compound-apply-compiled))
compiled-branch200308180520163
  (assign continue (label after-call200308180520160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520160
  (restore env)
  (restore continue)
  (comment (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180520078))
true-branch200308180520079
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((assign argl (const ())))))
  (assign val  (const ((assign argl (const ())))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520151))
compound-branch200308180520152
  (goto (label compound-apply-compiled))
compiled-branch200308180520153
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520151
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520150
false-branch200308180520078
  (comment (lambda (code-to-get-last-arg) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))
  (assign proc (op make-compiled-procedure) (label entry200308180520101) (reg env))
  (goto (label after-lambda200308180520100))
  (comment (lambda (code-to-get-last-arg) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))
entry200308180520101
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (code-to-get-last-arg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520121))
compound-branch200308180520122
  (assign continue (label after-call200308180520120))
  (goto (label compound-apply-compiled))
compiled-branch200308180520123
  (assign continue (label after-call200308180520120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520120
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520131))
compound-branch200308180520132
  (assign continue (label after-call200308180520130))
  (goto (label compound-apply-compiled))
compiled-branch200308180520133
  (assign continue (label after-call200308180520130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520130
  (restore env)
  (restore continue)
  (comment (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180520103))
true-branch200308180520104
  (comment code-to-get-last-arg)
  (assign val (op lookup-variable-value) (const code-to-get-last-arg) (reg env))
  (goto (reg continue))
false-branch200308180520103
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment code-to-get-rest-args)
  (assign proc (op lookup-variable-value) (const code-to-get-rest-args) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520109))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520108))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520106))
compound-branch200308180520107
  (assign continue (label after-call200308180520105))
  (goto (label compound-apply-compiled))
compiled-branch200308180520108
  (assign continue (label after-call200308180520105))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520106
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520109
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520105
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805201014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805201013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805201011))
compound-branch2003081805201012
  (assign continue (label after-call2003081805201010))
  (goto (label compound-apply-compiled))
compiled-branch2003081805201013
  (assign continue (label after-call2003081805201010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805201011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805201014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805201010
  (assign argl (op list) (reg val))
  (restore env)
  (comment code-to-get-last-arg)
  (assign val (op lookup-variable-value) (const code-to-get-last-arg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520111))
compound-branch200308180520112
  (goto (label compound-apply-compiled))
compiled-branch200308180520113
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520111
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520110
after-if200308180520102
after-lambda200308180520100
  (save continue)
  (save proc)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((assign argl (op list) (reg val)))))
  (assign val  (const ((assign argl (op list) (reg val)))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805200714))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805200713))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805200711))
compound-branch2003081805200712
  (assign continue (label after-call2003081805200710))
  (goto (label compound-apply-compiled))
compiled-branch2003081805200713
  (assign continue (label after-call2003081805200710))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805200711
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805200714
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805200710
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520081))
compound-branch200308180520082
  (assign continue (label after-call200308180520080))
  (goto (label compound-apply-compiled))
compiled-branch200308180520083
  (assign continue (label after-call200308180520080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520080
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520091))
compound-branch200308180520092
  (assign continue (label after-call200308180520090))
  (goto (label compound-apply-compiled))
compiled-branch200308180520093
  (assign continue (label after-call200308180520090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520090
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520141))
compound-branch200308180520142
  (goto (label compound-apply-compiled))
compiled-branch200308180520143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520140
after-if200308180520077
after-lambda200308180520075
  (save continue)
  (save proc)
  (comment reverse)
  (assign proc (op lookup-variable-value) (const reverse) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520071))
compound-branch200308180520072
  (assign continue (label after-call200308180520070))
  (goto (label compound-apply-compiled))
compiled-branch200308180520073
  (assign continue (label after-call200308180520070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180520074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180520070
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180520184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180520183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180520181))
compound-branch200308180520182
  (goto (label compound-apply-compiled))
compiled-branch200308180520183
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180520181
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180520184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180520180
after-lambda200308180520060
  (comment (define (construct-arglist operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ())))) (quote ())) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))) (quote ()))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
  (perform (op define-variable!) (const construct-arglist) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))) (quote ()))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (assign val (op make-compiled-procedure) (label entry200308180519521) (reg env))
  (goto (label after-lambda200308180519520))
  (comment (lambda (operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))) (quote ()))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
entry200308180519521
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (comment (lambda (code-for-next-arg) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes))))))
  (assign proc (op make-compiled-procedure) (label entry200308180519541) (reg env))
  (goto (label after-lambda200308180519540))
  (comment (lambda (code-for-next-arg) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes))))))
entry200308180519541
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (code-for-next-arg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519571))
compound-branch200308180519572
  (assign continue (label after-call200308180519570))
  (goto (label compound-apply-compiled))
compiled-branch200308180519573
  (assign continue (label after-call200308180519570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519570
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519579))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519578))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519576))
compound-branch200308180519577
  (assign continue (label after-call200308180519575))
  (goto (label compound-apply-compiled))
compiled-branch200308180519578
  (assign continue (label after-call200308180519575))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519576
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519579
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519575
  (restore env)
  (restore continue)
  (comment (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180519543))
true-branch200308180519544
  (comment code-for-next-arg)
  (assign val (op lookup-variable-value) (const code-for-next-arg) (reg env))
  (goto (reg continue))
false-branch200308180519543
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment code-to-get-rest-args)
  (assign proc (op lookup-variable-value) (const code-to-get-rest-args) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519551))
compound-branch200308180519552
  (assign continue (label after-call200308180519550))
  (goto (label compound-apply-compiled))
compiled-branch200308180519553
  (assign continue (label after-call200308180519550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519550
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519556))
compound-branch200308180519557
  (assign continue (label after-call200308180519555))
  (goto (label compound-apply-compiled))
compiled-branch200308180519558
  (assign continue (label after-call200308180519555))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519556
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519555
  (assign argl (op list) (reg val))
  (restore env)
  (comment code-for-next-arg)
  (assign val (op lookup-variable-value) (const code-for-next-arg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519561))
compound-branch200308180519562
  (goto (label compound-apply-compiled))
compiled-branch200308180519563
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519561
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519560
after-if200308180519542
after-lambda200308180519540
  (save continue)
  (save proc)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((assign argl (op cons) (reg val) (reg argl)))))
  (assign val  (const ((assign argl (op cons) (reg val) (reg argl)))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val argl)))
  (assign val  (const (val argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519526))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519525))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519523))
compound-branch200308180519524
  (assign continue (label after-call200308180519522))
  (goto (label compound-apply-compiled))
compiled-branch200308180519525
  (assign continue (label after-call200308180519522))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519523
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519526
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519522
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519531))
compound-branch200308180519532
  (assign continue (label after-call200308180519530))
  (goto (label compound-apply-compiled))
compiled-branch200308180519533
  (assign continue (label after-call200308180519530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519530
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519539))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519538))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519536))
compound-branch200308180519537
  (assign continue (label after-call200308180519535))
  (goto (label compound-apply-compiled))
compiled-branch200308180519538
  (assign continue (label after-call200308180519535))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519536
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519539
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519535
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519591))
compound-branch200308180519592
  (goto (label compound-apply-compiled))
compiled-branch200308180519593
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519591
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519590
after-lambda200308180519520
  (comment (define (code-to-get-rest-args operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))) (quote ()))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (perform (op define-variable!) (const code-to-get-rest-args) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
  (assign val (op make-compiled-procedure) (label entry200308180519071) (reg env))
  (goto (label after-lambda200308180519070))
  (comment (lambda (target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
entry200308180519071
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment (lambda (primitive-branch compiled-branch compound-branch continuation-branch after-call) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call))))
  (assign proc (op make-compiled-procedure) (label entry2003081805191011) (reg env))
  (goto (label after-lambda2003081805191010))
  (comment (lambda (primitive-branch compiled-branch compound-branch continuation-branch after-call) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call))))
entry2003081805191011
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (primitive-branch compiled-branch compound-branch continuation-branch after-call)) (reg argl) (reg env))
  (comment (lambda (compiled-linkage) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))
  (assign proc (op make-compiled-procedure) (label entry200308180519121) (reg env))
  (goto (label after-lambda200308180519120))
  (comment (lambda (compiled-linkage) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))
entry200308180519121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (compiled-linkage)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment after-call)
  (assign val (op lookup-variable-value) (const after-call) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-primitive-apply)
  (assign proc (op lookup-variable-value) (const compile-primitive-apply) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519126))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519125))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519123))
compound-branch200308180519124
  (assign continue (label after-call200308180519122))
  (goto (label compound-apply-compiled))
compiled-branch200308180519125
  (assign continue (label after-call200308180519122))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519126
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519122
  (assign argl (op list) (reg val))
  (restore env)
  (comment primitive-branch)
  (assign val (op lookup-variable-value) (const primitive-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519131))
compound-branch200308180519132
  (assign continue (label after-call200308180519130))
  (goto (label compound-apply-compiled))
compiled-branch200308180519133
  (assign continue (label after-call200308180519130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519130
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-continuation-apply)
  (assign proc (op lookup-variable-value) (const compile-continuation-apply) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519141))
compound-branch200308180519142
  (assign continue (label after-call200308180519140))
  (goto (label compound-apply-compiled))
compiled-branch200308180519143
  (assign continue (label after-call200308180519140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519140
  (assign argl (op list) (reg val))
  (restore env)
  (comment continuation-branch)
  (assign val (op lookup-variable-value) (const continuation-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519149))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519148))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519146))
compound-branch200308180519147
  (assign continue (label after-call200308180519145))
  (goto (label compound-apply-compiled))
compiled-branch200308180519148
  (assign continue (label after-call200308180519145))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519146
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519149
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519145
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519151))
compound-branch200308180519152
  (assign continue (label after-call200308180519150))
  (goto (label compound-apply-compiled))
compiled-branch200308180519153
  (assign continue (label after-call200308180519150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519150
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-proc-appl)
  (assign proc (op lookup-variable-value) (const compile-proc-appl) (reg env))
  (comment compiled-linkage)
  (assign val (op lookup-variable-value) (const compiled-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519161))
compound-branch200308180519162
  (assign continue (label after-call200308180519160))
  (goto (label compound-apply-compiled))
compiled-branch200308180519163
  (assign continue (label after-call200308180519160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519160
  (assign argl (op list) (reg val))
  (restore env)
  (comment compiled-branch)
  (assign val (op lookup-variable-value) (const compiled-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519171))
compound-branch200308180519172
  (assign continue (label after-call200308180519170))
  (goto (label compound-apply-compiled))
compiled-branch200308180519173
  (assign continue (label after-call200308180519170))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519171
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519170
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519179))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519178))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519176))
compound-branch200308180519177
  (assign continue (label after-call200308180519175))
  (goto (label compound-apply-compiled))
compiled-branch200308180519178
  (assign continue (label after-call200308180519175))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519176
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519179
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519175
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-compound-proc-appl)
  (assign proc (op lookup-variable-value) (const compile-compound-proc-appl) (reg env))
  (comment compiled-linkage)
  (assign val (op lookup-variable-value) (const compiled-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519191))
compound-branch200308180519192
  (assign continue (label after-call200308180519190))
  (goto (label compound-apply-compiled))
compiled-branch200308180519193
  (assign continue (label after-call200308180519190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519190
  (assign argl (op list) (reg val))
  (restore env)
  (comment compound-branch)
  (assign val (op lookup-variable-value) (const compound-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519199))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519198))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519196))
compound-branch200308180519197
  (assign continue (label after-call200308180519195))
  (goto (label compound-apply-compiled))
compiled-branch200308180519198
  (assign continue (label after-call200308180519195))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519196
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519199
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519195
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519201))
compound-branch200308180519202
  (assign continue (label after-call200308180519200))
  (goto (label compound-apply-compiled))
compiled-branch200308180519203
  (assign continue (label after-call200308180519200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519200
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment continuation-branch)
  (assign val (op lookup-variable-value) (const continuation-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519221))
compound-branch200308180519222
  (assign continue (label after-call200308180519220))
  (goto (label compound-apply-compiled))
compiled-branch200308180519223
  (assign continue (label after-call200308180519220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519220
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519231))
compound-branch200308180519232
  (assign continue (label after-call200308180519230))
  (goto (label compound-apply-compiled))
compiled-branch200308180519233
  (assign continue (label after-call200308180519230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519230
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op continuation?)))
  (assign val  (const (op continuation?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519239))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519238))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519236))
compound-branch200308180519237
  (assign continue (label after-call200308180519235))
  (goto (label compound-apply-compiled))
compiled-branch200308180519238
  (assign continue (label after-call200308180519235))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519236
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519239
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519235
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment compiled-branch)
  (assign val (op lookup-variable-value) (const compiled-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519241))
compound-branch200308180519242
  (assign continue (label after-call200308180519240))
  (goto (label compound-apply-compiled))
compiled-branch200308180519243
  (assign continue (label after-call200308180519240))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519241
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519240
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519251))
compound-branch200308180519252
  (assign continue (label after-call200308180519250))
  (goto (label compound-apply-compiled))
compiled-branch200308180519253
  (assign continue (label after-call200308180519250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519250
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op compiled-procedure?)))
  (assign val  (const (op compiled-procedure?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519261))
compound-branch200308180519262
  (assign continue (label after-call200308180519260))
  (goto (label compound-apply-compiled))
compiled-branch200308180519263
  (assign continue (label after-call200308180519260))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519261
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519260
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment primitive-branch)
  (assign val (op lookup-variable-value) (const primitive-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519269))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519268))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519266))
compound-branch200308180519267
  (assign continue (label after-call200308180519265))
  (goto (label compound-apply-compiled))
compiled-branch200308180519268
  (assign continue (label after-call200308180519265))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519266
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519269
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519265
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519271))
compound-branch200308180519272
  (assign continue (label after-call200308180519270))
  (goto (label compound-apply-compiled))
compiled-branch200308180519273
  (assign continue (label after-call200308180519270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519270
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op primitive-procedure?)))
  (assign val  (const (op primitive-procedure?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519281))
compound-branch200308180519282
  (assign continue (label after-call200308180519280))
  (goto (label compound-apply-compiled))
compiled-branch200308180519283
  (assign continue (label after-call200308180519280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519280
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519289))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519288))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519286))
compound-branch200308180519287
  (assign continue (label after-call200308180519285))
  (goto (label compound-apply-compiled))
compiled-branch200308180519288
  (assign continue (label after-call200308180519285))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519286
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519289
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519285
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519311))
compound-branch200308180519312
  (assign continue (label after-call200308180519310))
  (goto (label compound-apply-compiled))
compiled-branch200308180519313
  (assign continue (label after-call200308180519310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519310
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519331))
compound-branch200308180519332
  (goto (label compound-apply-compiled))
compiled-branch200308180519333
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519331
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519330
after-lambda200308180519120
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519117))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519116))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519114))
compound-branch200308180519115
  (assign continue (label after-call200308180519113))
  (goto (label compound-apply-compiled))
compiled-branch200308180519116
  (assign continue (label after-call200308180519113))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519114
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519117
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519113
  (restore env)
  (comment (if (eq? linkage (quote next)) after-call linkage))
  (test (op false?) (reg val))
  (branch (label false-branch200308180519111))
true-branch200308180519112
  (comment after-call)
  (assign val (op lookup-variable-value) (const after-call) (reg env))
  (goto (label after-if200308180519110))
false-branch200308180519111
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if200308180519110
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519381))
compound-branch200308180519382
  (goto (label compound-apply-compiled))
compiled-branch200308180519383
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519381
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519380
after-lambda2003081805191010
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-call))
  (assign val  (const after-call))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519076))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519075))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519073))
compound-branch200308180519074
  (assign continue (label after-call200308180519072))
  (goto (label compound-apply-compiled))
compiled-branch200308180519075
  (assign continue (label after-call200308180519072))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519073
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519076
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519072
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote continuation-branch))
  (assign val  (const continuation-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519081))
compound-branch200308180519082
  (assign continue (label after-call200308180519080))
  (goto (label compound-apply-compiled))
compiled-branch200308180519083
  (assign continue (label after-call200308180519080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519080
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote compound-branch))
  (assign val  (const compound-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519091))
compound-branch200308180519092
  (assign continue (label after-call200308180519090))
  (goto (label compound-apply-compiled))
compiled-branch200308180519093
  (assign continue (label after-call200308180519090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519090
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote compiled-branch))
  (assign val  (const compiled-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519101))
compound-branch200308180519102
  (assign continue (label after-call200308180519100))
  (goto (label compound-apply-compiled))
compiled-branch200308180519103
  (assign continue (label after-call200308180519100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519100
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote primitive-branch))
  (assign val  (const primitive-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519109))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519108))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519106))
compound-branch200308180519107
  (assign continue (label after-call200308180519105))
  (goto (label compound-apply-compiled))
compiled-branch200308180519108
  (assign continue (label after-call200308180519105))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519106
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519109
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519105
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519411))
compound-branch200308180519412
  (goto (label compound-apply-compiled))
compiled-branch200308180519413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519411
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519410
after-lambda200308180519070
  (comment (define (compile-procedure-call target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch))) (quote ())) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
  (perform (op define-variable!) (const compile-procedure-call) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
  (assign val (op make-compiled-procedure) (label entry200308180518571) (reg env))
  (goto (label after-lambda200308180518570))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
entry200308180518571
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op list) (reg val))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op apply-primitive-procedure)))
  (assign val  (const (op apply-primitive-procedure)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518581))
compound-branch200308180518582
  (assign continue (label after-call200308180518580))
  (goto (label compound-apply-compiled))
compiled-branch200308180518583
  (assign continue (label after-call200308180518580))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518581
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518580
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518591))
compound-branch200308180518592
  (assign continue (label after-call200308180518590))
  (goto (label compound-apply-compiled))
compiled-branch200308180518593
  (assign continue (label after-call200308180518590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518590
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519001))
compound-branch200308180519002
  (assign continue (label after-call200308180519000))
  (goto (label compound-apply-compiled))
compiled-branch200308180519003
  (assign continue (label after-call200308180519000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc argl)))
  (assign val  (const (proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519009))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519008))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519006))
compound-branch200308180519007
  (assign continue (label after-call200308180519005))
  (goto (label compound-apply-compiled))
compiled-branch200308180519008
  (assign continue (label after-call200308180519005))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519006
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180519009
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180519005
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180519014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180519013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180519011))
compound-branch200308180519012
  (goto (label compound-apply-compiled))
compiled-branch200308180519013
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180519011
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180519014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180519010
after-lambda200308180518570
  (comment (define (compile-primitive-apply target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
  (perform (op define-variable!) (const compile-primitive-apply) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
  (assign val (op make-compiled-procedure) (label entry200308180518481) (reg env))
  (goto (label after-lambda200308180518480))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
entry200308180518481
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op list) (reg val))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op apply-continuation)))
  (assign val  (const (op apply-continuation)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518491))
compound-branch200308180518492
  (assign continue (label after-call200308180518490))
  (goto (label compound-apply-compiled))
compiled-branch200308180518493
  (assign continue (label after-call200308180518490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518490
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518501))
compound-branch200308180518502
  (assign continue (label after-call200308180518500))
  (goto (label compound-apply-compiled))
compiled-branch200308180518503
  (assign continue (label after-call200308180518500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518506))
compound-branch200308180518507
  (assign continue (label after-call200308180518505))
  (goto (label compound-apply-compiled))
compiled-branch200308180518508
  (assign continue (label after-call200308180518505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518505
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc argl)))
  (assign val  (const (proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518511))
compound-branch200308180518512
  (assign continue (label after-call200308180518510))
  (goto (label compound-apply-compiled))
compiled-branch200308180518513
  (assign continue (label after-call200308180518510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518510
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518521))
compound-branch200308180518522
  (goto (label compound-apply-compiled))
compiled-branch200308180518523
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518521
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518520
after-lambda200308180518480
  (comment (define (compile-continuation-apply target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl)))) (quote ())))))
  (perform (op define-variable!) (const compile-continuation-apply) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (assign val (op make-compiled-procedure) (label entry200308180518121) (reg env))
  (goto (label after-lambda200308180518120))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
entry200308180518121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518381))
compound-branch200308180518382
  (assign continue (label after-call200308180518380))
  (goto (label compound-apply-compiled))
compiled-branch200308180518383
  (assign continue (label after-call200308180518380))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518381
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518380
  (restore env)
  (comment ((eq? target (quote val)) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180518370))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518375))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518374))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518372))
compound-branch200308180518373
  (assign continue (label after-call200308180518371))
  (goto (label compound-apply-compiled))
compiled-branch200308180518374
  (assign continue (label after-call200308180518371))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518372
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518375
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518371
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805183710))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518379))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518377))
compound-branch200308180518378
  (assign continue (label after-call200308180518376))
  (goto (label compound-apply-compiled))
compiled-branch200308180518379
  (assign continue (label after-call200308180518376))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518377
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805183710
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518376
and-false-found200308180518370
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))) (quote ())) (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180518123))
true-branch200308180518124
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (goto (reg val))))
  (assign val  (const (goto (reg val))))
  (assign argl (op list) (reg val))
  (comment (quote (assign val (op compiled-procedure-entry) (reg proc))))
  (assign val  (const (assign val (op compiled-procedure-entry) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518331))
compound-branch200308180518332
  (assign continue (label after-call200308180518330))
  (goto (label compound-apply-compiled))
compiled-branch200308180518333
  (assign continue (label after-call200308180518330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518330
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518336))
compound-branch200308180518337
  (assign continue (label after-call200308180518335))
  (goto (label compound-apply-compiled))
compiled-branch200308180518338
  (assign continue (label after-call200308180518335))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518336
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518335
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518341))
compound-branch200308180518342
  (assign continue (label after-call200308180518340))
  (goto (label compound-apply-compiled))
compiled-branch200308180518343
  (assign continue (label after-call200308180518340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518340
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518351))
compound-branch200308180518352
  (goto (label compound-apply-compiled))
compiled-branch200308180518353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518350
false-branch200308180518123
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518291))
compound-branch200308180518292
  (assign continue (label after-call200308180518290))
  (goto (label compound-apply-compiled))
compiled-branch200308180518293
  (assign continue (label after-call200308180518290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518290
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518299))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518298))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518296))
compound-branch200308180518297
  (assign continue (label after-call200308180518295))
  (goto (label compound-apply-compiled))
compiled-branch200308180518298
  (assign continue (label after-call200308180518295))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518296
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518299
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518295
  (restore env)
  (comment ((not (eq? target (quote val))) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180518275))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518281))
compound-branch200308180518282
  (assign continue (label after-call200308180518280))
  (goto (label compound-apply-compiled))
compiled-branch200308180518283
  (assign continue (label after-call200308180518280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518280
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518289))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518288))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518286))
compound-branch200308180518287
  (assign continue (label after-call200308180518285))
  (goto (label compound-apply-compiled))
compiled-branch200308180518288
  (assign continue (label after-call200308180518285))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518286
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518289
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518285
and-false-found200308180518275
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180518126))
true-branch200308180518127
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))))
  (assign proc (op make-compiled-procedure) (label entry200308180518191) (reg env))
  (goto (label after-lambda200308180518190))
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))))
entry200308180518191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-return)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518196))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518195))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518193))
compound-branch200308180518194
  (assign continue (label after-call200308180518192))
  (goto (label compound-apply-compiled))
compiled-branch200308180518195
  (assign continue (label after-call200308180518192))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518193
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518196
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518192
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518201))
compound-branch200308180518202
  (assign continue (label after-call200308180518200))
  (goto (label compound-apply-compiled))
compiled-branch200308180518203
  (assign continue (label after-call200308180518200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518200
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518209))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518208))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518206))
compound-branch200308180518207
  (assign continue (label after-call200308180518205))
  (goto (label compound-apply-compiled))
compiled-branch200308180518208
  (assign continue (label after-call200308180518205))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518206
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518209
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518205
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (goto (reg val))))
  (assign val  (const (goto (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (assign val (op compiled-procedure-entry) (reg proc))))
  (assign val  (const (assign val (op compiled-procedure-entry) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518211))
compound-branch200308180518212
  (assign continue (label after-call200308180518210))
  (goto (label compound-apply-compiled))
compiled-branch200308180518213
  (assign continue (label after-call200308180518210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518210
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518221))
compound-branch200308180518222
  (assign continue (label after-call200308180518220))
  (goto (label compound-apply-compiled))
compiled-branch200308180518223
  (assign continue (label after-call200308180518220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518220
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518231))
compound-branch200308180518232
  (assign continue (label after-call200308180518230))
  (goto (label compound-apply-compiled))
compiled-branch200308180518233
  (assign continue (label after-call200308180518230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518230
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518251))
compound-branch200308180518252
  (goto (label compound-apply-compiled))
compiled-branch200308180518253
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518251
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518250
after-lambda200308180518190
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote proc-return))
  (assign val  (const proc-return))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518181))
compound-branch200308180518182
  (assign continue (label after-call200308180518180))
  (goto (label compound-apply-compiled))
compiled-branch200308180518183
  (assign continue (label after-call200308180518180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518180
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518271))
compound-branch200308180518272
  (goto (label compound-apply-compiled))
compiled-branch200308180518273
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518271
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518270
false-branch200308180518126
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518171))
compound-branch200308180518172
  (assign continue (label after-call200308180518170))
  (goto (label compound-apply-compiled))
compiled-branch200308180518173
  (assign continue (label after-call200308180518170))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518171
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518170
  (restore env)
  (comment ((eq? target (quote val)) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180518160))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518165))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518164))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518162))
compound-branch200308180518163
  (assign continue (label after-call200308180518161))
  (goto (label compound-apply-compiled))
compiled-branch200308180518164
  (assign continue (label after-call200308180518161))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518162
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518165
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518161
and-false-found200308180518160
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180518129))
true-branch2003081805181210
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))
  (assign val  (const ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518151))
compound-branch200308180518152
  (goto (label compound-apply-compiled))
compiled-branch200308180518153
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518151
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518150
false-branch200308180518129
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518139))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518138))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518136))
compound-branch200308180518137
  (assign continue (label after-call200308180518135))
  (goto (label compound-apply-compiled))
compiled-branch200308180518138
  (assign continue (label after-call200308180518135))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518136
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518139
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518135
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518141))
compound-branch200308180518142
  (assign continue (label after-call200308180518140))
  (goto (label compound-apply-compiled))
compiled-branch200308180518143
  (assign continue (label after-call200308180518140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518140
  (restore env)
  (comment ((not (eq? target (quote val))) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found2003081805181219))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518131))
compound-branch200308180518132
  (assign continue (label after-call200308180518130))
  (goto (label compound-apply-compiled))
compiled-branch200308180518133
  (assign continue (label after-call200308180518130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518130
and-false-found2003081805181219
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805181212))
true-branch2003081805181213
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (comment "return linkage, target not val -- COMPILE")
  (assign val  (const "return linkage, target not val -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805181218))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805181217))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805181215))
compound-branch2003081805181216
  (goto (label compound-apply-compiled))
compiled-branch2003081805181217
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805181215
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805181218
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003081805181214
false-branch2003081805181212
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if2003081805181211
after-if200308180518128
after-if200308180518125
after-if200308180518122
after-lambda200308180518120
  (comment (define (compile-proc-appl target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (perform (op define-variable!) (const compile-proc-appl) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (assign val (op make-compiled-procedure) (label entry200308180517381) (reg env))
  (goto (label after-lambda200308180517380))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
entry200308180517381
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518031))
compound-branch200308180518032
  (assign continue (label after-call200308180518030))
  (goto (label compound-apply-compiled))
compiled-branch200308180518033
  (assign continue (label after-call200308180518030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518030
  (restore env)
  (comment ((eq? target (quote val)) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180518020))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518025))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518024))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518022))
compound-branch200308180518023
  (assign continue (label after-call200308180518021))
  (goto (label compound-apply-compiled))
compiled-branch200308180518024
  (assign continue (label after-call200308180518021))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518022
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180518025
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518021
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805180210))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518029))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518027))
compound-branch200308180518028
  (assign continue (label after-call200308180518026))
  (goto (label compound-apply-compiled))
compiled-branch200308180518029
  (assign continue (label after-call200308180518026))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518027
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805180210
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180518026
and-false-found200308180518020
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))) (quote ())) (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517383))
true-branch200308180517384
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (goto (label compound-apply-compiled))))
  (assign val  (const (goto (label compound-apply-compiled))))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517581))
compound-branch200308180517582
  (assign continue (label after-call200308180517580))
  (goto (label compound-apply-compiled))
compiled-branch200308180517583
  (assign continue (label after-call200308180517580))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517581
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517580
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517591))
compound-branch200308180517592
  (assign continue (label after-call200308180517590))
  (goto (label compound-apply-compiled))
compiled-branch200308180517593
  (assign continue (label after-call200308180517590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517590
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517599))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517598))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517596))
compound-branch200308180517597
  (assign continue (label after-call200308180517595))
  (goto (label compound-apply-compiled))
compiled-branch200308180517598
  (assign continue (label after-call200308180517595))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517596
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517599
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517595
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180518004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180518003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180518001))
compound-branch200308180518002
  (goto (label compound-apply-compiled))
compiled-branch200308180518003
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180518001
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180518004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180518000
false-branch200308180517383
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517551))
compound-branch200308180517552
  (assign continue (label after-call200308180517550))
  (goto (label compound-apply-compiled))
compiled-branch200308180517553
  (assign continue (label after-call200308180517550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517550
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517556))
compound-branch200308180517557
  (assign continue (label after-call200308180517555))
  (goto (label compound-apply-compiled))
compiled-branch200308180517558
  (assign continue (label after-call200308180517555))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517556
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517555
  (restore env)
  (comment ((not (eq? target (quote val))) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180517535))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805175310))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517539))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517537))
compound-branch200308180517538
  (assign continue (label after-call200308180517536))
  (goto (label compound-apply-compiled))
compiled-branch200308180517539
  (assign continue (label after-call200308180517536))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517537
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805175310
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517536
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517541))
compound-branch200308180517542
  (assign continue (label after-call200308180517540))
  (goto (label compound-apply-compiled))
compiled-branch200308180517543
  (assign continue (label after-call200308180517540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517540
and-false-found200308180517535
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517386))
true-branch200308180517387
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))))
  (assign proc (op make-compiled-procedure) (label entry200308180517456) (reg env))
  (goto (label after-lambda200308180517455))
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ()))))
entry200308180517456
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-return)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805174511))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805174510))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517458))
compound-branch200308180517459
  (assign continue (label after-call200308180517457))
  (goto (label compound-apply-compiled))
compiled-branch2003081805174510
  (assign continue (label after-call200308180517457))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517458
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805174511
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517457
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517461))
compound-branch200308180517462
  (assign continue (label after-call200308180517460))
  (goto (label compound-apply-compiled))
compiled-branch200308180517463
  (assign continue (label after-call200308180517460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517460
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517471))
compound-branch200308180517472
  (assign continue (label after-call200308180517470))
  (goto (label compound-apply-compiled))
compiled-branch200308180517473
  (assign continue (label after-call200308180517470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517470
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (goto (label compound-apply))))
  (assign val  (const (goto (label compound-apply))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517481))
compound-branch200308180517482
  (assign continue (label after-call200308180517480))
  (goto (label compound-apply-compiled))
compiled-branch200308180517483
  (assign continue (label after-call200308180517480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517480
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517486))
compound-branch200308180517487
  (assign continue (label after-call200308180517485))
  (goto (label compound-apply-compiled))
compiled-branch200308180517488
  (assign continue (label after-call200308180517485))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517486
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517485
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517491))
compound-branch200308180517492
  (assign continue (label after-call200308180517490))
  (goto (label compound-apply-compiled))
compiled-branch200308180517493
  (assign continue (label after-call200308180517490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517490
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517511))
compound-branch200308180517512
  (goto (label compound-apply-compiled))
compiled-branch200308180517513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517511
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517510
after-lambda200308180517455
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote proc-return))
  (assign val  (const proc-return))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517451))
compound-branch200308180517452
  (assign continue (label after-call200308180517450))
  (goto (label compound-apply-compiled))
compiled-branch200308180517453
  (assign continue (label after-call200308180517450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517450
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517531))
compound-branch200308180517532
  (goto (label compound-apply-compiled))
compiled-branch200308180517533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517530
false-branch200308180517386
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517431))
compound-branch200308180517432
  (assign continue (label after-call200308180517430))
  (goto (label compound-apply-compiled))
compiled-branch200308180517433
  (assign continue (label after-call200308180517430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517430
  (restore env)
  (comment ((eq? target (quote val)) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180517420))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517425))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517424))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517422))
compound-branch200308180517423
  (assign continue (label after-call200308180517421))
  (goto (label compound-apply-compiled))
compiled-branch200308180517424
  (assign continue (label after-call200308180517421))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517422
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517425
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517421
and-false-found200308180517420
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ())) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517389))
true-branch2003081805173810
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ((goto (label compound-apply-compiled)))))
  (assign val  (const ((goto (label compound-apply-compiled)))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517411))
compound-branch200308180517412
  (goto (label compound-apply-compiled))
compiled-branch200308180517413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517411
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517410
false-branch200308180517389
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517401))
compound-branch200308180517402
  (assign continue (label after-call200308180517400))
  (goto (label compound-apply-compiled))
compiled-branch200308180517403
  (assign continue (label after-call200308180517400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517400
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517409))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517408))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517406))
compound-branch200308180517407
  (assign continue (label after-call200308180517405))
  (goto (label compound-apply-compiled))
compiled-branch200308180517408
  (assign continue (label after-call200308180517405))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517406
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517409
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517405
  (restore env)
  (comment ((not (eq? target (quote val))) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found2003081805173819))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517391))
compound-branch200308180517392
  (assign continue (label after-call200308180517390))
  (goto (label compound-apply-compiled))
compiled-branch200308180517393
  (assign continue (label after-call200308180517390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517390
and-false-found2003081805173819
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805173812))
true-branch2003081805173813
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (comment "return linkage, target not val -- COMPILE")
  (assign val  (const "return linkage, target not val -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805173818))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805173817))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805173815))
compound-branch2003081805173816
  (goto (label compound-apply-compiled))
compiled-branch2003081805173817
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805173815
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805173818
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003081805173814
false-branch2003081805173812
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if2003081805173811
after-if200308180517388
after-if200308180517385
after-if200308180517382
after-lambda200308180517380
  (comment (define (compile-compound-proc-appl target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))) (quote ())))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))) (quote ()))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (perform (op define-variable!) (const compile-compound-proc-appl) (reg val) (reg env))
  (assign val  (const ok))
  (comment (quote (env proc val argl continue)))
  (assign val  (const (env proc val argl continue)))
  (comment (define all-regs (quote (env proc val argl continue))))
  (perform (op define-variable!) (const all-regs) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (quote ()) (car s))))
  (assign val (op make-compiled-procedure) (label entry200308180517311) (reg env))
  (goto (label after-lambda200308180517310))
  (comment (lambda (s) (if (symbol? s) (quote ()) (car s))))
entry200308180517311
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805173114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805173113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805173111))
compound-branch2003081805173112
  (assign continue (label after-call2003081805173110))
  (goto (label compound-apply-compiled))
compiled-branch2003081805173113
  (assign continue (label after-call2003081805173110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805173111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805173114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805173110
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (quote ()) (car s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517313))
true-branch200308180517314
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308180517313
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517316))
compound-branch200308180517317
  (goto (label compound-apply-compiled))
compiled-branch200308180517318
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517316
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517315
after-if200308180517312
after-lambda200308180517310
  (comment (define (registers-needed s) (if (symbol? s) (quote ()) (car s))))
  (perform (op define-variable!) (const registers-needed) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (quote ()) (cadr s))))
  (assign val (op make-compiled-procedure) (label entry200308180517261) (reg env))
  (goto (label after-lambda200308180517260))
  (comment (lambda (s) (if (symbol? s) (quote ()) (cadr s))))
entry200308180517261
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517271))
compound-branch200308180517272
  (assign continue (label after-call200308180517270))
  (goto (label compound-apply-compiled))
compiled-branch200308180517273
  (assign continue (label after-call200308180517270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517270
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (quote ()) (cadr s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517263))
true-branch200308180517264
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308180517263
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517269))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517268))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517266))
compound-branch200308180517267
  (goto (label compound-apply-compiled))
compiled-branch200308180517268
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517266
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517269
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517265
after-if200308180517262
after-lambda200308180517260
  (comment (define (registers-modified s) (if (symbol? s) (quote ()) (cadr s))))
  (perform (op define-variable!) (const registers-modified) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (list s) (caddr s))))
  (assign val (op make-compiled-procedure) (label entry200308180517211) (reg env))
  (goto (label after-lambda200308180517210))
  (comment (lambda (s) (if (symbol? s) (list s) (caddr s))))
entry200308180517211
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517229))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517228))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517226))
compound-branch200308180517227
  (assign continue (label after-call200308180517225))
  (goto (label compound-apply-compiled))
compiled-branch200308180517228
  (assign continue (label after-call200308180517225))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517226
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517229
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517225
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (list s) (caddr s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180517213))
true-branch200308180517214
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517221))
compound-branch200308180517222
  (goto (label compound-apply-compiled))
compiled-branch200308180517223
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517221
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517220
false-branch200308180517213
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517219))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517218))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517216))
compound-branch200308180517217
  (goto (label compound-apply-compiled))
compiled-branch200308180517218
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517216
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517219
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517215
after-if200308180517212
after-lambda200308180517210
  (comment (define (statements s) (if (symbol? s) (list s) (caddr s))))
  (perform (op define-variable!) (const statements) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq reg) (memq reg (registers-needed seq))))
  (assign val (op make-compiled-procedure) (label entry200308180517181) (reg env))
  (goto (label after-lambda200308180517180))
  (comment (lambda (seq reg) (memq reg (registers-needed seq))))
entry200308180517181
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq reg)) (reg argl) (reg env))
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517186))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517185))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517183))
compound-branch200308180517184
  (assign continue (label after-call200308180517182))
  (goto (label compound-apply-compiled))
compiled-branch200308180517185
  (assign continue (label after-call200308180517182))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517183
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517186
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517182
  (assign argl (op list) (reg val))
  (restore env)
  (comment reg)
  (assign val (op lookup-variable-value) (const reg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517191))
compound-branch200308180517192
  (goto (label compound-apply-compiled))
compiled-branch200308180517193
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517191
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517190
after-lambda200308180517180
  (comment (define (needs-register? seq reg) (memq reg (registers-needed seq))))
  (perform (op define-variable!) (const needs-register?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq reg) (memq reg (registers-modified seq))))
  (assign val (op make-compiled-procedure) (label entry200308180517141) (reg env))
  (goto (label after-lambda200308180517140))
  (comment (lambda (seq reg) (memq reg (registers-modified seq))))
entry200308180517141
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq reg)) (reg argl) (reg env))
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517151))
compound-branch200308180517152
  (assign continue (label after-call200308180517150))
  (goto (label compound-apply-compiled))
compiled-branch200308180517153
  (assign continue (label after-call200308180517150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517150
  (assign argl (op list) (reg val))
  (restore env)
  (comment reg)
  (assign val (op lookup-variable-value) (const reg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517159))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517158))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517156))
compound-branch200308180517157
  (goto (label compound-apply-compiled))
compiled-branch200308180517158
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517156
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517159
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517155
after-lambda200308180517140
  (comment (define (modifies-register? seq reg) (memq reg (registers-modified seq))))
  (perform (op define-variable!) (const modifies-register?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda seqs (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
  (assign val (op make-compiled-procedure) (label entry200308180516521) (reg env))
  (goto (label after-lambda200308180516520))
  (comment (lambda seqs (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
entry200308180516521
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const seqs) (reg argl) (reg env))
  (comment (lambda (append-2-sequences append-seq-list) (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ())))) (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))) (append-seq-list seqs)))
  (assign proc (op make-compiled-procedure) (label entry200308180516523) (reg env))
  (goto (label after-lambda200308180516522))
  (comment (lambda (append-2-sequences append-seq-list) (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ())))) (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))) (append-seq-list seqs)))
entry200308180516523
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (append-2-sequences append-seq-list)) (reg argl) (reg env))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))))
  (assign val (op make-compiled-procedure) (label entry200308180516571) (reg env))
  (goto (label after-lambda200308180516570))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))))
entry200308180516571
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq1 seq2)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516581))
compound-branch200308180516582
  (assign continue (label after-call200308180516580))
  (goto (label compound-apply-compiled))
compiled-branch200308180516583
  (assign continue (label after-call200308180516580))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516581
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516580
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516589))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516588))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516586))
compound-branch200308180516587
  (assign continue (label after-call200308180516585))
  (goto (label compound-apply-compiled))
compiled-branch200308180516588
  (assign continue (label after-call200308180516585))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516586
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516589
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516585
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516591))
compound-branch200308180516592
  (assign continue (label after-call200308180516590))
  (goto (label compound-apply-compiled))
compiled-branch200308180516593
  (assign continue (label after-call200308180516590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516590
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516599))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516598))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516596))
compound-branch200308180516597
  (assign continue (label after-call200308180516595))
  (goto (label compound-apply-compiled))
compiled-branch200308180516598
  (assign continue (label after-call200308180516595))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516596
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516599
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516595
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517001))
compound-branch200308180517002
  (assign continue (label after-call200308180517000))
  (goto (label compound-apply-compiled))
compiled-branch200308180517003
  (assign continue (label after-call200308180517000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517009))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517008))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517006))
compound-branch200308180517007
  (assign continue (label after-call200308180517005))
  (goto (label compound-apply-compiled))
compiled-branch200308180517008
  (assign continue (label after-call200308180517005))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517006
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517009
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517005
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517011))
compound-branch200308180517012
  (assign continue (label after-call200308180517010))
  (goto (label compound-apply-compiled))
compiled-branch200308180517013
  (assign continue (label after-call200308180517010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517010
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517019))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517018))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517016))
compound-branch200308180517017
  (assign continue (label after-call200308180517015))
  (goto (label compound-apply-compiled))
compiled-branch200308180517018
  (assign continue (label after-call200308180517015))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517016
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517019
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517015
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517021))
compound-branch200308180517022
  (assign continue (label after-call200308180517020))
  (goto (label compound-apply-compiled))
compiled-branch200308180517023
  (assign continue (label after-call200308180517020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517020
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517031))
compound-branch200308180517032
  (assign continue (label after-call200308180517030))
  (goto (label compound-apply-compiled))
compiled-branch200308180517033
  (assign continue (label after-call200308180517030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517039))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517038))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517036))
compound-branch200308180517037
  (assign continue (label after-call200308180517035))
  (goto (label compound-apply-compiled))
compiled-branch200308180517038
  (assign continue (label after-call200308180517035))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517036
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180517039
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180517035
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517041))
compound-branch200308180517042
  (goto (label compound-apply-compiled))
compiled-branch200308180517043
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517041
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517040
after-lambda200308180516570
  (comment (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ())))))
  (perform (op set-variable-value!) (const append-2-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))))
  (assign val (op make-compiled-procedure) (label entry200308180516531) (reg env))
  (goto (label after-lambda200308180516530))
  (comment (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))))
entry200308180516531
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seqs)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516561))
compound-branch200308180516562
  (assign continue (label after-call200308180516560))
  (goto (label compound-apply-compiled))
compiled-branch200308180516563
  (assign continue (label after-call200308180516560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516560
  (restore env)
  (restore continue)
  (comment (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516533))
true-branch200308180516534
  (comment empty-instruction-sequence)
  (assign proc (op lookup-variable-value) (const empty-instruction-sequence) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516556))
compound-branch200308180516557
  (goto (label compound-apply-compiled))
compiled-branch200308180516558
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516556
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516555
false-branch200308180516533
  (comment append-2-sequences)
  (assign proc (op lookup-variable-value) (const append-2-sequences) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-seq-list)
  (assign proc (op lookup-variable-value) (const append-seq-list) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516539))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516538))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516536))
compound-branch200308180516537
  (assign continue (label after-call200308180516535))
  (goto (label compound-apply-compiled))
compiled-branch200308180516538
  (assign continue (label after-call200308180516535))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516536
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516539
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516535
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805165314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805165313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805165311))
compound-branch2003081805165312
  (assign continue (label after-call2003081805165310))
  (goto (label compound-apply-compiled))
compiled-branch2003081805165313
  (assign continue (label after-call2003081805165310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805165311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805165314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805165310
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516541))
compound-branch200308180516542
  (assign continue (label after-call200308180516540))
  (goto (label compound-apply-compiled))
compiled-branch200308180516543
  (assign continue (label after-call200308180516540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516540
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516551))
compound-branch200308180516552
  (goto (label compound-apply-compiled))
compiled-branch200308180516553
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516551
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516550
after-if200308180516532
after-lambda200308180516530
  (comment (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))))
  (perform (op set-variable-value!) (const append-seq-list) (reg val) (reg env))
  (assign val  (const ok))
  (comment append-seq-list)
  (assign proc (op lookup-variable-value) (const append-seq-list) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516528))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516527))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516525))
compound-branch200308180516526
  (goto (label compound-apply-compiled))
compiled-branch200308180516527
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516525
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516528
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516524
after-lambda200308180516522
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op list) (reg val))
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180517094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180517093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180517091))
compound-branch200308180517092
  (goto (label compound-apply-compiled))
compiled-branch200308180517093
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180517091
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180517094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180517090
after-lambda200308180516520
  (comment (define (append-instruction-sequences . seqs) (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
  (perform (op define-variable!) (const append-instruction-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
  (assign val (op make-compiled-procedure) (label entry200308180516431) (reg env))
  (goto (label after-lambda200308180516430))
  (comment (lambda (s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
entry200308180516431
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s1 s2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516491))
compound-branch200308180516492
  (assign continue (label after-call200308180516490))
  (goto (label compound-apply-compiled))
compiled-branch200308180516493
  (assign continue (label after-call200308180516490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516490
  (restore env)
  (restore continue)
  (comment (if (null? s1) s2 (if (memq (car s1) s2) (list-union (cdr s1) s2) (cons (car s1) (list-union (cdr s1) s2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516433))
true-branch200308180516434
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (goto (reg continue))
false-branch200308180516433
  (save continue)
  (save env)
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516471))
compound-branch200308180516472
  (assign continue (label after-call200308180516470))
  (goto (label compound-apply-compiled))
compiled-branch200308180516473
  (assign continue (label after-call200308180516470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516470
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516479))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516478))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516476))
compound-branch200308180516477
  (assign continue (label after-call200308180516475))
  (goto (label compound-apply-compiled))
compiled-branch200308180516478
  (assign continue (label after-call200308180516475))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516476
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516479
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516475
  (restore env)
  (restore continue)
  (comment (if (memq (car s1) s2) (list-union (cdr s1) s2) (cons (car s1) (list-union (cdr s1) s2))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516436))
true-branch200308180516437
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save continue)
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516461))
compound-branch200308180516462
  (assign continue (label after-call200308180516460))
  (goto (label compound-apply-compiled))
compiled-branch200308180516463
  (assign continue (label after-call200308180516460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516460
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516469))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516468))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516466))
compound-branch200308180516467
  (goto (label compound-apply-compiled))
compiled-branch200308180516468
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516466
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516469
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516465
false-branch200308180516436
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805164312))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805164311))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516439))
compound-branch2003081805164310
  (assign continue (label after-call200308180516438))
  (goto (label compound-apply-compiled))
compiled-branch2003081805164311
  (assign continue (label after-call200308180516438))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516439
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805164312
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516438
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516441))
compound-branch200308180516442
  (assign continue (label after-call200308180516440))
  (goto (label compound-apply-compiled))
compiled-branch200308180516443
  (assign continue (label after-call200308180516440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516440
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516451))
compound-branch200308180516452
  (assign continue (label after-call200308180516450))
  (goto (label compound-apply-compiled))
compiled-branch200308180516453
  (assign continue (label after-call200308180516450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516450
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516459))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516458))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516456))
compound-branch200308180516457
  (goto (label compound-apply-compiled))
compiled-branch200308180516458
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516456
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516459
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516455
after-if200308180516435
after-if200308180516432
after-lambda200308180516430
  (comment (define (list-union s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
  (perform (op define-variable!) (const list-union) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
  (assign val (op make-compiled-procedure) (label entry200308180516351) (reg env))
  (goto (label after-lambda200308180516350))
  (comment (lambda (s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
entry200308180516351
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s1 s2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516401))
compound-branch200308180516402
  (assign continue (label after-call200308180516400))
  (goto (label compound-apply-compiled))
compiled-branch200308180516403
  (assign continue (label after-call200308180516400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516400
  (restore env)
  (restore continue)
  (comment (if (null? s1) (quote ()) (if (memq (car s1) s2) (list-difference (cdr s1) s2) (cons (car s1) (list-difference (cdr s1) s2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516353))
true-branch200308180516354
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308180516353
  (save continue)
  (save env)
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516389))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516388))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516386))
compound-branch200308180516387
  (assign continue (label after-call200308180516385))
  (goto (label compound-apply-compiled))
compiled-branch200308180516388
  (assign continue (label after-call200308180516385))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516386
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516389
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516385
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516391))
compound-branch200308180516392
  (assign continue (label after-call200308180516390))
  (goto (label compound-apply-compiled))
compiled-branch200308180516393
  (assign continue (label after-call200308180516390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516390
  (restore env)
  (restore continue)
  (comment (if (memq (car s1) s2) (list-difference (cdr s1) s2) (cons (car s1) (list-difference (cdr s1) s2))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516356))
true-branch200308180516357
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save continue)
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516371))
compound-branch200308180516372
  (assign continue (label after-call200308180516370))
  (goto (label compound-apply-compiled))
compiled-branch200308180516373
  (assign continue (label after-call200308180516370))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516371
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516370
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516381))
compound-branch200308180516382
  (goto (label compound-apply-compiled))
compiled-branch200308180516383
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516381
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516380
false-branch200308180516356
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805163512))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805163511))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516359))
compound-branch2003081805163510
  (assign continue (label after-call200308180516358))
  (goto (label compound-apply-compiled))
compiled-branch2003081805163511
  (assign continue (label after-call200308180516358))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516359
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805163512
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516358
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805163517))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805163516))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805163514))
compound-branch2003081805163515
  (assign continue (label after-call2003081805163513))
  (goto (label compound-apply-compiled))
compiled-branch2003081805163516
  (assign continue (label after-call2003081805163513))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805163514
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805163517
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805163513
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516361))
compound-branch200308180516362
  (assign continue (label after-call200308180516360))
  (goto (label compound-apply-compiled))
compiled-branch200308180516363
  (assign continue (label after-call200308180516360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516360
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516369))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516368))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516366))
compound-branch200308180516367
  (goto (label compound-apply-compiled))
compiled-branch200308180516368
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516366
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516369
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516365
after-if200308180516355
after-if200308180516352
after-lambda200308180516350
  (comment (define (list-difference s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
  (perform (op define-variable!) (const list-difference) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2))))))
  (assign val (op make-compiled-procedure) (label entry200308180516121) (reg env))
  (goto (label after-lambda200308180516120))
  (comment (lambda (regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2))))))
entry200308180516121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (regs seq1 seq2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516309))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516308))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516306))
compound-branch200308180516307
  (assign continue (label after-call200308180516305))
  (goto (label compound-apply-compiled))
compiled-branch200308180516308
  (assign continue (label after-call200308180516305))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516306
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516309
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516305
  (restore env)
  (restore continue)
  (comment (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180516123))
true-branch200308180516124
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516301))
compound-branch200308180516302
  (goto (label compound-apply-compiled))
compiled-branch200308180516303
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516301
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516300
false-branch200308180516123
  (comment (lambda (first-reg) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2))))
  (assign proc (op make-compiled-procedure) (label entry2003081805161211) (reg env))
  (goto (label after-lambda2003081805161210))
  (comment (lambda (first-reg) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2))))
entry2003081805161211
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (first-reg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment needs-register?)
  (assign proc (op lookup-variable-value) (const needs-register?) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516261))
compound-branch200308180516262
  (assign continue (label after-call200308180516260))
  (goto (label compound-apply-compiled))
compiled-branch200308180516263
  (assign continue (label after-call200308180516260))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516261
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516260
  (restore env)
  (comment ((needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)))
  (test (op false?) (reg val))
  (branch (label and-false-found200308180516250))
  (comment modifies-register?)
  (assign proc (op lookup-variable-value) (const modifies-register?) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516255))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516254))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516252))
compound-branch200308180516253
  (assign continue (label after-call200308180516251))
  (goto (label compound-apply-compiled))
compiled-branch200308180516254
  (assign continue (label after-call200308180516251))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516252
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516255
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516251
and-false-found200308180516250
  (restore env)
  (restore continue)
  (comment (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2)))
  (test (op false?) (reg val))
  (branch (label false-branch2003081805161213))
true-branch2003081805161214
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote restore))
  (assign val  (const restore))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516141))
compound-branch200308180516142
  (assign continue (label after-call200308180516140))
  (goto (label compound-apply-compiled))
compiled-branch200308180516143
  (assign continue (label after-call200308180516140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516140
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516149))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516148))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516146))
compound-branch200308180516147
  (assign continue (label after-call200308180516145))
  (goto (label compound-apply-compiled))
compiled-branch200308180516148
  (assign continue (label after-call200308180516145))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516146
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516149
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516145
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516151))
compound-branch200308180516152
  (assign continue (label after-call200308180516150))
  (goto (label compound-apply-compiled))
compiled-branch200308180516153
  (assign continue (label after-call200308180516150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516150
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote save))
  (assign val  (const save))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516161))
compound-branch200308180516162
  (assign continue (label after-call200308180516160))
  (goto (label compound-apply-compiled))
compiled-branch200308180516163
  (assign continue (label after-call200308180516160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516160
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516169))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516168))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516166))
compound-branch200308180516167
  (assign continue (label after-call200308180516165))
  (goto (label compound-apply-compiled))
compiled-branch200308180516168
  (assign continue (label after-call200308180516165))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516166
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516169
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516165
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805161614))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805161613))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805161611))
compound-branch2003081805161612
  (assign continue (label after-call2003081805161610))
  (goto (label compound-apply-compiled))
compiled-branch2003081805161613
  (assign continue (label after-call2003081805161610))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805161611
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805161614
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805161610
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516181))
compound-branch200308180516182
  (assign continue (label after-call200308180516180))
  (goto (label compound-apply-compiled))
compiled-branch200308180516183
  (assign continue (label after-call200308180516180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516180
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516189))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516188))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516186))
compound-branch200308180516187
  (assign continue (label after-call200308180516185))
  (goto (label compound-apply-compiled))
compiled-branch200308180516188
  (assign continue (label after-call200308180516185))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516186
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516189
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516185
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805161814))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805161813))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805161811))
compound-branch2003081805161812
  (assign continue (label after-call2003081805161810))
  (goto (label compound-apply-compiled))
compiled-branch2003081805161813
  (assign continue (label after-call2003081805161810))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805161811
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805161814
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805161810
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516191))
compound-branch200308180516192
  (assign continue (label after-call200308180516190))
  (goto (label compound-apply-compiled))
compiled-branch200308180516193
  (assign continue (label after-call200308180516190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516190
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516201))
compound-branch200308180516202
  (assign continue (label after-call200308180516200))
  (goto (label compound-apply-compiled))
compiled-branch200308180516203
  (assign continue (label after-call200308180516200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516200
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516209))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516208))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516206))
compound-branch200308180516207
  (assign continue (label after-call200308180516205))
  (goto (label compound-apply-compiled))
compiled-branch200308180516208
  (assign continue (label after-call200308180516205))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516206
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516209
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516205
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516211))
compound-branch200308180516212
  (assign continue (label after-call200308180516210))
  (goto (label compound-apply-compiled))
compiled-branch200308180516213
  (assign continue (label after-call200308180516210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516210
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516231))
compound-branch200308180516232
  (assign continue (label after-call200308180516230))
  (goto (label compound-apply-compiled))
compiled-branch200308180516233
  (assign continue (label after-call200308180516230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516230
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516239))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516238))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516236))
compound-branch200308180516237
  (goto (label compound-apply-compiled))
compiled-branch200308180516238
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516236
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516239
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516235
false-branch2003081805161213
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805161219))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805161218))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805161216))
compound-branch2003081805161217
  (assign continue (label after-call2003081805161215))
  (goto (label compound-apply-compiled))
compiled-branch2003081805161218
  (assign continue (label after-call2003081805161215))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805161216
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805161219
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805161215
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516131))
compound-branch200308180516132
  (goto (label compound-apply-compiled))
compiled-branch200308180516133
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516131
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516130
after-if2003081805161212
after-lambda2003081805161210
  (save continue)
  (save proc)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516129))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516128))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516126))
compound-branch200308180516127
  (assign continue (label after-call200308180516125))
  (goto (label compound-apply-compiled))
compiled-branch200308180516128
  (assign continue (label after-call200308180516125))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516126
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516129
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516125
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516291))
compound-branch200308180516292
  (goto (label compound-apply-compiled))
compiled-branch200308180516293
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516291
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516290
after-if200308180516122
after-lambda200308180516120
  (comment (define (preserving regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg))) (quote ())) seq2) (preserving (cdr regs) seq1 seq2))))))
  (perform (op define-variable!) (const preserving) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)) (quote ()))))
  (assign val (op make-compiled-procedure) (label entry200308180516071) (reg env))
  (goto (label after-lambda200308180516070))
  (comment (lambda (seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)) (quote ()))))
entry200308180516071
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq body-seq)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment body-seq)
  (assign val (op lookup-variable-value) (const body-seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516076))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516075))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516073))
compound-branch200308180516074
  (assign continue (label after-call200308180516072))
  (goto (label compound-apply-compiled))
compiled-branch200308180516075
  (assign continue (label after-call200308180516072))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516073
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516076
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516072
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805160711))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805160710))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516078))
compound-branch200308180516079
  (assign continue (label after-call200308180516077))
  (goto (label compound-apply-compiled))
compiled-branch2003081805160710
  (assign continue (label after-call200308180516077))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516078
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805160711
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516077
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516081))
compound-branch200308180516082
  (assign continue (label after-call200308180516080))
  (goto (label compound-apply-compiled))
compiled-branch200308180516083
  (assign continue (label after-call200308180516080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516080
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516089))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516088))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516086))
compound-branch200308180516087
  (assign continue (label after-call200308180516085))
  (goto (label compound-apply-compiled))
compiled-branch200308180516088
  (assign continue (label after-call200308180516085))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516086
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516089
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516085
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516091))
compound-branch200308180516092
  (assign continue (label after-call200308180516090))
  (goto (label compound-apply-compiled))
compiled-branch200308180516093
  (assign continue (label after-call200308180516090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516090
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516099))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516098))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516096))
compound-branch200308180516097
  (goto (label compound-apply-compiled))
compiled-branch200308180516098
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516096
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516099
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516095
after-lambda200308180516070
  (comment (define (tack-on-instruction-sequence seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)) (quote ()))))
  (perform (op define-variable!) (const tack-on-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))))
  (assign val (op make-compiled-procedure) (label entry200308180515591) (reg env))
  (goto (label after-lambda200308180515590))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))))
entry200308180515591
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq1 seq2)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180515596))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180515595))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180515593))
compound-branch200308180515594
  (assign continue (label after-call200308180515592))
  (goto (label compound-apply-compiled))
compiled-branch200308180515595
  (assign continue (label after-call200308180515592))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180515593
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180515596
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180515592
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805155911))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805155910))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180515598))
compound-branch200308180515599
  (assign continue (label after-call200308180515597))
  (goto (label compound-apply-compiled))
compiled-branch2003081805155910
  (assign continue (label after-call200308180515597))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180515598
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805155911
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180515597
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516001))
compound-branch200308180516002
  (assign continue (label after-call200308180516000))
  (goto (label compound-apply-compiled))
compiled-branch200308180516003
  (assign continue (label after-call200308180516000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516011))
compound-branch200308180516012
  (assign continue (label after-call200308180516010))
  (goto (label compound-apply-compiled))
compiled-branch200308180516013
  (assign continue (label after-call200308180516010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516010
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516019))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516018))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516016))
compound-branch200308180516017
  (assign continue (label after-call200308180516015))
  (goto (label compound-apply-compiled))
compiled-branch200308180516018
  (assign continue (label after-call200308180516015))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516016
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516019
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516015
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516021))
compound-branch200308180516022
  (assign continue (label after-call200308180516020))
  (goto (label compound-apply-compiled))
compiled-branch200308180516023
  (assign continue (label after-call200308180516020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516020
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516029))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516028))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516026))
compound-branch200308180516027
  (assign continue (label after-call200308180516025))
  (goto (label compound-apply-compiled))
compiled-branch200308180516028
  (assign continue (label after-call200308180516025))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516026
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516029
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516025
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516031))
compound-branch200308180516032
  (assign continue (label after-call200308180516030))
  (goto (label compound-apply-compiled))
compiled-branch200308180516033
  (assign continue (label after-call200308180516030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516039))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516038))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516036))
compound-branch200308180516037
  (assign continue (label after-call200308180516035))
  (goto (label compound-apply-compiled))
compiled-branch200308180516038
  (assign continue (label after-call200308180516035))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516036
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180516039
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180516035
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180516044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180516043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180516041))
compound-branch200308180516042
  (goto (label compound-apply-compiled))
compiled-branch200308180516043
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180516041
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180516044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180516040
after-lambda200308180515590
  (comment (define (parallel-instruction-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)) (quote ()))))
  (perform (op define-variable!) (const parallel-instruction-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (quote (COMPILER LOADED)))
  (assign val  (const (COMPILER LOADED)))
))
