
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded

; This is compiled by the compiled compiler
(()()
(
  (comment (lambda (exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
  (assign val (op make-compiled-procedure) (label entry200308180540391) (reg env))
  (goto (label after-lambda200308180540390))
  (comment (lambda (exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
entry200308180540391
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment number?)
  (assign proc (op lookup-variable-value) (const number?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540411))
compound-branch200308180540412
  (assign continue (label after-call200308180540410))
  (goto (label compound-apply-compiled))
compiled-branch200308180540413
  (assign continue (label after-call200308180540410))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540411
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180540414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180540410
  (restore env)
  (restore continue)
  (comment (if (number? exp) true (if (string? exp) true false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180540393))
true-branch200308180540394
  (comment true)
  (assign val (op lookup-variable-value) (const true) (reg env))
  (goto (reg continue))
false-branch200308180540393
  (save continue)
  (save env)
  (comment string?)
  (assign proc (op lookup-variable-value) (const string?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805403912))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805403911))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540399))
compound-branch2003081805403910
  (assign continue (label after-call200308180540398))
  (goto (label compound-apply-compiled))
compiled-branch2003081805403911
  (assign continue (label after-call200308180540398))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540399
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805403912
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180540398
  (restore env)
  (restore continue)
  (comment (if (string? exp) true false))
  (test (op false?) (reg val))
  (branch (label false-branch200308180540396))
true-branch200308180540397
  (comment true)
  (assign val (op lookup-variable-value) (const true) (reg env))
  (goto (reg continue))
false-branch200308180540396
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if200308180540395
after-if200308180540392
after-lambda200308180540390
  (comment (define (self-evaluating? exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
  (perform (op define-variable!) (const self-evaluating?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote quote))))
  (assign val (op make-compiled-procedure) (label entry200308180540331) (reg env))
  (goto (label after-lambda200308180540330))
  (comment (lambda (exp) (tagged-list? exp (quote quote))))
entry200308180540331
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote quote))
  (assign val  (const quote))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540336))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540335))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540333))
compound-branch200308180540334
  (goto (label compound-apply-compiled))
compiled-branch200308180540335
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540333
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540336
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540332
after-lambda200308180540330
  (comment (define (quoted? exp) (tagged-list? exp (quote quote))))
  (perform (op define-variable!) (const quoted?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180540271) (reg env))
  (goto (label after-lambda200308180540270))
  (comment (lambda (exp) (cadr exp)))
entry200308180540271
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540276))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540275))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540273))
compound-branch200308180540274
  (goto (label compound-apply-compiled))
compiled-branch200308180540275
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540273
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540276
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540272
after-lambda200308180540270
  (comment (define (text-of-quotation exp) (cadr exp)))
  (perform (op define-variable!) (const text-of-quotation) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
  (assign val (op make-compiled-procedure) (label entry200308180540191) (reg env))
  (goto (label after-lambda200308180540190))
  (comment (lambda (exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
entry200308180540191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp tag)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540211))
compound-branch200308180540212
  (assign continue (label after-call200308180540210))
  (goto (label compound-apply-compiled))
compiled-branch200308180540213
  (assign continue (label after-call200308180540210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180540214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180540210
  (restore env)
  (restore continue)
  (comment (if (pair? exp) (eq? (car exp) tag) false))
  (test (op false?) (reg val))
  (branch (label false-branch200308180540193))
true-branch200308180540194
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (save continue)
  (save proc)
  (comment tag)
  (assign val (op lookup-variable-value) (const tag) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540201))
compound-branch200308180540202
  (assign continue (label after-call200308180540200))
  (goto (label compound-apply-compiled))
compiled-branch200308180540203
  (assign continue (label after-call200308180540200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180540204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180540200
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540209))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540208))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540206))
compound-branch200308180540207
  (goto (label compound-apply-compiled))
compiled-branch200308180540208
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540206
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540209
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540205
false-branch200308180540193
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if200308180540192
after-lambda200308180540190
  (comment (define (tagged-list? exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
  (perform (op define-variable!) (const tagged-list?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (symbol? exp)))
  (assign val (op make-compiled-procedure) (label entry200308180540131) (reg env))
  (goto (label after-lambda200308180540130))
  (comment (lambda (exp) (symbol? exp)))
entry200308180540131
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540136))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540135))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540133))
compound-branch200308180540134
  (goto (label compound-apply-compiled))
compiled-branch200308180540135
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540133
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540136
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540132
after-lambda200308180540130
  (comment (define (variable? exp) (symbol? exp)))
  (perform (op define-variable!) (const variable?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote set!))))
  (assign val (op make-compiled-procedure) (label entry200308180540071) (reg env))
  (goto (label after-lambda200308180540070))
  (comment (lambda (exp) (tagged-list? exp (quote set!))))
entry200308180540071
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote set!))
  (assign val  (const set!))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540081))
compound-branch200308180540082
  (goto (label compound-apply-compiled))
compiled-branch200308180540083
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540081
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540080
after-lambda200308180540070
  (comment (define (assignment? exp) (tagged-list? exp (quote set!))))
  (perform (op define-variable!) (const assignment?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180540011) (reg env))
  (goto (label after-lambda200308180540010))
  (comment (lambda (exp) (cadr exp)))
entry200308180540011
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180540016))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180540015))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180540013))
compound-branch200308180540014
  (goto (label compound-apply-compiled))
compiled-branch200308180540015
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180540013
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180540016
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180540012
after-lambda200308180540010
  (comment (define (assignment-variable exp) (cadr exp)))
  (perform (op define-variable!) (const assignment-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (caddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180539551) (reg env))
  (goto (label after-lambda200308180539550))
  (comment (lambda (exp) (caddr exp)))
entry200308180539551
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539556))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539555))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539553))
compound-branch200308180539554
  (goto (label compound-apply-compiled))
compiled-branch200308180539555
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539553
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539556
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539552
after-lambda200308180539550
  (comment (define (assignment-value exp) (caddr exp)))
  (perform (op define-variable!) (const assignment-value) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote define))))
  (assign val (op make-compiled-procedure) (label entry200308180539501) (reg env))
  (goto (label after-lambda200308180539500))
  (comment (lambda (exp) (tagged-list? exp (quote define))))
entry200308180539501
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote define))
  (assign val  (const define))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539506))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539505))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539503))
compound-branch200308180539504
  (goto (label compound-apply-compiled))
compiled-branch200308180539505
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539503
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539506
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539502
after-lambda200308180539500
  (comment (define (definition? exp) (tagged-list? exp (quote define))))
  (perform (op define-variable!) (const definition?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
  (assign val (op make-compiled-procedure) (label entry200308180539421) (reg env))
  (goto (label after-lambda200308180539420))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
entry200308180539421
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539439))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539438))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539436))
compound-branch200308180539437
  (assign continue (label after-call200308180539435))
  (goto (label compound-apply-compiled))
compiled-branch200308180539438
  (assign continue (label after-call200308180539435))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539436
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539439
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539435
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539441))
compound-branch200308180539442
  (assign continue (label after-call200308180539440))
  (goto (label compound-apply-compiled))
compiled-branch200308180539443
  (assign continue (label after-call200308180539440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539440
  (restore env)
  (restore continue)
  (comment (if (symbol? (cadr exp)) (cadr exp) (caadr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180539423))
true-branch200308180539424
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539431))
compound-branch200308180539432
  (goto (label compound-apply-compiled))
compiled-branch200308180539433
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539431
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539430
false-branch200308180539423
  (comment caadr)
  (assign proc (op lookup-variable-value) (const caadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539429))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539428))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539426))
compound-branch200308180539427
  (goto (label compound-apply-compiled))
compiled-branch200308180539428
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539426
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539429
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539425
after-if200308180539422
after-lambda200308180539420
  (comment (define (definition-variable exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
  (perform (op define-variable!) (const definition-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180539331) (reg env))
  (goto (label after-lambda200308180539330))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
entry200308180539331
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539361))
compound-branch200308180539362
  (assign continue (label after-call200308180539360))
  (goto (label compound-apply-compiled))
compiled-branch200308180539363
  (assign continue (label after-call200308180539360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539360
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539369))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539368))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539366))
compound-branch200308180539367
  (assign continue (label after-call200308180539365))
  (goto (label compound-apply-compiled))
compiled-branch200308180539368
  (assign continue (label after-call200308180539365))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539366
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539369
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539365
  (restore env)
  (restore continue)
  (comment (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180539333))
true-branch200308180539334
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539351))
compound-branch200308180539352
  (goto (label compound-apply-compiled))
compiled-branch200308180539353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539350
false-branch200308180539333
  (comment make-lambda)
  (assign proc (op lookup-variable-value) (const make-lambda) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539336))
compound-branch200308180539337
  (assign continue (label after-call200308180539335))
  (goto (label compound-apply-compiled))
compiled-branch200308180539338
  (assign continue (label after-call200308180539335))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539336
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539335
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment cdadr)
  (assign proc (op lookup-variable-value) (const cdadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539341))
compound-branch200308180539342
  (assign continue (label after-call200308180539340))
  (goto (label compound-apply-compiled))
compiled-branch200308180539343
  (assign continue (label after-call200308180539340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539340
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539349))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539348))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539346))
compound-branch200308180539347
  (goto (label compound-apply-compiled))
compiled-branch200308180539348
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539346
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539349
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539345
after-if200308180539332
after-lambda200308180539330
  (comment (define (definition-value exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
  (perform (op define-variable!) (const definition-value) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote lambda))))
  (assign val (op make-compiled-procedure) (label entry200308180539271) (reg env))
  (goto (label after-lambda200308180539270))
  (comment (lambda (exp) (tagged-list? exp (quote lambda))))
entry200308180539271
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539276))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539275))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539273))
compound-branch200308180539274
  (goto (label compound-apply-compiled))
compiled-branch200308180539275
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539273
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539276
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539272
after-lambda200308180539270
  (comment (define (lambda? exp) (tagged-list? exp (quote lambda))))
  (perform (op define-variable!) (const lambda?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180539221) (reg env))
  (goto (label after-lambda200308180539220))
  (comment (lambda (exp) (cadr exp)))
entry200308180539221
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539226))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539225))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539223))
compound-branch200308180539224
  (goto (label compound-apply-compiled))
compiled-branch200308180539225
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539223
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539226
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539222
after-lambda200308180539220
  (comment (define (lambda-parameters exp) (cadr exp)))
  (perform (op define-variable!) (const lambda-parameters) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180539161) (reg env))
  (goto (label after-lambda200308180539160))
  (comment (lambda (exp) (cddr exp)))
entry200308180539161
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539166))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539165))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539163))
compound-branch200308180539164
  (goto (label compound-apply-compiled))
compiled-branch200308180539165
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539163
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539166
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539162
after-lambda200308180539160
  (comment (define (lambda-body exp) (cddr exp)))
  (perform (op define-variable!) (const lambda-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
  (assign val (op make-compiled-procedure) (label entry200308180539101) (reg env))
  (goto (label after-lambda200308180539100))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
entry200308180539101
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (parameters body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment parameters)
  (assign val (op lookup-variable-value) (const parameters) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539106))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539105))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539103))
compound-branch200308180539104
  (assign continue (label after-call200308180539102))
  (goto (label compound-apply-compiled))
compiled-branch200308180539105
  (assign continue (label after-call200308180539102))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539103
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180539106
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180539102
  (assign argl (op list) (reg val))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539121))
compound-branch200308180539122
  (goto (label compound-apply-compiled))
compiled-branch200308180539123
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539121
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539120
after-lambda200308180539100
  (comment (define (make-lambda parameters body) (cons (quote lambda) (cons parameters body))))
  (perform (op define-variable!) (const make-lambda) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote if))))
  (assign val (op make-compiled-procedure) (label entry200308180539051) (reg env))
  (goto (label after-lambda200308180539050))
  (comment (lambda (exp) (tagged-list? exp (quote if))))
entry200308180539051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote if))
  (assign val  (const if))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539056))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539055))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539053))
compound-branch200308180539054
  (goto (label compound-apply-compiled))
compiled-branch200308180539055
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539056
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539052
after-lambda200308180539050
  (comment (define (if? exp) (tagged-list? exp (quote if))))
  (perform (op define-variable!) (const if?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180539001) (reg env))
  (goto (label after-lambda200308180539000))
  (comment (lambda (exp) (cadr exp)))
entry200308180539001
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180539006))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180539005))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180539003))
compound-branch200308180539004
  (goto (label compound-apply-compiled))
compiled-branch200308180539005
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180539003
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180539006
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180539002
after-lambda200308180539000
  (comment (define (if-predicate exp) (cadr exp)))
  (perform (op define-variable!) (const if-predicate) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (caddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180538551) (reg env))
  (goto (label after-lambda200308180538550))
  (comment (lambda (exp) (caddr exp)))
entry200308180538551
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538556))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538555))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538553))
compound-branch200308180538554
  (goto (label compound-apply-compiled))
compiled-branch200308180538555
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538553
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538556
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538552
after-lambda200308180538550
  (comment (define (if-consequent exp) (caddr exp)))
  (perform (op define-variable!) (const if-consequent) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
  (assign val (op make-compiled-procedure) (label entry200308180538491) (reg env))
  (goto (label after-lambda200308180538490))
  (comment (lambda (exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
entry200308180538491
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdddr)
  (assign proc (op lookup-variable-value) (const cdddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805384914))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805384913))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805384911))
compound-branch2003081805384912
  (assign continue (label after-call2003081805384910))
  (goto (label compound-apply-compiled))
compiled-branch2003081805384913
  (assign continue (label after-call2003081805384910))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805384911
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805384914
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805384910
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538501))
compound-branch200308180538502
  (assign continue (label after-call200308180538500))
  (goto (label compound-apply-compiled))
compiled-branch200308180538503
  (assign continue (label after-call200308180538500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180538504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180538500
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538506))
compound-branch200308180538507
  (assign continue (label after-call200308180538505))
  (goto (label compound-apply-compiled))
compiled-branch200308180538508
  (assign continue (label after-call200308180538505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180538509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180538505
  (restore env)
  (restore continue)
  (comment (if (not (null? (cdddr exp))) (cadddr exp) (quote false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180538493))
true-branch200308180538494
  (comment cadddr)
  (assign proc (op lookup-variable-value) (const cadddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538499))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538498))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538496))
compound-branch200308180538497
  (goto (label compound-apply-compiled))
compiled-branch200308180538498
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538496
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538499
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538495
false-branch200308180538493
  (comment (quote false))
  (assign val  (const false))
  (goto (reg continue))
after-if200308180538492
after-lambda200308180538490
  (comment (define (if-alternative exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
  (perform (op define-variable!) (const if-alternative) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote begin))))
  (assign val (op make-compiled-procedure) (label entry200308180538441) (reg env))
  (goto (label after-lambda200308180538440))
  (comment (lambda (exp) (tagged-list? exp (quote begin))))
entry200308180538441
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote begin))
  (assign val  (const begin))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538446))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538445))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538443))
compound-branch200308180538444
  (goto (label compound-apply-compiled))
compiled-branch200308180538445
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538443
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538446
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538442
after-lambda200308180538440
  (comment (define (begin? exp) (tagged-list? exp (quote begin))))
  (perform (op define-variable!) (const begin?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180538391) (reg env))
  (goto (label after-lambda200308180538390))
  (comment (lambda (exp) (cdr exp)))
entry200308180538391
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538396))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538395))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538393))
compound-branch200308180538394
  (goto (label compound-apply-compiled))
compiled-branch200308180538395
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538393
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538396
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538392
after-lambda200308180538390
  (comment (define (begin-actions exp) (cdr exp)))
  (perform (op define-variable!) (const begin-actions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (null? (cdr seq))))
  (assign val (op make-compiled-procedure) (label entry200308180538331) (reg env))
  (goto (label after-lambda200308180538330))
  (comment (lambda (seq) (null? (cdr seq))))
entry200308180538331
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save continue)
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538341))
compound-branch200308180538342
  (assign continue (label after-call200308180538340))
  (goto (label compound-apply-compiled))
compiled-branch200308180538343
  (assign continue (label after-call200308180538340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180538344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180538340
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538349))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538348))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538346))
compound-branch200308180538347
  (goto (label compound-apply-compiled))
compiled-branch200308180538348
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538346
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538349
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538345
after-lambda200308180538330
  (comment (define (last-exp? seq) (null? (cdr seq))))
  (perform (op define-variable!) (const last-exp?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (car seq)))
  (assign val (op make-compiled-procedure) (label entry200308180538291) (reg env))
  (goto (label after-lambda200308180538290))
  (comment (lambda (seq) (car seq)))
entry200308180538291
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538296))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538295))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538293))
compound-branch200308180538294
  (goto (label compound-apply-compiled))
compiled-branch200308180538295
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538293
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538296
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538292
after-lambda200308180538290
  (comment (define (first-exp seq) (car seq)))
  (perform (op define-variable!) (const first-exp) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cdr seq)))
  (assign val (op make-compiled-procedure) (label entry200308180538251) (reg env))
  (goto (label after-lambda200308180538250))
  (comment (lambda (seq) (cdr seq)))
entry200308180538251
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538256))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538255))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538253))
compound-branch200308180538254
  (goto (label compound-apply-compiled))
compiled-branch200308180538255
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538253
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538256
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538252
after-lambda200308180538250
  (comment (define (rest-exps seq) (cdr seq)))
  (perform (op define-variable!) (const rest-exps) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (pair? exp)))
  (assign val (op make-compiled-procedure) (label entry200308180538211) (reg env))
  (goto (label after-lambda200308180538210))
  (comment (lambda (exp) (pair? exp)))
entry200308180538211
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538216))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538215))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538213))
compound-branch200308180538214
  (goto (label compound-apply-compiled))
compiled-branch200308180538215
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538213
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538216
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538212
after-lambda200308180538210
  (comment (define (application? exp) (pair? exp)))
  (perform (op define-variable!) (const application?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (car exp)))
  (assign val (op make-compiled-procedure) (label entry200308180538171) (reg env))
  (goto (label after-lambda200308180538170))
  (comment (lambda (exp) (car exp)))
entry200308180538171
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538176))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538175))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538173))
compound-branch200308180538174
  (goto (label compound-apply-compiled))
compiled-branch200308180538175
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538173
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538176
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538172
after-lambda200308180538170
  (comment (define (operator exp) (car exp)))
  (perform (op define-variable!) (const operator) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180538121) (reg env))
  (goto (label after-lambda200308180538120))
  (comment (lambda (exp) (cdr exp)))
entry200308180538121
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538126))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538125))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538123))
compound-branch200308180538124
  (goto (label compound-apply-compiled))
compiled-branch200308180538125
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538123
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538126
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538122
after-lambda200308180538120
  (comment (define (operands exp) (cdr exp)))
  (perform (op define-variable!) (const operands) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (null? ops)))
  (assign val (op make-compiled-procedure) (label entry200308180538091) (reg env))
  (goto (label after-lambda200308180538090))
  (comment (lambda (ops) (null? ops)))
entry200308180538091
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538096))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538095))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538093))
compound-branch200308180538094
  (goto (label compound-apply-compiled))
compiled-branch200308180538095
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538093
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538096
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538092
after-lambda200308180538090
  (comment (define (no-operands? ops) (null? ops)))
  (perform (op define-variable!) (const no-operands?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (car ops)))
  (assign val (op make-compiled-procedure) (label entry200308180538041) (reg env))
  (goto (label after-lambda200308180538040))
  (comment (lambda (ops) (car ops)))
entry200308180538041
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538046))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538045))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538043))
compound-branch200308180538044
  (goto (label compound-apply-compiled))
compiled-branch200308180538045
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538043
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538046
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538042
after-lambda200308180538040
  (comment (define (first-operand ops) (car ops)))
  (perform (op define-variable!) (const first-operand) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (cdr ops)))
  (assign val (op make-compiled-procedure) (label entry200308180538001) (reg env))
  (goto (label after-lambda200308180538000))
  (comment (lambda (ops) (cdr ops)))
entry200308180538001
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180538006))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180538005))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180538003))
compound-branch200308180538004
  (goto (label compound-apply-compiled))
compiled-branch200308180538005
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180538003
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180538006
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180538002
after-lambda200308180538000
  (comment (define (rest-operands ops) (cdr ops)))
  (perform (op define-variable!) (const rest-operands) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (predicate consequent alternative) (list (quote if) predicate consequent alternative)))
  (assign val (op make-compiled-procedure) (label entry200308180537561) (reg env))
  (goto (label after-lambda200308180537560))
  (comment (lambda (predicate consequent alternative) (list (quote if) predicate consequent alternative)))
entry200308180537561
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (predicate consequent alternative)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment alternative)
  (assign val (op lookup-variable-value) (const alternative) (reg env))
  (assign argl (op list) (reg val))
  (comment consequent)
  (assign val (op lookup-variable-value) (const consequent) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment predicate)
  (assign val (op lookup-variable-value) (const predicate) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote if))
  (assign val  (const if))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537566))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537565))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537563))
compound-branch200308180537564
  (goto (label compound-apply-compiled))
compiled-branch200308180537565
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537563
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537566
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537562
after-lambda200308180537560
  (comment (define (make-if predicate consequent alternative) (list (quote if) predicate consequent alternative)))
  (perform (op define-variable!) (const make-if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
  (assign val (op make-compiled-procedure) (label entry200308180537481) (reg env))
  (goto (label after-lambda200308180537480))
  (comment (lambda (seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
entry200308180537481
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537516))
compound-branch200308180537517
  (assign continue (label after-call200308180537515))
  (goto (label compound-apply-compiled))
compiled-branch200308180537518
  (assign continue (label after-call200308180537515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537515
  (restore env)
  (restore continue)
  (comment (if (null? seq) seq (if (last-exp? seq) (first-exp seq) (make-begin seq))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180537483))
true-branch200308180537484
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (goto (reg continue))
false-branch200308180537483
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537511))
compound-branch200308180537512
  (assign continue (label after-call200308180537510))
  (goto (label compound-apply-compiled))
compiled-branch200308180537513
  (assign continue (label after-call200308180537510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537510
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (first-exp seq) (make-begin seq)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180537486))
true-branch200308180537487
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537499))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537498))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537496))
compound-branch200308180537497
  (goto (label compound-apply-compiled))
compiled-branch200308180537498
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537496
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537499
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537495
false-branch200308180537486
  (comment make-begin)
  (assign proc (op lookup-variable-value) (const make-begin) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537491))
compound-branch200308180537492
  (goto (label compound-apply-compiled))
compiled-branch200308180537493
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537491
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537490
after-if200308180537485
after-if200308180537482
after-lambda200308180537480
  (comment (define (sequence->exp seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
  (perform (op define-variable!) (const sequence->exp) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cons (quote begin) seq)))
  (assign val (op make-compiled-procedure) (label entry200308180537451) (reg env))
  (goto (label after-lambda200308180537450))
  (comment (lambda (seq) (cons (quote begin) seq)))
entry200308180537451
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote begin))
  (assign val  (const begin))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537456))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537455))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537453))
compound-branch200308180537454
  (goto (label compound-apply-compiled))
compiled-branch200308180537455
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537453
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537456
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537452
after-lambda200308180537450
  (comment (define (make-begin seq) (cons (quote begin) seq)))
  (perform (op define-variable!) (const make-begin) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote cond))))
  (assign val (op make-compiled-procedure) (label entry200308180537411) (reg env))
  (goto (label after-lambda200308180537410))
  (comment (lambda (exp) (tagged-list? exp (quote cond))))
entry200308180537411
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote cond))
  (assign val  (const cond))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537416))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537415))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537413))
compound-branch200308180537414
  (goto (label compound-apply-compiled))
compiled-branch200308180537415
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537413
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537416
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537412
after-lambda200308180537410
  (comment (define (cond? exp) (tagged-list? exp (quote cond))))
  (perform (op define-variable!) (const cond?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308180537371) (reg env))
  (goto (label after-lambda200308180537370))
  (comment (lambda (exp) (cdr exp)))
entry200308180537371
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537376))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537375))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537373))
compound-branch200308180537374
  (goto (label compound-apply-compiled))
compiled-branch200308180537375
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537373
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537376
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537372
after-lambda200308180537370
  (comment (define (cond-clauses exp) (cdr exp)))
  (perform (op define-variable!) (const cond-clauses) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (eq? (cond-predicate clause) (quote else))))
  (assign val (op make-compiled-procedure) (label entry200308180537321) (reg env))
  (goto (label after-lambda200308180537320))
  (comment (lambda (clause) (eq? (cond-predicate clause) (quote else))))
entry200308180537321
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (save continue)
  (save proc)
  (comment (quote else))
  (assign val  (const else))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cond-predicate)
  (assign proc (op lookup-variable-value) (const cond-predicate) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537331))
compound-branch200308180537332
  (assign continue (label after-call200308180537330))
  (goto (label compound-apply-compiled))
compiled-branch200308180537333
  (assign continue (label after-call200308180537330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537336))
compound-branch200308180537337
  (goto (label compound-apply-compiled))
compiled-branch200308180537338
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537336
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537335
after-lambda200308180537320
  (comment (define (cond-else-clause? clause) (eq? (cond-predicate clause) (quote else))))
  (perform (op define-variable!) (const cond-else-clause?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (car clause)))
  (assign val (op make-compiled-procedure) (label entry200308180537291) (reg env))
  (goto (label after-lambda200308180537290))
  (comment (lambda (clause) (car clause)))
entry200308180537291
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537296))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537295))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537293))
compound-branch200308180537294
  (goto (label compound-apply-compiled))
compiled-branch200308180537295
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537293
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537296
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537292
after-lambda200308180537290
  (comment (define (cond-predicate clause) (car clause)))
  (perform (op define-variable!) (const cond-predicate) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (cdr clause)))
  (assign val (op make-compiled-procedure) (label entry200308180537251) (reg env))
  (goto (label after-lambda200308180537250))
  (comment (lambda (clause) (cdr clause)))
entry200308180537251
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537256))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537255))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537253))
compound-branch200308180537254
  (goto (label compound-apply-compiled))
compiled-branch200308180537255
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537253
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537256
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537252
after-lambda200308180537250
  (comment (define (cond-actions clause) (cdr clause)))
  (perform (op define-variable!) (const cond-actions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (expand-clauses (cond-clauses exp))))
  (assign val (op make-compiled-procedure) (label entry200308180537211) (reg env))
  (goto (label after-lambda200308180537210))
  (comment (lambda (exp) (expand-clauses (cond-clauses exp))))
entry200308180537211
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment expand-clauses)
  (assign proc (op lookup-variable-value) (const expand-clauses) (reg env))
  (save continue)
  (save proc)
  (comment cond-clauses)
  (assign proc (op lookup-variable-value) (const cond-clauses) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537216))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537215))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537213))
compound-branch200308180537214
  (assign continue (label after-call200308180537212))
  (goto (label compound-apply-compiled))
compiled-branch200308180537215
  (assign continue (label after-call200308180537212))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537213
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537216
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537212
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537221))
compound-branch200308180537222
  (goto (label compound-apply-compiled))
compiled-branch200308180537223
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537221
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537220
after-lambda200308180537210
  (comment (define (cond->if exp) (expand-clauses (cond-clauses exp))))
  (perform (op define-variable!) (const cond->if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
  (assign val (op make-compiled-procedure) (label entry200308180537061) (reg env))
  (goto (label after-lambda200308180537060))
  (comment (lambda (clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
entry200308180537061
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clauses)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537161))
compound-branch200308180537162
  (assign continue (label after-call200308180537160))
  (goto (label compound-apply-compiled))
compiled-branch200308180537163
  (assign continue (label after-call200308180537160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537160
  (restore env)
  (restore continue)
  (comment (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180537063))
true-branch200308180537064
  (comment (quote false))
  (assign val  (const false))
  (goto (reg continue))
false-branch200308180537063
  (comment (lambda (first rest) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))
  (assign proc (op make-compiled-procedure) (label entry200308180537076) (reg env))
  (goto (label after-lambda200308180537075))
  (comment (lambda (first rest) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))
entry200308180537076
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (first rest)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment cond-else-clause?)
  (assign proc (op lookup-variable-value) (const cond-else-clause?) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537131))
compound-branch200308180537132
  (assign continue (label after-call200308180537130))
  (goto (label compound-apply-compiled))
compiled-branch200308180537133
  (assign continue (label after-call200308180537130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537130
  (restore env)
  (restore continue)
  (comment (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180537078))
true-branch200308180537079
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537129))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537128))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537126))
compound-branch200308180537127
  (assign continue (label after-call200308180537125))
  (goto (label compound-apply-compiled))
compiled-branch200308180537128
  (assign continue (label after-call200308180537125))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537126
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537129
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537125
  (restore env)
  (restore continue)
  (comment (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180537101))
true-branch200308180537102
  (comment sequence->exp)
  (assign proc (op lookup-variable-value) (const sequence->exp) (reg env))
  (save continue)
  (save proc)
  (comment cond-actions)
  (assign proc (op lookup-variable-value) (const cond-actions) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537119))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537118))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537116))
compound-branch200308180537117
  (assign continue (label after-call200308180537115))
  (goto (label compound-apply-compiled))
compiled-branch200308180537118
  (assign continue (label after-call200308180537115))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537116
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537119
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537115
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537121))
compound-branch200308180537122
  (goto (label compound-apply-compiled))
compiled-branch200308180537123
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537121
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537120
false-branch200308180537101
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (comment "ELSE clause isn't last -- COND->IF")
  (assign val  (const "ELSE clause isn't last -- COND->IF"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537111))
compound-branch200308180537112
  (goto (label compound-apply-compiled))
compiled-branch200308180537113
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537111
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537110
after-if200308180537100
false-branch200308180537078
  (comment make-if)
  (assign proc (op lookup-variable-value) (const make-if) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment expand-clauses)
  (assign proc (op lookup-variable-value) (const expand-clauses) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537081))
compound-branch200308180537082
  (assign continue (label after-call200308180537080))
  (goto (label compound-apply-compiled))
compiled-branch200308180537083
  (assign continue (label after-call200308180537080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537080
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment sequence->exp)
  (assign proc (op lookup-variable-value) (const sequence->exp) (reg env))
  (save proc)
  (comment cond-actions)
  (assign proc (op lookup-variable-value) (const cond-actions) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537089))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537088))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537086))
compound-branch200308180537087
  (assign continue (label after-call200308180537085))
  (goto (label compound-apply-compiled))
compiled-branch200308180537088
  (assign continue (label after-call200308180537085))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537086
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537089
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537085
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805370814))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805370813))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805370811))
compound-branch2003081805370812
  (assign continue (label after-call2003081805370810))
  (goto (label compound-apply-compiled))
compiled-branch2003081805370813
  (assign continue (label after-call2003081805370810))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805370811
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805370814
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805370810
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment cond-predicate)
  (assign proc (op lookup-variable-value) (const cond-predicate) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537091))
compound-branch200308180537092
  (assign continue (label after-call200308180537090))
  (goto (label compound-apply-compiled))
compiled-branch200308180537093
  (assign continue (label after-call200308180537090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537090
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537099))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537098))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537096))
compound-branch200308180537097
  (goto (label compound-apply-compiled))
compiled-branch200308180537098
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537096
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537099
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537095
after-if200308180537077
after-lambda200308180537075
  (save continue)
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537066))
compound-branch200308180537067
  (assign continue (label after-call200308180537065))
  (goto (label compound-apply-compiled))
compiled-branch200308180537068
  (assign continue (label after-call200308180537065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537065
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537071))
compound-branch200308180537072
  (assign continue (label after-call200308180537070))
  (goto (label compound-apply-compiled))
compiled-branch200308180537073
  (assign continue (label after-call200308180537070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180537074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180537070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537151))
compound-branch200308180537152
  (goto (label compound-apply-compiled))
compiled-branch200308180537153
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537151
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537150
after-if200308180537062
after-lambda200308180537060
  (comment (define (expand-clauses clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
  (perform (op define-variable!) (const expand-clauses) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (variable value) (list (quote set!) variable value)))
  (assign val (op make-compiled-procedure) (label entry200308180537021) (reg env))
  (goto (label after-lambda200308180537020))
  (comment (lambda (variable value) (list (quote set!) variable value)))
entry200308180537021
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variable value)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment value)
  (assign val (op lookup-variable-value) (const value) (reg env))
  (assign argl (op list) (reg val))
  (comment variable)
  (assign val (op lookup-variable-value) (const variable) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote set!))
  (assign val  (const set!))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180537034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180537033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180537031))
compound-branch200308180537032
  (goto (label compound-apply-compiled))
compiled-branch200308180537033
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180537031
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180537034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180537030
after-lambda200308180537020
  (comment (define (assignment-make variable value) (list (quote set!) variable value)))
  (perform (op define-variable!) (const assignment-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
  (assign val (op make-compiled-procedure) (label entry200308180536581) (reg env))
  (goto (label after-lambda200308180536580))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
entry200308180536581
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (parameters body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment parameters)
  (assign val (op lookup-variable-value) (const parameters) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536586))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536585))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536583))
compound-branch200308180536584
  (assign continue (label after-call200308180536582))
  (goto (label compound-apply-compiled))
compiled-branch200308180536585
  (assign continue (label after-call200308180536582))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536586
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536582
  (assign argl (op list) (reg val))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536591))
compound-branch200308180536592
  (goto (label compound-apply-compiled))
compiled-branch200308180536593
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536591
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536590
after-lambda200308180536580
  (comment (define (lambda-make parameters body) (cons (quote lambda) (cons parameters body))))
  (perform (op define-variable!) (const lambda-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote let))))
  (assign val (op make-compiled-procedure) (label entry200308180536551) (reg env))
  (goto (label after-lambda200308180536550))
  (comment (lambda (exp) (tagged-list? exp (quote let))))
entry200308180536551
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote let))
  (assign val  (const let))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536556))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536555))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536553))
compound-branch200308180536554
  (goto (label compound-apply-compiled))
compiled-branch200308180536555
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536553
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536556
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536552
after-lambda200308180536550
  (comment (define (let? exp) (tagged-list? exp (quote let))))
  (perform (op define-variable!) (const let?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote let*))))
  (assign val (op make-compiled-procedure) (label entry200308180536521) (reg env))
  (goto (label after-lambda200308180536520))
  (comment (lambda (exp) (tagged-list? exp (quote let*))))
entry200308180536521
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote let*))
  (assign val  (const let*))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536526))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536525))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536523))
compound-branch200308180536524
  (goto (label compound-apply-compiled))
compiled-branch200308180536525
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536523
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536526
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536522
after-lambda200308180536520
  (comment (define (let*? exp) (tagged-list? exp (quote let*))))
  (perform (op define-variable!) (const let*?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote letrec))))
  (assign val (op make-compiled-procedure) (label entry200308180536491) (reg env))
  (goto (label after-lambda200308180536490))
  (comment (lambda (exp) (tagged-list? exp (quote letrec))))
entry200308180536491
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote letrec))
  (assign val  (const letrec))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536496))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536495))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536493))
compound-branch200308180536494
  (goto (label compound-apply-compiled))
compiled-branch200308180536495
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536493
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536496
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536492
after-lambda200308180536490
  (comment (define (letrec? exp) (tagged-list? exp (quote letrec))))
  (perform (op define-variable!) (const letrec?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (not (pair? (cadr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180536451) (reg env))
  (goto (label after-lambda200308180536450))
  (comment (lambda (exp) (not (pair? (cadr exp)))))
entry200308180536451
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save continue)
  (save proc)
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536456))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536455))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536453))
compound-branch200308180536454
  (assign continue (label after-call200308180536452))
  (goto (label compound-apply-compiled))
compiled-branch200308180536455
  (assign continue (label after-call200308180536452))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536453
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536456
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536452
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536461))
compound-branch200308180536462
  (assign continue (label after-call200308180536460))
  (goto (label compound-apply-compiled))
compiled-branch200308180536463
  (assign continue (label after-call200308180536460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536460
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536469))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536468))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536466))
compound-branch200308180536467
  (goto (label compound-apply-compiled))
compiled-branch200308180536468
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536466
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536469
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536465
after-lambda200308180536450
  (comment (define (named-let? exp) (not (pair? (cadr exp)))))
  (perform (op define-variable!) (const named-let?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
  (assign val (op make-compiled-procedure) (label entry200308180536411) (reg env))
  (goto (label after-lambda200308180536410))
  (comment (lambda (exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
entry200308180536411
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536429))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536428))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536426))
compound-branch200308180536427
  (assign continue (label after-call200308180536425))
  (goto (label compound-apply-compiled))
compiled-branch200308180536428
  (assign continue (label after-call200308180536425))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536426
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536429
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536425
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (cadr exp) (quote ())))
  (test (op false?) (reg val))
  (branch (label false-branch200308180536413))
true-branch200308180536414
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536421))
compound-branch200308180536422
  (goto (label compound-apply-compiled))
compiled-branch200308180536423
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536421
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536420
false-branch200308180536413
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
after-if200308180536412
after-lambda200308180536410
  (comment (define (let-name exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
  (perform (op define-variable!) (const let-name) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180536371) (reg env))
  (goto (label after-lambda200308180536370))
  (comment (lambda (exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
entry200308180536371
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536389))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536388))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536386))
compound-branch200308180536387
  (assign continue (label after-call200308180536385))
  (goto (label compound-apply-compiled))
compiled-branch200308180536388
  (assign continue (label after-call200308180536385))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536386
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536389
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536385
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (caddr exp) (cadr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180536373))
true-branch200308180536374
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536381))
compound-branch200308180536382
  (goto (label compound-apply-compiled))
compiled-branch200308180536383
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536381
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536380
false-branch200308180536373
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536379))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536378))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536376))
compound-branch200308180536377
  (goto (label compound-apply-compiled))
compiled-branch200308180536378
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536376
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536379
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536375
after-if200308180536372
after-lambda200308180536370
  (comment (define (let-bindings exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
  (perform (op define-variable!) (const let-bindings) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180536321) (reg env))
  (goto (label after-lambda200308180536320))
  (comment (lambda (exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
entry200308180536321
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536341))
compound-branch200308180536342
  (assign continue (label after-call200308180536340))
  (goto (label compound-apply-compiled))
compiled-branch200308180536343
  (assign continue (label after-call200308180536340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536340
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (cdddr exp) (cddr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180536323))
true-branch200308180536324
  (comment cdddr)
  (assign proc (op lookup-variable-value) (const cdddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536331))
compound-branch200308180536332
  (goto (label compound-apply-compiled))
compiled-branch200308180536333
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536331
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536330
false-branch200308180536323
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536329))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536328))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536326))
compound-branch200308180536327
  (goto (label compound-apply-compiled))
compiled-branch200308180536328
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536326
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536329
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536325
after-if200308180536322
after-lambda200308180536320
  (comment (define (let-body exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
  (perform (op define-variable!) (const let-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
  (assign val (op make-compiled-procedure) (label entry200308180536271) (reg env))
  (goto (label after-lambda200308180536270))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
entry200308180536271
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (bindings) (map (lambda (binding) (car binding)) bindings)))
  (assign proc (op make-compiled-procedure) (label entry200308180536281) (reg env))
  (goto (label after-lambda200308180536280))
  (comment (lambda (bindings) (map (lambda (binding) (car binding)) bindings)))
entry200308180536281
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (binding) (car binding)))
  (assign val (op make-compiled-procedure) (label entry200308180536283) (reg env))
  (goto (label after-lambda200308180536282))
  (comment (lambda (binding) (car binding)))
entry200308180536283
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (binding)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment binding)
  (assign val (op lookup-variable-value) (const binding) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536288))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536287))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536285))
compound-branch200308180536286
  (goto (label compound-apply-compiled))
compiled-branch200308180536287
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536285
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536288
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536284
after-lambda200308180536282
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536291))
compound-branch200308180536292
  (goto (label compound-apply-compiled))
compiled-branch200308180536293
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536291
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536290
after-lambda200308180536280
  (save continue)
  (save proc)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536276))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536275))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536273))
compound-branch200308180536274
  (assign continue (label after-call200308180536272))
  (goto (label compound-apply-compiled))
compiled-branch200308180536275
  (assign continue (label after-call200308180536272))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536273
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536276
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536272
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536301))
compound-branch200308180536302
  (goto (label compound-apply-compiled))
compiled-branch200308180536303
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536301
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536300
after-lambda200308180536270
  (comment (define (let-variables exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
  (perform (op define-variable!) (const let-variables) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
  (assign val (op make-compiled-procedure) (label entry200308180536221) (reg env))
  (goto (label after-lambda200308180536220))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
entry200308180536221
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (bindings) (map (lambda (binding) (cadr binding)) bindings)))
  (assign proc (op make-compiled-procedure) (label entry200308180536236) (reg env))
  (goto (label after-lambda200308180536235))
  (comment (lambda (bindings) (map (lambda (binding) (cadr binding)) bindings)))
entry200308180536236
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (binding) (cadr binding)))
  (assign val (op make-compiled-procedure) (label entry200308180536238) (reg env))
  (goto (label after-lambda200308180536237))
  (comment (lambda (binding) (cadr binding)))
entry200308180536238
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (binding)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment binding)
  (assign val (op lookup-variable-value) (const binding) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805362313))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805362312))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805362310))
compound-branch2003081805362311
  (goto (label compound-apply-compiled))
compiled-branch2003081805362312
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805362310
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805362313
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536239
after-lambda200308180536237
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536241))
compound-branch200308180536242
  (goto (label compound-apply-compiled))
compiled-branch200308180536243
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536241
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536240
after-lambda200308180536235
  (save continue)
  (save proc)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536231))
compound-branch200308180536232
  (assign continue (label after-call200308180536230))
  (goto (label compound-apply-compiled))
compiled-branch200308180536233
  (assign continue (label after-call200308180536230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536230
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536251))
compound-branch200308180536252
  (goto (label compound-apply-compiled))
compiled-branch200308180536253
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536251
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536250
after-lambda200308180536220
  (comment (define (let-expressions exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
  (perform (op define-variable!) (const let-expressions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (bindings body) (cons (quote let) (cons bindings body))))
  (assign val (op make-compiled-procedure) (label entry200308180536191) (reg env))
  (goto (label after-lambda200308180536190))
  (comment (lambda (bindings body) (cons (quote let) (cons bindings body))))
entry200308180536191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536196))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536195))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536193))
compound-branch200308180536194
  (assign continue (label after-call200308180536192))
  (goto (label compound-apply-compiled))
compiled-branch200308180536195
  (assign continue (label after-call200308180536192))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536193
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536196
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536192
  (assign argl (op list) (reg val))
  (comment (quote let))
  (assign val  (const let))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536201))
compound-branch200308180536202
  (goto (label compound-apply-compiled))
compiled-branch200308180536203
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536201
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536200
after-lambda200308180536190
  (comment (define (let-make bindings body) (cons (quote let) (cons bindings body))))
  (perform (op define-variable!) (const let-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
  (assign val (op make-compiled-procedure) (label entry200308180536051) (reg env))
  (goto (label after-lambda200308180536050))
  (comment (lambda (exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
entry200308180536051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (variables expressions body name) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions)))))
  (assign proc (op make-compiled-procedure) (label entry200308180536076) (reg env))
  (goto (label after-lambda200308180536075))
  (comment (lambda (variables expressions body name) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions)))))
entry200308180536076
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables expressions body name)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536141))
compound-branch200308180536142
  (assign continue (label after-call200308180536140))
  (goto (label compound-apply-compiled))
compiled-branch200308180536143
  (assign continue (label after-call200308180536140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536140
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions))) (cons (lambda-make variables body) expressions)))
  (test (op false?) (reg val))
  (branch (label false-branch200308180536078))
true-branch200308180536079
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment expressions)
  (assign val (op lookup-variable-value) (const expressions) (reg env))
  (assign argl (op list) (reg val))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536091))
compound-branch200308180536092
  (assign continue (label after-call200308180536090))
  (goto (label compound-apply-compiled))
compiled-branch200308180536093
  (assign continue (label after-call200308180536090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536090
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (save proc)
  (save env)
  (comment lambda-make)
  (assign proc (op lookup-variable-value) (const lambda-make) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536101))
compound-branch200308180536102
  (assign continue (label after-call200308180536100))
  (goto (label compound-apply-compiled))
compiled-branch200308180536103
  (assign continue (label after-call200308180536100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536100
  (assign argl (op list) (reg val))
  (restore env)
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536109))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536108))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536106))
compound-branch200308180536107
  (assign continue (label after-call200308180536105))
  (goto (label compound-apply-compiled))
compiled-branch200308180536108
  (assign continue (label after-call200308180536105))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536106
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536109
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536105
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536111))
compound-branch200308180536112
  (assign continue (label after-call200308180536110))
  (goto (label compound-apply-compiled))
compiled-branch200308180536113
  (assign continue (label after-call200308180536110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536110
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536121))
compound-branch200308180536122
  (assign continue (label after-call200308180536120))
  (goto (label compound-apply-compiled))
compiled-branch200308180536123
  (assign continue (label after-call200308180536120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536120
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536129))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536128))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536126))
compound-branch200308180536127
  (assign continue (label after-call200308180536125))
  (goto (label compound-apply-compiled))
compiled-branch200308180536128
  (assign continue (label after-call200308180536125))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536126
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536129
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536125
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536131))
compound-branch200308180536132
  (goto (label compound-apply-compiled))
compiled-branch200308180536133
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536131
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536130
false-branch200308180536078
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment expressions)
  (assign val (op lookup-variable-value) (const expressions) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment lambda-make)
  (assign proc (op lookup-variable-value) (const lambda-make) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536081))
compound-branch200308180536082
  (assign continue (label after-call200308180536080))
  (goto (label compound-apply-compiled))
compiled-branch200308180536083
  (assign continue (label after-call200308180536080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536080
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536089))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536088))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536086))
compound-branch200308180536087
  (goto (label compound-apply-compiled))
compiled-branch200308180536088
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536086
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536089
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536085
after-if200308180536077
after-lambda200308180536075
  (save continue)
  (save proc)
  (save env)
  (comment let-name)
  (assign proc (op lookup-variable-value) (const let-name) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536056))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536055))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536053))
compound-branch200308180536054
  (assign continue (label after-call200308180536052))
  (goto (label compound-apply-compiled))
compiled-branch200308180536055
  (assign continue (label after-call200308180536052))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536053
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536056
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536052
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536061))
compound-branch200308180536062
  (assign continue (label after-call200308180536060))
  (goto (label compound-apply-compiled))
compiled-branch200308180536063
  (assign continue (label after-call200308180536060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536060
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment let-expressions)
  (assign proc (op lookup-variable-value) (const let-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536066))
compound-branch200308180536067
  (assign continue (label after-call200308180536065))
  (goto (label compound-apply-compiled))
compiled-branch200308180536068
  (assign continue (label after-call200308180536065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536065
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment let-variables)
  (assign proc (op lookup-variable-value) (const let-variables) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536071))
compound-branch200308180536072
  (assign continue (label after-call200308180536070))
  (goto (label compound-apply-compiled))
compiled-branch200308180536073
  (assign continue (label after-call200308180536070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536161))
compound-branch200308180536162
  (goto (label compound-apply-compiled))
compiled-branch200308180536163
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536161
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536160
after-lambda200308180536050
  (comment (define (let->combination exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
  (perform (op define-variable!) (const let->combination) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
  (assign val (op make-compiled-procedure) (label entry200308180536011) (reg env))
  (goto (label after-lambda200308180536010))
  (comment (lambda (exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
entry200308180536011
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (save continue)
  (save proc)
  (comment expand-bindings)
  (assign proc (op lookup-variable-value) (const expand-bindings) (reg env))
  (save proc)
  (save env)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536016))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536015))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536013))
compound-branch200308180536014
  (assign continue (label after-call200308180536012))
  (goto (label compound-apply-compiled))
compiled-branch200308180536015
  (assign continue (label after-call200308180536012))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536013
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536016
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536012
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536021))
compound-branch200308180536022
  (assign continue (label after-call200308180536020))
  (goto (label compound-apply-compiled))
compiled-branch200308180536023
  (assign continue (label after-call200308180536020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536020
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536029))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536028))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536026))
compound-branch200308180536027
  (assign continue (label after-call200308180536025))
  (goto (label compound-apply-compiled))
compiled-branch200308180536028
  (assign continue (label after-call200308180536025))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536026
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180536029
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180536025
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180536034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180536033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180536031))
compound-branch200308180536032
  (goto (label compound-apply-compiled))
compiled-branch200308180536033
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180536031
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180536034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180536030
after-lambda200308180536010
  (comment (define (let*->nested-lets exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
  (perform (op define-variable!) (const let*->nested-lets) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
  (assign val (op make-compiled-procedure) (label entry200308180535551) (reg env))
  (goto (label after-lambda200308180535550))
  (comment (lambda (bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
entry200308180535551
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings body)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535591))
compound-branch200308180535592
  (assign continue (label after-call200308180535590))
  (goto (label compound-apply-compiled))
compiled-branch200308180535593
  (assign continue (label after-call200308180535590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535590
  (restore env)
  (restore continue)
  (comment (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180535553))
true-branch200308180535554
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (goto (reg continue))
false-branch200308180535553
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save proc)
  (save env)
  (comment expand-bindings)
  (assign proc (op lookup-variable-value) (const expand-bindings) (reg env))
  (save proc)
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535556))
compound-branch200308180535557
  (assign continue (label after-call200308180535555))
  (goto (label compound-apply-compiled))
compiled-branch200308180535558
  (assign continue (label after-call200308180535555))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535556
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535555
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805355514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805355513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805355511))
compound-branch2003081805355512
  (assign continue (label after-call2003081805355510))
  (goto (label compound-apply-compiled))
compiled-branch2003081805355513
  (assign continue (label after-call2003081805355510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805355511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805355514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003081805355510
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535561))
compound-branch200308180535562
  (assign continue (label after-call200308180535560))
  (goto (label compound-apply-compiled))
compiled-branch200308180535563
  (assign continue (label after-call200308180535560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535560
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535571))
compound-branch200308180535572
  (assign continue (label after-call200308180535570))
  (goto (label compound-apply-compiled))
compiled-branch200308180535573
  (assign continue (label after-call200308180535570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535570
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535579))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535578))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535576))
compound-branch200308180535577
  (assign continue (label after-call200308180535575))
  (goto (label compound-apply-compiled))
compiled-branch200308180535578
  (assign continue (label after-call200308180535575))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535576
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535579
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535575
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535581))
compound-branch200308180535582
  (goto (label compound-apply-compiled))
compiled-branch200308180535583
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535581
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535580
after-if200308180535552
after-lambda200308180535550
  (comment (define (expand-bindings bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
  (perform (op define-variable!) (const expand-bindings) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (assign val (op make-compiled-procedure) (label entry200308180535431) (reg env))
  (goto (label after-lambda200308180535430))
  (comment (lambda (exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
entry200308180535431
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (variables) (let ((values (let-expressions exp))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))))
  (assign proc (op make-compiled-procedure) (label entry200308180535438) (reg env))
  (goto (label after-lambda200308180535437))
  (comment (lambda (variables) (let ((values (let-expressions exp))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))))
entry200308180535438
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables)) (reg argl) (reg env))
  (comment (lambda (values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp)))))))
  (assign proc (op make-compiled-procedure) (label entry200308180535446) (reg env))
  (goto (label after-lambda200308180535445))
  (comment (lambda (values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp)))))))
entry200308180535446
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (values)) (reg argl) (reg env))
  (comment (lambda (bindings) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (assign proc (op make-compiled-procedure) (label entry200308180535461) (reg env))
  (goto (label after-lambda200308180535460))
  (comment (lambda (bindings) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
entry200308180535461
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment (lambda (assignments) (let-make bindings (append assignments (let-body exp)))))
  (assign proc (op make-compiled-procedure) (label entry200308180535476) (reg env))
  (goto (label after-lambda200308180535475))
  (comment (lambda (assignments) (let-make bindings (append assignments (let-body exp)))))
entry200308180535476
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (assignments)) (reg argl) (reg env))
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805354711))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805354710))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535478))
compound-branch200308180535479
  (assign continue (label after-call200308180535477))
  (goto (label compound-apply-compiled))
compiled-branch2003081805354710
  (assign continue (label after-call200308180535477))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535478
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805354711
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535477
  (assign argl (op list) (reg val))
  (restore env)
  (comment assignments)
  (assign val (op lookup-variable-value) (const assignments) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535481))
compound-branch200308180535482
  (assign continue (label after-call200308180535480))
  (goto (label compound-apply-compiled))
compiled-branch200308180535483
  (assign continue (label after-call200308180535480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535480
  (assign argl (op list) (reg val))
  (restore env)
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535486))
compound-branch200308180535487
  (goto (label compound-apply-compiled))
compiled-branch200308180535488
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535486
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535485
after-lambda200308180535475
  (save continue)
  (save proc)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment values)
  (assign val (op lookup-variable-value) (const values) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (lambda (var val) (assignment-make var val)))
  (assign val (op make-compiled-procedure) (label entry200308180535463) (reg env))
  (goto (label after-lambda200308180535462))
  (comment (lambda (var val) (assignment-make var val)))
entry200308180535463
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var val)) (reg argl) (reg env))
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (comment val)
  (assign val (op lookup-variable-value) (const val) (reg env))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535468))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535467))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535465))
compound-branch200308180535466
  (goto (label compound-apply-compiled))
compiled-branch200308180535467
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535465
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535468
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535464
after-lambda200308180535462
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535471))
compound-branch200308180535472
  (assign continue (label after-call200308180535470))
  (goto (label compound-apply-compiled))
compiled-branch200308180535473
  (assign continue (label after-call200308180535470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535470
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535491))
compound-branch200308180535492
  (goto (label compound-apply-compiled))
compiled-branch200308180535493
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535491
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535490
after-lambda200308180535460
  (save continue)
  (save proc)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
  (assign val (op make-compiled-procedure) (label entry200308180535448) (reg env))
  (goto (label after-lambda200308180535447))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
entry200308180535448
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805354413))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805354412))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003081805354410))
compound-branch2003081805354411
  (goto (label compound-apply-compiled))
compiled-branch2003081805354412
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003081805354410
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805354413
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535449
after-lambda200308180535447
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535451))
compound-branch200308180535452
  (assign continue (label after-call200308180535450))
  (goto (label compound-apply-compiled))
compiled-branch200308180535453
  (assign continue (label after-call200308180535450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535450
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535501))
compound-branch200308180535502
  (goto (label compound-apply-compiled))
compiled-branch200308180535503
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535501
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535500
after-lambda200308180535445
  (save continue)
  (save proc)
  (comment let-expressions)
  (assign proc (op lookup-variable-value) (const let-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535441))
compound-branch200308180535442
  (assign continue (label after-call200308180535440))
  (goto (label compound-apply-compiled))
compiled-branch200308180535443
  (assign continue (label after-call200308180535440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535440
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535521))
compound-branch200308180535522
  (goto (label compound-apply-compiled))
compiled-branch200308180535523
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535521
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535520
after-lambda200308180535437
  (save continue)
  (save proc)
  (comment let-variables)
  (assign proc (op lookup-variable-value) (const let-variables) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535436))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535435))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535433))
compound-branch200308180535434
  (assign continue (label after-call200308180535432))
  (goto (label compound-apply-compiled))
compiled-branch200308180535435
  (assign continue (label after-call200308180535432))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535433
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535436
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535432
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535531))
compound-branch200308180535532
  (goto (label compound-apply-compiled))
compiled-branch200308180535533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535530
after-lambda200308180535430
  (comment (define (letrec->let exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (perform (op define-variable!) (const letrec->let) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
  (assign val (op make-compiled-procedure) (label entry200308180535251) (reg env))
  (goto (label after-lambda200308180535250))
  (comment (lambda (body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
entry200308180535251
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (body)) (reg argl) (reg env))
  (comment (lambda (defines) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))))
  (assign proc (op make-compiled-procedure) (label entry200308180535261) (reg env))
  (goto (label after-lambda200308180535260))
  (comment (lambda (defines) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))))
entry200308180535261
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (defines)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535381))
compound-branch200308180535382
  (assign continue (label after-call200308180535380))
  (goto (label compound-apply-compiled))
compiled-branch200308180535383
  (assign continue (label after-call200308180535380))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535381
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535380
  (restore env)
  (restore continue)
  (comment (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308180535263))
true-branch200308180535264
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (goto (reg continue))
false-branch200308180535263
  (comment (lambda (variables values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))
  (assign proc (op make-compiled-procedure) (label entry200308180535286) (reg env))
  (goto (label after-lambda200308180535285))
  (comment (lambda (variables values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))
entry200308180535286
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables values)) (reg argl) (reg env))
  (comment (lambda (bindings assignments body-without-defines) (list (let-make bindings (append assignments body-without-defines)))))
  (assign proc (op make-compiled-procedure) (label entry200308180535336) (reg env))
  (goto (label after-lambda200308180535335))
  (comment (lambda (bindings assignments body-without-defines) (list (let-make bindings (append assignments body-without-defines)))))
entry200308180535336
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings assignments body-without-defines)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (comment body-without-defines)
  (assign val (op lookup-variable-value) (const body-without-defines) (reg env))
  (assign argl (op list) (reg val))
  (comment assignments)
  (assign val (op lookup-variable-value) (const assignments) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805353311))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805353310))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535338))
compound-branch200308180535339
  (assign continue (label after-call200308180535337))
  (goto (label compound-apply-compiled))
compiled-branch2003081805353310
  (assign continue (label after-call200308180535337))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535338
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003081805353311
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535337
  (assign argl (op list) (reg val))
  (restore env)
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535341))
compound-branch200308180535342
  (assign continue (label after-call200308180535340))
  (goto (label compound-apply-compiled))
compiled-branch200308180535343
  (assign continue (label after-call200308180535340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535340
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535349))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535348))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535346))
compound-branch200308180535347
  (goto (label compound-apply-compiled))
compiled-branch200308180535348
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535346
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535349
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535345
after-lambda200308180535335
  (save continue)
  (save proc)
  (save env)
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (not (definition? exp))))
  (assign val (op make-compiled-procedure) (label entry200308180535291) (reg env))
  (goto (label after-lambda200308180535290))
  (comment (lambda (exp) (not (definition? exp))))
entry200308180535291
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save continue)
  (save proc)
  (comment definition?)
  (assign proc (op lookup-variable-value) (const definition?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535296))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535295))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535293))
compound-branch200308180535294
  (assign continue (label after-call200308180535292))
  (goto (label compound-apply-compiled))
compiled-branch200308180535295
  (assign continue (label after-call200308180535292))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535293
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535296
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535292
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805352911))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805352910))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535298))
compound-branch200308180535299
  (goto (label compound-apply-compiled))
compiled-branch2003081805352910
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535298
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805352911
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535297
after-lambda200308180535290
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535301))
compound-branch200308180535302
  (assign continue (label after-call200308180535300))
  (goto (label compound-apply-compiled))
compiled-branch200308180535303
  (assign continue (label after-call200308180535300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535300
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment values)
  (assign val (op lookup-variable-value) (const values) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (lambda (var val) (assignment-make var val)))
  (assign val (op make-compiled-procedure) (label entry200308180535306) (reg env))
  (goto (label after-lambda200308180535305))
  (comment (lambda (var val) (assignment-make var val)))
entry200308180535306
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var val)) (reg argl) (reg env))
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (comment val)
  (assign val (op lookup-variable-value) (const val) (reg env))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535311))
compound-branch200308180535312
  (goto (label compound-apply-compiled))
compiled-branch200308180535313
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535311
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535310
after-lambda200308180535305
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535316))
compound-branch200308180535317
  (assign continue (label after-call200308180535315))
  (goto (label compound-apply-compiled))
compiled-branch200308180535318
  (assign continue (label after-call200308180535315))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535315
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
  (assign val (op make-compiled-procedure) (label entry200308180535321) (reg env))
  (goto (label after-lambda200308180535320))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
entry200308180535321
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535326))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535325))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535323))
compound-branch200308180535324
  (goto (label compound-apply-compiled))
compiled-branch200308180535325
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535323
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535326
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535322
after-lambda200308180535320
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535331))
compound-branch200308180535332
  (assign continue (label after-call200308180535330))
  (goto (label compound-apply-compiled))
compiled-branch200308180535333
  (assign continue (label after-call200308180535330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535351))
compound-branch200308180535352
  (goto (label compound-apply-compiled))
compiled-branch200308180535353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535350
after-lambda200308180535285
  (save continue)
  (save proc)
  (save env)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (definition-value exp)))
  (assign val (op make-compiled-procedure) (label entry200308180535266) (reg env))
  (goto (label after-lambda200308180535265))
  (comment (lambda (exp) (definition-value exp)))
entry200308180535266
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment definition-value)
  (assign proc (op lookup-variable-value) (const definition-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805352611))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805352610))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535268))
compound-branch200308180535269
  (goto (label compound-apply-compiled))
compiled-branch2003081805352610
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535268
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805352611
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535267
after-lambda200308180535265
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535271))
compound-branch200308180535272
  (assign continue (label after-call200308180535270))
  (goto (label compound-apply-compiled))
compiled-branch200308180535273
  (assign continue (label after-call200308180535270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535270
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (definition-variable exp)))
  (assign val (op make-compiled-procedure) (label entry200308180535276) (reg env))
  (goto (label after-lambda200308180535275))
  (comment (lambda (exp) (definition-variable exp)))
entry200308180535276
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment definition-variable)
  (assign proc (op lookup-variable-value) (const definition-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003081805352711))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003081805352710))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535278))
compound-branch200308180535279
  (goto (label compound-apply-compiled))
compiled-branch2003081805352710
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535278
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003081805352711
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535277
after-lambda200308180535275
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535281))
compound-branch200308180535282
  (assign continue (label after-call200308180535280))
  (goto (label compound-apply-compiled))
compiled-branch200308180535283
  (assign continue (label after-call200308180535280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535280
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535371))
compound-branch200308180535372
  (goto (label compound-apply-compiled))
compiled-branch200308180535373
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535371
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535370
after-if200308180535262
after-lambda200308180535260
  (save continue)
  (save proc)
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment definition?)
  (assign val (op lookup-variable-value) (const definition?) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535256))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535255))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535253))
compound-branch200308180535254
  (assign continue (label after-call200308180535252))
  (goto (label compound-apply-compiled))
compiled-branch200308180535255
  (assign continue (label after-call200308180535252))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535253
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308180535256
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308180535252
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308180535414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308180535413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308180535411))
compound-branch200308180535412
  (goto (label compound-apply-compiled))
compiled-branch200308180535413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308180535411
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308180535414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308180535410
after-lambda200308180535250
  (comment (define (scan-out-defines body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
  (perform (op define-variable!) (const scan-out-defines) (reg val) (reg env))
  (assign val  (const ok))
))
