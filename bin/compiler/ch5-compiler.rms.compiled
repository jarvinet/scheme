
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded
(()()
(
  (comment (lambda (exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
  (assign val (op make-compiled-procedure) (label entry200308202149161) (reg env))
  (goto (label after-lambda200308202149160))
  (comment (lambda (exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
entry200308202149161
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment self-evaluating?)
  (assign proc (op lookup-variable-value) (const self-evaluating?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150541))
compound-branch200308202150542
  (assign continue (label after-call200308202150540))
  (goto (label compound-apply-compiled))
compiled-branch200308202150543
  (assign continue (label after-call200308202150540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150540
  (restore env)
  (restore continue)
  (comment (if (self-evaluating? exp) (compile-self-evaluating exp target linkage) (if (quoted? exp) (compile-quoted exp target linkage) (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202149163))
true-branch200308202149164
  (comment compile-self-evaluating)
  (assign proc (op lookup-variable-value) (const compile-self-evaluating) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150531))
compound-branch200308202150532
  (goto (label compound-apply-compiled))
compiled-branch200308202150533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150530
false-branch200308202149163
  (save continue)
  (save env)
  (comment quoted?)
  (assign proc (op lookup-variable-value) (const quoted?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150471))
compound-branch200308202150472
  (assign continue (label after-call200308202150470))
  (goto (label compound-apply-compiled))
compiled-branch200308202150473
  (assign continue (label after-call200308202150470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150470
  (restore env)
  (restore continue)
  (comment (if (quoted? exp) (compile-quoted exp target linkage) (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202149166))
true-branch200308202149167
  (comment compile-quoted)
  (assign proc (op lookup-variable-value) (const compile-quoted) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150461))
compound-branch200308202150462
  (goto (label compound-apply-compiled))
compiled-branch200308202150463
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150461
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150460
false-branch200308202149166
  (save continue)
  (save env)
  (comment variable?)
  (assign proc (op lookup-variable-value) (const variable?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150401))
compound-branch200308202150402
  (assign continue (label after-call200308202150400))
  (goto (label compound-apply-compiled))
compiled-branch200308202150403
  (assign continue (label after-call200308202150400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150400
  (restore env)
  (restore continue)
  (comment (if (variable? exp) (compile-variable exp target linkage) (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202149169))
true-branch2003082021491610
  (comment compile-variable)
  (assign proc (op lookup-variable-value) (const compile-variable) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150391))
compound-branch200308202150392
  (goto (label compound-apply-compiled))
compiled-branch200308202150393
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150391
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150390
false-branch200308202149169
  (save continue)
  (save env)
  (comment assignment?)
  (assign proc (op lookup-variable-value) (const assignment?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150331))
compound-branch200308202150332
  (assign continue (label after-call200308202150330))
  (goto (label compound-apply-compiled))
compiled-branch200308202150333
  (assign continue (label after-call200308202150330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150330
  (restore env)
  (restore continue)
  (comment (if (assignment? exp) (compile-assignment exp target linkage) (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491612))
true-branch2003082021491613
  (comment compile-assignment)
  (assign proc (op lookup-variable-value) (const compile-assignment) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150311))
compound-branch200308202150312
  (goto (label compound-apply-compiled))
compiled-branch200308202150313
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150311
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150310
false-branch2003082021491612
  (save continue)
  (save env)
  (comment definition?)
  (assign proc (op lookup-variable-value) (const definition?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150271))
compound-branch200308202150272
  (assign continue (label after-call200308202150270))
  (goto (label compound-apply-compiled))
compiled-branch200308202150273
  (assign continue (label after-call200308202150270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150270
  (restore env)
  (restore continue)
  (comment (if (definition? exp) (compile-definition exp target linkage) (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491615))
true-branch2003082021491616
  (comment compile-definition)
  (assign proc (op lookup-variable-value) (const compile-definition) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150251))
compound-branch200308202150252
  (goto (label compound-apply-compiled))
compiled-branch200308202150253
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150251
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150250
false-branch2003082021491615
  (save continue)
  (save env)
  (comment if?)
  (assign proc (op lookup-variable-value) (const if?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150211))
compound-branch200308202150212
  (assign continue (label after-call200308202150210))
  (goto (label compound-apply-compiled))
compiled-branch200308202150213
  (assign continue (label after-call200308202150210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150210
  (restore env)
  (restore continue)
  (comment (if (if? exp) (compile-if exp target linkage) (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491618))
true-branch2003082021491619
  (comment compile-if)
  (assign proc (op lookup-variable-value) (const compile-if) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150201))
compound-branch200308202150202
  (goto (label compound-apply-compiled))
compiled-branch200308202150203
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150201
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150200
false-branch2003082021491618
  (save continue)
  (save env)
  (comment lambda?)
  (assign proc (op lookup-variable-value) (const lambda?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150151))
compound-branch200308202150152
  (assign continue (label after-call200308202150150))
  (goto (label compound-apply-compiled))
compiled-branch200308202150153
  (assign continue (label after-call200308202150150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150150
  (restore env)
  (restore continue)
  (comment (if (lambda? exp) (compile-lambda exp target linkage) (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491621))
true-branch2003082021491622
  (comment compile-lambda)
  (assign proc (op lookup-variable-value) (const compile-lambda) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150141))
compound-branch200308202150142
  (goto (label compound-apply-compiled))
compiled-branch200308202150143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150140
false-branch2003082021491621
  (save continue)
  (save env)
  (comment begin?)
  (assign proc (op lookup-variable-value) (const begin?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150111))
compound-branch200308202150112
  (assign continue (label after-call200308202150110))
  (goto (label compound-apply-compiled))
compiled-branch200308202150113
  (assign continue (label after-call200308202150110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150110
  (restore env)
  (restore continue)
  (comment (if (begin? exp) (compile-sequence (begin-actions exp) target linkage) (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491624))
true-branch2003082021491625
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment begin-actions)
  (assign proc (op lookup-variable-value) (const begin-actions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150091))
compound-branch200308202150092
  (assign continue (label after-call200308202150090))
  (goto (label compound-apply-compiled))
compiled-branch200308202150093
  (assign continue (label after-call200308202150090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150090
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150099))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150098))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150096))
compound-branch200308202150097
  (goto (label compound-apply-compiled))
compiled-branch200308202150098
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150096
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150099
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150095
false-branch2003082021491624
  (save continue)
  (save env)
  (comment cond?)
  (assign proc (op lookup-variable-value) (const cond?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150051))
compound-branch200308202150052
  (assign continue (label after-call200308202150050))
  (goto (label compound-apply-compiled))
compiled-branch200308202150053
  (assign continue (label after-call200308202150050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150050
  (restore env)
  (restore continue)
  (comment (if (cond? exp) (compile (cond->if exp) target linkage) (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491627))
true-branch2003082021491628
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment cond->if)
  (assign proc (op lookup-variable-value) (const cond->if) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150031))
compound-branch200308202150032
  (assign continue (label after-call200308202150030))
  (goto (label compound-apply-compiled))
compiled-branch200308202150033
  (assign continue (label after-call200308202150030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150039))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150038))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150036))
compound-branch200308202150037
  (goto (label compound-apply-compiled))
compiled-branch200308202150038
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150036
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202150039
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202150035
false-branch2003082021491627
  (save continue)
  (save env)
  (comment let?)
  (assign proc (op lookup-variable-value) (const let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202150004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202150003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202150001))
compound-branch200308202150002
  (assign continue (label after-call200308202150000))
  (goto (label compound-apply-compiled))
compiled-branch200308202150003
  (assign continue (label after-call200308202150000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202150001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202150004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202150000
  (restore env)
  (restore continue)
  (comment (if (let? exp) (compile (let->combination exp) target linkage) (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491630))
true-branch2003082021491631
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment let->combination)
  (assign proc (op lookup-variable-value) (const let->combination) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149571))
compound-branch200308202149572
  (assign continue (label after-call200308202149570))
  (goto (label compound-apply-compiled))
compiled-branch200308202149573
  (assign continue (label after-call200308202149570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149570
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149581))
compound-branch200308202149582
  (goto (label compound-apply-compiled))
compiled-branch200308202149583
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149581
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149580
false-branch2003082021491630
  (save continue)
  (save env)
  (comment let*?)
  (assign proc (op lookup-variable-value) (const let*?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149551))
compound-branch200308202149552
  (assign continue (label after-call200308202149550))
  (goto (label compound-apply-compiled))
compiled-branch200308202149553
  (assign continue (label after-call200308202149550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149550
  (restore env)
  (restore continue)
  (comment (if (let*? exp) (compile (let*->nested-lets exp) target linkage) (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491633))
true-branch2003082021491634
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment let*->nested-lets)
  (assign proc (op lookup-variable-value) (const let*->nested-lets) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149521))
compound-branch200308202149522
  (assign continue (label after-call200308202149520))
  (goto (label compound-apply-compiled))
compiled-branch200308202149523
  (assign continue (label after-call200308202149520))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149521
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149520
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149531))
compound-branch200308202149532
  (goto (label compound-apply-compiled))
compiled-branch200308202149533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149530
false-branch2003082021491633
  (save continue)
  (save env)
  (comment letrec?)
  (assign proc (op lookup-variable-value) (const letrec?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149501))
compound-branch200308202149502
  (assign continue (label after-call200308202149500))
  (goto (label compound-apply-compiled))
compiled-branch200308202149503
  (assign continue (label after-call200308202149500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149500
  (restore env)
  (restore continue)
  (comment (if (letrec? exp) (compile (letrec->let exp) target linkage) (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491636))
true-branch2003082021491637
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment letrec->let)
  (assign proc (op lookup-variable-value) (const letrec->let) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149471))
compound-branch200308202149472
  (assign continue (label after-call200308202149470))
  (goto (label compound-apply-compiled))
compiled-branch200308202149473
  (assign continue (label after-call200308202149470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149470
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149491))
compound-branch200308202149492
  (goto (label compound-apply-compiled))
compiled-branch200308202149493
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149491
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149490
false-branch2003082021491636
  (save continue)
  (save env)
  (comment and?)
  (assign proc (op lookup-variable-value) (const and?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149461))
compound-branch200308202149462
  (assign continue (label after-call200308202149460))
  (goto (label compound-apply-compiled))
compiled-branch200308202149463
  (assign continue (label after-call200308202149460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149460
  (restore env)
  (restore continue)
  (comment (if (and? exp) (compile-and (and-expressions exp) target linkage) (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491639))
true-branch2003082021491640
  (comment compile-and)
  (assign proc (op lookup-variable-value) (const compile-and) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment and-expressions)
  (assign proc (op lookup-variable-value) (const and-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149441))
compound-branch200308202149442
  (assign continue (label after-call200308202149440))
  (goto (label compound-apply-compiled))
compiled-branch200308202149443
  (assign continue (label after-call200308202149440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149440
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149449))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149448))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149446))
compound-branch200308202149447
  (goto (label compound-apply-compiled))
compiled-branch200308202149448
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149446
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149449
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149445
false-branch2003082021491639
  (save continue)
  (save env)
  (comment or?)
  (assign proc (op lookup-variable-value) (const or?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149421))
compound-branch200308202149422
  (assign continue (label after-call200308202149420))
  (goto (label compound-apply-compiled))
compiled-branch200308202149423
  (assign continue (label after-call200308202149420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149420
  (restore env)
  (restore continue)
  (comment (if (or? exp) (compile-or (or-expressions exp) target linkage) (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp))))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491642))
true-branch2003082021491643
  (comment compile-or)
  (assign proc (op lookup-variable-value) (const compile-or) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment or-expressions)
  (assign proc (op lookup-variable-value) (const or-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149411))
compound-branch200308202149412
  (assign continue (label after-call200308202149410))
  (goto (label compound-apply-compiled))
compiled-branch200308202149413
  (assign continue (label after-call200308202149410))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149411
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149410
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149419))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149418))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149416))
compound-branch200308202149417
  (goto (label compound-apply-compiled))
compiled-branch200308202149418
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149416
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149419
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149415
false-branch2003082021491642
  (save continue)
  (save env)
  (comment application?)
  (assign proc (op lookup-variable-value) (const application?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149389))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149388))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149386))
compound-branch200308202149387
  (assign continue (label after-call200308202149385))
  (goto (label compound-apply-compiled))
compiled-branch200308202149388
  (assign continue (label after-call200308202149385))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149386
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202149389
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202149385
  (restore env)
  (restore continue)
  (comment (if (application? exp) (compile-application exp target linkage) (error "Unknown expression type -- COMPILE" exp)))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021491645))
true-branch2003082021491646
  (comment compile-application)
  (assign proc (op lookup-variable-value) (const compile-application) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149381))
compound-branch200308202149382
  (goto (label compound-apply-compiled))
compiled-branch200308202149383
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149381
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149380
false-branch2003082021491645
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment "Unknown expression type -- COMPILE")
  (assign val  (const "Unknown expression type -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021491651))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021491650))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021491648))
compound-branch2003082021491649
  (goto (label compound-apply-compiled))
compiled-branch2003082021491650
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021491648
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021491651
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021491647
after-if2003082021491644
after-if2003082021491641
after-if2003082021491638
after-if2003082021491635
after-if2003082021491632
after-if2003082021491629
after-if2003082021491626
after-if2003082021491623
after-if2003082021491620
after-if2003082021491617
after-if2003082021491614
after-if2003082021491611
after-if200308202149168
after-if200308202149165
after-if200308202149162
after-lambda200308202149160
  (comment (define (compile exp target linkage) (cond ((self-evaluating? exp) (compile-self-evaluating exp target linkage)) ((quoted? exp) (compile-quoted exp target linkage)) ((variable? exp) (compile-variable exp target linkage)) ((assignment? exp) (compile-assignment exp target linkage)) ((definition? exp) (compile-definition exp target linkage)) ((if? exp) (compile-if exp target linkage)) ((lambda? exp) (compile-lambda exp target linkage)) ((begin? exp) (compile-sequence (begin-actions exp) target linkage)) ((cond? exp) (compile (cond->if exp) target linkage)) ((let? exp) (compile (let->combination exp) target linkage)) ((let*? exp) (compile (let*->nested-lets exp) target linkage)) ((letrec? exp) (compile (letrec->let exp) target linkage)) ((and? exp) (compile-and (and-expressions exp) target linkage)) ((or? exp) (compile-or (or-expressions exp) target linkage)) ((application? exp) (compile-application exp target linkage)) (else (error "Unknown expression type -- COMPILE" exp)))))
  (perform (op define-variable!) (const compile) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (needs modifies statements) (list needs modifies statements)))
  (assign val (op make-compiled-procedure) (label entry200308202149031) (reg env))
  (goto (label after-lambda200308202149030))
  (comment (lambda (needs modifies statements) (list needs modifies statements)))
entry200308202149031
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (needs modifies statements)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment statements)
  (assign val (op lookup-variable-value) (const statements) (reg env))
  (assign argl (op list) (reg val))
  (comment modifies)
  (assign val (op lookup-variable-value) (const modifies) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment needs)
  (assign val (op lookup-variable-value) (const needs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202149044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202149043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202149041))
compound-branch200308202149042
  (goto (label compound-apply-compiled))
compiled-branch200308202149043
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202149041
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202149044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202149040
after-lambda200308202149030
  (comment (define (make-instruction-sequence needs modifies statements) (list needs modifies statements)))
  (perform (op define-variable!) (const make-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda () (make-instruction-sequence (quote ()) (quote ()) (quote ()))))
  (assign val (op make-compiled-procedure) (label entry200308202148321) (reg env))
  (goto (label after-lambda200308202148320))
  (comment (lambda () (make-instruction-sequence (quote ()) (quote ()) (quote ()))))
entry200308202148321
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const ()) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148326))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148325))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148323))
compound-branch200308202148324
  (goto (label compound-apply-compiled))
compiled-branch200308202148325
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148323
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202148326
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202148322
after-lambda200308202148320
  (comment (define (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (quote ()))))
  (perform (op define-variable!) (const empty-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))))))))
  (assign val (op make-compiled-procedure) (label entry200308202148111) (reg env))
  (goto (label after-lambda200308202148110))
  (comment (lambda (linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))))))))
entry200308202148111
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148181))
compound-branch200308202148182
  (assign continue (label after-call200308202148180))
  (goto (label compound-apply-compiled))
compiled-branch200308202148183
  (assign continue (label after-call200308202148180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202148184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202148180
  (restore env)
  (restore continue)
  (comment (if (eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue))))) (if (eq? linkage (quote next)) (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage)))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202148113))
true-branch200308202148114
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((goto (reg continue)))))
  (assign val  (const ((goto (reg continue)))))
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (continue)))
  (assign val  (const (continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148169))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148168))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148166))
compound-branch200308202148167
  (goto (label compound-apply-compiled))
compiled-branch200308202148168
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148166
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202148169
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202148165
false-branch200308202148113
  (save continue)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148161))
compound-branch200308202148162
  (assign continue (label after-call200308202148160))
  (goto (label compound-apply-compiled))
compiled-branch200308202148163
  (assign continue (label after-call200308202148160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202148164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202148160
  (restore env)
  (restore continue)
  (comment (if (eq? linkage (quote next)) (empty-instruction-sequence) (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202148116))
true-branch200308202148117
  (comment empty-instruction-sequence)
  (assign proc (op lookup-variable-value) (const empty-instruction-sequence) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148141))
compound-branch200308202148142
  (goto (label compound-apply-compiled))
compiled-branch200308202148143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202148144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202148140
false-branch200308202148116
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021481112))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021481111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148119))
compound-branch2003082021481110
  (assign continue (label after-call200308202148118))
  (goto (label compound-apply-compiled))
compiled-branch2003082021481111
  (assign continue (label after-call200308202148118))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148119
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021481112
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202148118
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021481117))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021481116))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021481114))
compound-branch2003082021481115
  (assign continue (label after-call2003082021481113))
  (goto (label compound-apply-compiled))
compiled-branch2003082021481116
  (assign continue (label after-call2003082021481113))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021481114
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021481117
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021481113
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148131))
compound-branch200308202148132
  (assign continue (label after-call200308202148130))
  (goto (label compound-apply-compiled))
compiled-branch200308202148133
  (assign continue (label after-call200308202148130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202148134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202148130
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202148139))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202148138))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202148136))
compound-branch200308202148137
  (goto (label compound-apply-compiled))
compiled-branch200308202148138
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202148136
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202148139
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202148135
after-if200308202148115
after-if200308202148112
after-lambda200308202148110
  (comment (define (compile-linkage linkage) (cond ((eq? linkage (quote return)) (make-instruction-sequence (quote (continue)) (quote ()) (quote ((goto (reg continue)))))) ((eq? linkage (quote next)) (empty-instruction-sequence)) (else (make-instruction-sequence (quote ()) (quote ()) (list (list (quote goto) (list (quote label) linkage))))))))
  (perform (op define-variable!) (const compile-linkage) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
  (assign val (op make-compiled-procedure) (label entry200308202147581) (reg env))
  (goto (label after-lambda200308202147580))
  (comment (lambda (linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
entry200308202147581
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (linkage instruction-sequence)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-linkage)
  (assign proc (op lookup-variable-value) (const compile-linkage) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147586))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147585))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147583))
compound-branch200308202147584
  (assign continue (label after-call200308202147582))
  (goto (label compound-apply-compiled))
compiled-branch200308202147585
  (assign continue (label after-call200308202147582))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147586
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147582
  (assign argl (op list) (reg val))
  (restore env)
  (comment instruction-sequence)
  (assign val (op lookup-variable-value) (const instruction-sequence) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (continue)))
  (assign val  (const (continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147591))
compound-branch200308202147592
  (goto (label compound-apply-compiled))
compiled-branch200308202147593
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147591
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202147594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202147590
after-lambda200308202147580
  (comment (define (end-with-linkage linkage instruction-sequence) (preserving (quote (continue)) instruction-sequence (compile-linkage linkage))))
  (perform (op define-variable!) (const end-with-linkage) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp)))))))
  (assign val (op make-compiled-procedure) (label entry200308202147391) (reg env))
  (goto (label after-lambda200308202147390))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp)))))))
entry200308202147391
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147421))
compound-branch200308202147422
  (assign continue (label after-call200308202147420))
  (goto (label compound-apply-compiled))
compiled-branch200308202147423
  (assign continue (label after-call200308202147420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147420
  (assign argl (op list) (reg val))
  (restore env)
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147429))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147428))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147426))
compound-branch200308202147427
  (assign continue (label after-call200308202147425))
  (goto (label compound-apply-compiled))
compiled-branch200308202147428
  (assign continue (label after-call200308202147425))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147426
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147429
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147425
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147431))
compound-branch200308202147432
  (assign continue (label after-call200308202147430))
  (goto (label compound-apply-compiled))
compiled-branch200308202147433
  (assign continue (label after-call200308202147430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147430
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147441))
compound-branch200308202147442
  (assign continue (label after-call200308202147440))
  (goto (label compound-apply-compiled))
compiled-branch200308202147443
  (assign continue (label after-call200308202147440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147440
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147451))
compound-branch200308202147452
  (assign continue (label after-call200308202147450))
  (goto (label compound-apply-compiled))
compiled-branch200308202147453
  (assign continue (label after-call200308202147450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147450
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147461))
compound-branch200308202147462
  (goto (label compound-apply-compiled))
compiled-branch200308202147463
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147461
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202147464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202147460
after-lambda200308202147390
  (comment (define (compile-self-evaluating exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) exp)))))))
  (perform (op define-variable!) (const compile-self-evaluating) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp))))))))
  (assign val (op make-compiled-procedure) (label entry200308202147131) (reg env))
  (goto (label after-lambda200308202147130))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp))))))))
entry200308202147131
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment text-of-quotation)
  (assign proc (op lookup-variable-value) (const text-of-quotation) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147181))
compound-branch200308202147182
  (assign continue (label after-call200308202147180))
  (goto (label compound-apply-compiled))
compiled-branch200308202147183
  (assign continue (label after-call200308202147180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147180
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147191))
compound-branch200308202147192
  (assign continue (label after-call200308202147190))
  (goto (label compound-apply-compiled))
compiled-branch200308202147193
  (assign continue (label after-call200308202147190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147190
  (assign argl (op list) (reg val))
  (restore env)
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147199))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147198))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147196))
compound-branch200308202147197
  (assign continue (label after-call200308202147195))
  (goto (label compound-apply-compiled))
compiled-branch200308202147198
  (assign continue (label after-call200308202147195))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147196
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147199
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147195
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147211))
compound-branch200308202147212
  (assign continue (label after-call200308202147210))
  (goto (label compound-apply-compiled))
compiled-branch200308202147213
  (assign continue (label after-call200308202147210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147210
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147221))
compound-branch200308202147222
  (assign continue (label after-call200308202147220))
  (goto (label compound-apply-compiled))
compiled-branch200308202147223
  (assign continue (label after-call200308202147220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147220
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147229))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147228))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147226))
compound-branch200308202147227
  (assign continue (label after-call200308202147225))
  (goto (label compound-apply-compiled))
compiled-branch200308202147228
  (assign continue (label after-call200308202147225))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147226
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202147229
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202147225
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202147244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202147243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202147241))
compound-branch200308202147242
  (goto (label compound-apply-compiled))
compiled-branch200308202147243
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202147241
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202147244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202147240
after-lambda200308202147130
  (comment (define (compile-quoted exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote ()) (list target) (list (list (quote assign) target (list (quote const) (text-of-quotation exp))))))))
  (perform (op define-variable!) (const compile-quoted) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env))))))))
  (assign val (op make-compiled-procedure) (label entry200308202146531) (reg env))
  (goto (label after-lambda200308202146530))
  (comment (lambda (exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env))))))))
entry200308202146531
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146541))
compound-branch200308202146542
  (assign continue (label after-call200308202146540))
  (goto (label compound-apply-compiled))
compiled-branch200308202146543
  (assign continue (label after-call200308202146540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146540
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment (quote (op lookup-variable-value)))
  (assign val  (const (op lookup-variable-value)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146551))
compound-branch200308202146552
  (assign continue (label after-call200308202146550))
  (goto (label compound-apply-compiled))
compiled-branch200308202146553
  (assign continue (label after-call200308202146550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146550
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146561))
compound-branch200308202146562
  (assign continue (label after-call200308202146560))
  (goto (label compound-apply-compiled))
compiled-branch200308202146563
  (assign continue (label after-call200308202146560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146560
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146569))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146568))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146566))
compound-branch200308202146567
  (assign continue (label after-call200308202146565))
  (goto (label compound-apply-compiled))
compiled-branch200308202146568
  (assign continue (label after-call200308202146565))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146566
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146569
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146565
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146581))
compound-branch200308202146582
  (assign continue (label after-call200308202146580))
  (goto (label compound-apply-compiled))
compiled-branch200308202146583
  (assign continue (label after-call200308202146580))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146581
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146580
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146591))
compound-branch200308202146592
  (goto (label compound-apply-compiled))
compiled-branch200308202146593
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146591
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202146594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202146590
after-lambda200308202146530
  (comment (define (compile-variable exp target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op lookup-variable-value)) (list (quote const) exp) (quote (reg env))))))))
  (perform (op define-variable!) (const compile-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
  (assign val (op make-compiled-procedure) (label entry200308202146191) (reg env))
  (goto (label after-lambda200308202146190))
  (comment (lambda (exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
entry200308202146191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))))))))
  (assign proc (op make-compiled-procedure) (label entry2003082021462711) (reg env))
  (goto (label after-lambda2003082021462710))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))))))))
entry2003082021462711
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var get-value-code)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (const ok)))
  (assign val  (const (const ok)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146281))
compound-branch200308202146282
  (assign continue (label after-call200308202146280))
  (goto (label compound-apply-compiled))
compiled-branch200308202146283
  (assign continue (label after-call200308202146280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146280
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146291))
compound-branch200308202146292
  (assign continue (label after-call200308202146290))
  (goto (label compound-apply-compiled))
compiled-branch200308202146293
  (assign continue (label after-call200308202146290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146290
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op set-variable-value!)))
  (assign val  (const (op set-variable-value!)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote perform))
  (assign val  (const perform))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146301))
compound-branch200308202146302
  (assign continue (label after-call200308202146300))
  (goto (label compound-apply-compiled))
compiled-branch200308202146303
  (assign continue (label after-call200308202146300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146300
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146321))
compound-branch200308202146322
  (assign continue (label after-call200308202146320))
  (goto (label compound-apply-compiled))
compiled-branch200308202146323
  (assign continue (label after-call200308202146320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146320
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146331))
compound-branch200308202146332
  (assign continue (label after-call200308202146330))
  (goto (label compound-apply-compiled))
compiled-branch200308202146333
  (assign continue (label after-call200308202146330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env val)))
  (assign val  (const (env val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146336))
compound-branch200308202146337
  (assign continue (label after-call200308202146335))
  (goto (label compound-apply-compiled))
compiled-branch200308202146338
  (assign continue (label after-call200308202146335))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146336
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146335
  (assign argl (op list) (reg val))
  (restore env)
  (comment get-value-code)
  (assign val (op lookup-variable-value) (const get-value-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146351))
compound-branch200308202146352
  (assign continue (label after-call200308202146350))
  (goto (label compound-apply-compiled))
compiled-branch200308202146353
  (assign continue (label after-call200308202146350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146350
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146371))
compound-branch200308202146372
  (goto (label compound-apply-compiled))
compiled-branch200308202146373
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146371
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202146374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202146370
after-lambda2003082021462710
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment assignment-value)
  (assign proc (op lookup-variable-value) (const assignment-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146201))
compound-branch200308202146202
  (assign continue (label after-call200308202146200))
  (goto (label compound-apply-compiled))
compiled-branch200308202146203
  (assign continue (label after-call200308202146200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146200
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146271))
compound-branch200308202146272
  (assign continue (label after-call200308202146270))
  (goto (label compound-apply-compiled))
compiled-branch200308202146273
  (assign continue (label after-call200308202146270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146270
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment assignment-variable)
  (assign proc (op lookup-variable-value) (const assignment-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146279))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146278))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146276))
compound-branch200308202146277
  (assign continue (label after-call200308202146275))
  (goto (label compound-apply-compiled))
compiled-branch200308202146278
  (assign continue (label after-call200308202146275))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146276
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146279
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146275
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146391))
compound-branch200308202146392
  (goto (label compound-apply-compiled))
compiled-branch200308202146393
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146391
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202146394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202146390
after-lambda200308202146190
  (comment (define (compile-assignment exp target linkage) (let ((var (assignment-variable exp)) (get-value-code (compile (assignment-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op set-variable-value!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
  (perform (op define-variable!) (const compile-assignment) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
  (assign val (op make-compiled-procedure) (label entry200308202145501) (reg env))
  (goto (label after-lambda200308202145500))
  (comment (lambda (exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
entry200308202145501
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))))))))
  (assign proc (op make-compiled-procedure) (label entry200308202145551) (reg env))
  (goto (label after-lambda200308202145550))
  (comment (lambda (var get-value-code) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok)))))))))
entry200308202145551
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var get-value-code)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (const ok)))
  (assign val  (const (const ok)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145556))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145555))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145553))
compound-branch200308202145554
  (assign continue (label after-call200308202145552))
  (goto (label compound-apply-compiled))
compiled-branch200308202145555
  (assign continue (label after-call200308202145552))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145553
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145556
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145552
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145561))
compound-branch200308202145562
  (assign continue (label after-call200308202145560))
  (goto (label compound-apply-compiled))
compiled-branch200308202145563
  (assign continue (label after-call200308202145560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145560
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op define-variable!)))
  (assign val  (const (op define-variable!)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote perform))
  (assign val  (const perform))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145571))
compound-branch200308202145572
  (assign continue (label after-call200308202145570))
  (goto (label compound-apply-compiled))
compiled-branch200308202145573
  (assign continue (label after-call200308202145570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145570
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145581))
compound-branch200308202145582
  (assign continue (label after-call200308202145580))
  (goto (label compound-apply-compiled))
compiled-branch200308202145583
  (assign continue (label after-call200308202145580))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145581
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145580
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146001))
compound-branch200308202146002
  (assign continue (label after-call200308202146000))
  (goto (label compound-apply-compiled))
compiled-branch200308202146003
  (assign continue (label after-call200308202146000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env val)))
  (assign val  (const (env val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146009))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146008))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146006))
compound-branch200308202146007
  (assign continue (label after-call200308202146005))
  (goto (label compound-apply-compiled))
compiled-branch200308202146008
  (assign continue (label after-call200308202146005))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146006
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146009
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146005
  (assign argl (op list) (reg val))
  (restore env)
  (comment get-value-code)
  (assign val (op lookup-variable-value) (const get-value-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146021))
compound-branch200308202146022
  (assign continue (label after-call200308202146020))
  (goto (label compound-apply-compiled))
compiled-branch200308202146023
  (assign continue (label after-call200308202146020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202146024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202146020
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146031))
compound-branch200308202146032
  (goto (label compound-apply-compiled))
compiled-branch200308202146033
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146031
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202146034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202146030
after-lambda200308202145550
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment definition-value)
  (assign proc (op lookup-variable-value) (const definition-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145511))
compound-branch200308202145512
  (assign continue (label after-call200308202145510))
  (goto (label compound-apply-compiled))
compiled-branch200308202145513
  (assign continue (label after-call200308202145510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145510
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145516))
compound-branch200308202145517
  (assign continue (label after-call200308202145515))
  (goto (label compound-apply-compiled))
compiled-branch200308202145518
  (assign continue (label after-call200308202145515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145515
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment definition-variable)
  (assign proc (op lookup-variable-value) (const definition-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145541))
compound-branch200308202145542
  (assign continue (label after-call200308202145540))
  (goto (label compound-apply-compiled))
compiled-branch200308202145543
  (assign continue (label after-call200308202145540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145540
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202146064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202146063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202146061))
compound-branch200308202146062
  (goto (label compound-apply-compiled))
compiled-branch200308202146063
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202146061
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202146064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202146060
after-lambda200308202145500
  (comment (define (compile-definition exp target linkage) (let ((var (definition-variable exp)) (get-value-code (compile (definition-value exp) (quote val) (quote next)))) (end-with-linkage linkage (preserving (quote (env)) get-value-code (make-instruction-sequence (quote (env val)) (list target) (list (list (quote perform) (quote (op define-variable!)) (list (quote const) var) (quote (reg val)) (quote (reg env))) (list (quote assign) target (quote (const ok))))))))))
  (perform (op define-variable!) (const compile-definition) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (name) (gensym name)))
  (assign val (op make-compiled-procedure) (label entry200308202145341) (reg env))
  (goto (label after-lambda200308202145340))
  (comment (lambda (name) (gensym name)))
entry200308202145341
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (name)) (reg argl) (reg env))
  (comment gensym)
  (assign proc (op lookup-variable-value) (const gensym) (reg env))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145346))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145345))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145343))
compound-branch200308202145344
  (goto (label compound-apply-compiled))
compiled-branch200308202145345
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145343
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202145346
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202145342
after-lambda200308202145340
  (comment (define (make-label name) (gensym name)))
  (perform (op define-variable!) (const make-label) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
  (assign val (op make-compiled-procedure) (label entry200308202144501) (reg env))
  (goto (label after-lambda200308202144500))
  (comment (lambda (exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
entry200308202144501
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (t-branch f-branch after-if) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))))
  (assign proc (op make-compiled-procedure) (label entry200308202144511) (reg env))
  (goto (label after-lambda200308202144510))
  (comment (lambda (t-branch f-branch after-if) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))))
entry200308202144511
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (t-branch f-branch after-if)) (reg argl) (reg env))
  (comment (lambda (consequent-linkage) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))
  (assign proc (op make-compiled-procedure) (label entry200308202144531) (reg env))
  (goto (label after-lambda200308202144530))
  (comment (lambda (consequent-linkage) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))
entry200308202144531
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (consequent-linkage)) (reg argl) (reg env))
  (comment (lambda (p-code c-code a-code) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))
  (assign proc (op make-compiled-procedure) (label entry200308202144581) (reg env))
  (goto (label after-lambda200308202144580))
  (comment (lambda (p-code c-code a-code) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if))))
entry200308202144581
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (p-code c-code a-code)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (comment after-if)
  (assign val (op lookup-variable-value) (const after-if) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment a-code)
  (assign val (op lookup-variable-value) (const a-code) (reg env))
  (assign argl (op list) (reg val))
  (comment f-branch)
  (assign val (op lookup-variable-value) (const f-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144586))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144585))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144583))
compound-branch200308202144584
  (assign continue (label after-call200308202144582))
  (goto (label compound-apply-compiled))
compiled-branch200308202144585
  (assign continue (label after-call200308202144582))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144586
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144582
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment c-code)
  (assign val (op lookup-variable-value) (const c-code) (reg env))
  (assign argl (op list) (reg val))
  (comment t-branch)
  (assign val (op lookup-variable-value) (const t-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144591))
compound-branch200308202144592
  (assign continue (label after-call200308202144590))
  (goto (label compound-apply-compiled))
compiled-branch200308202144593
  (assign continue (label after-call200308202144590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144590
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145001))
compound-branch200308202145002
  (assign continue (label after-call200308202145000))
  (goto (label compound-apply-compiled))
compiled-branch200308202145003
  (assign continue (label after-call200308202145000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment f-branch)
  (assign val (op lookup-variable-value) (const f-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145011))
compound-branch200308202145012
  (assign continue (label after-call200308202145010))
  (goto (label compound-apply-compiled))
compiled-branch200308202145013
  (assign continue (label after-call200308202145010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145010
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145021))
compound-branch200308202145022
  (assign continue (label after-call200308202145020))
  (goto (label compound-apply-compiled))
compiled-branch200308202145023
  (assign continue (label after-call200308202145020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145020
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment (quote (op false?)))
  (assign val  (const (op false?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145031))
compound-branch200308202145032
  (assign continue (label after-call200308202145030))
  (goto (label compound-apply-compiled))
compiled-branch200308202145033
  (assign continue (label after-call200308202145030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145041))
compound-branch200308202145042
  (assign continue (label after-call200308202145040))
  (goto (label compound-apply-compiled))
compiled-branch200308202145043
  (assign continue (label after-call200308202145040))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145041
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145040
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145049))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145048))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145046))
compound-branch200308202145047
  (assign continue (label after-call200308202145045))
  (goto (label compound-apply-compiled))
compiled-branch200308202145048
  (assign continue (label after-call200308202145045))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145046
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145049
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145045
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145061))
compound-branch200308202145062
  (assign continue (label after-call200308202145060))
  (goto (label compound-apply-compiled))
compiled-branch200308202145063
  (assign continue (label after-call200308202145060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202145064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202145060
  (assign argl (op list) (reg val))
  (restore env)
  (comment p-code)
  (assign val (op lookup-variable-value) (const p-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145091))
compound-branch200308202145092
  (goto (label compound-apply-compiled))
compiled-branch200308202145093
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145091
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202145094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202145090
after-lambda200308202144580
  (save continue)
  (save proc)
  (save env)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-alternative)
  (assign proc (op lookup-variable-value) (const if-alternative) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144536))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144535))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144533))
compound-branch200308202144534
  (assign continue (label after-call200308202144532))
  (goto (label compound-apply-compiled))
compiled-branch200308202144535
  (assign continue (label after-call200308202144532))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144533
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144536
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144532
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021445311))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021445310))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144538))
compound-branch200308202144539
  (assign continue (label after-call200308202144537))
  (goto (label compound-apply-compiled))
compiled-branch2003082021445310
  (assign continue (label after-call200308202144537))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144538
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021445311
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144537
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment consequent-linkage)
  (assign val (op lookup-variable-value) (const consequent-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-consequent)
  (assign proc (op lookup-variable-value) (const if-consequent) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144551))
compound-branch200308202144552
  (assign continue (label after-call200308202144550))
  (goto (label compound-apply-compiled))
compiled-branch200308202144553
  (assign continue (label after-call200308202144550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144550
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144556))
compound-branch200308202144557
  (assign continue (label after-call200308202144555))
  (goto (label compound-apply-compiled))
compiled-branch200308202144558
  (assign continue (label after-call200308202144555))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144556
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144555
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment if-predicate)
  (assign proc (op lookup-variable-value) (const if-predicate) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144561))
compound-branch200308202144562
  (assign continue (label after-call200308202144560))
  (goto (label compound-apply-compiled))
compiled-branch200308202144563
  (assign continue (label after-call200308202144560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144560
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144571))
compound-branch200308202144572
  (assign continue (label after-call200308202144570))
  (goto (label compound-apply-compiled))
compiled-branch200308202144573
  (assign continue (label after-call200308202144570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144570
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145111))
compound-branch200308202145112
  (goto (label compound-apply-compiled))
compiled-branch200308202145113
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145111
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202145114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202145110
after-lambda200308202144530
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144516))
compound-branch200308202144517
  (assign continue (label after-call200308202144515))
  (goto (label compound-apply-compiled))
compiled-branch200308202144518
  (assign continue (label after-call200308202144515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144515
  (restore env)
  (comment (if (eq? linkage (quote next)) after-if linkage))
  (test (op false?) (reg val))
  (branch (label false-branch200308202144513))
true-branch200308202144514
  (comment after-if)
  (assign val (op lookup-variable-value) (const after-if) (reg env))
  (goto (label after-if200308202144512))
false-branch200308202144513
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if200308202144512
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145141))
compound-branch200308202145142
  (goto (label compound-apply-compiled))
compiled-branch200308202145143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202145144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202145140
after-lambda200308202144510
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-if))
  (assign val  (const after-if))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144506))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144505))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144503))
compound-branch200308202144504
  (assign continue (label after-call200308202144502))
  (goto (label compound-apply-compiled))
compiled-branch200308202144505
  (assign continue (label after-call200308202144502))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144503
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144506
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144502
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote false-branch))
  (assign val  (const false-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021445011))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021445010))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144508))
compound-branch200308202144509
  (assign continue (label after-call200308202144507))
  (goto (label compound-apply-compiled))
compiled-branch2003082021445010
  (assign continue (label after-call200308202144507))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144508
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021445011
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144507
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote true-branch))
  (assign val  (const true-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021445016))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021445015))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021445013))
compound-branch2003082021445014
  (assign continue (label after-call2003082021445012))
  (goto (label compound-apply-compiled))
compiled-branch2003082021445015
  (assign continue (label after-call2003082021445012))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021445013
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021445016
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021445012
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202145174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202145173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202145171))
compound-branch200308202145172
  (goto (label compound-apply-compiled))
compiled-branch200308202145173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202145171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202145174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202145170
after-lambda200308202144500
  (comment (define (compile-if exp target linkage) (let ((t-branch (make-label (quote true-branch))) (f-branch (make-label (quote false-branch))) (after-if (make-label (quote after-if)))) (let ((consequent-linkage (if (eq? linkage (quote next)) after-if linkage))) (let ((p-code (compile (if-predicate exp) (quote val) (quote next))) (c-code (compile (if-consequent exp) target consequent-linkage)) (a-code (compile (if-alternative exp) target linkage))) (preserving (quote (env continue)) p-code (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (list (quote test) (quote (op false?)) (quote (reg val))) (list (quote branch) (list (quote label) f-branch)))) (parallel-instruction-sequences (append-instruction-sequences t-branch c-code) (append-instruction-sequences f-branch a-code)) after-if)))))))
  (perform (op define-variable!) (const compile-if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
  (assign val (op make-compiled-procedure) (label entry200308202144301) (reg env))
  (goto (label after-lambda200308202144300))
  (comment (lambda (seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
entry200308202144301
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144381))
compound-branch200308202144382
  (assign continue (label after-call200308202144380))
  (goto (label compound-apply-compiled))
compiled-branch200308202144383
  (assign continue (label after-call200308202144380))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144381
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144380
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202144303))
true-branch200308202144304
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save continue)
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144371))
compound-branch200308202144372
  (assign continue (label after-call200308202144370))
  (goto (label compound-apply-compiled))
compiled-branch200308202144373
  (assign continue (label after-call200308202144370))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144371
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144370
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144379))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144378))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144376))
compound-branch200308202144377
  (goto (label compound-apply-compiled))
compiled-branch200308202144378
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144376
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202144379
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202144375
false-branch200308202144303
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (save proc)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144311))
compound-branch200308202144312
  (assign continue (label after-call200308202144310))
  (goto (label compound-apply-compiled))
compiled-branch200308202144313
  (assign continue (label after-call200308202144310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144310
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144321))
compound-branch200308202144322
  (assign continue (label after-call200308202144320))
  (goto (label compound-apply-compiled))
compiled-branch200308202144323
  (assign continue (label after-call200308202144320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144320
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144329))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144328))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144326))
compound-branch200308202144327
  (assign continue (label after-call200308202144325))
  (goto (label compound-apply-compiled))
compiled-branch200308202144328
  (assign continue (label after-call200308202144325))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144326
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144329
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144325
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144331))
compound-branch200308202144332
  (assign continue (label after-call200308202144330))
  (goto (label compound-apply-compiled))
compiled-branch200308202144333
  (assign continue (label after-call200308202144330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144351))
compound-branch200308202144352
  (goto (label compound-apply-compiled))
compiled-branch200308202144353
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144351
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202144354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202144350
after-if200308202144302
after-lambda200308202144300
  (comment (define (compile-sequence seq target linkage) (if (last-exp? seq) (compile (first-exp seq) target linkage) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (compile-sequence (rest-exps seq) target linkage)))))
  (perform (op define-variable!) (const compile-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label)))) (compile-and-sequence (rest-exps seq) target linkage label))))))
  (assign val (op make-compiled-procedure) (label entry200308202144051) (reg env))
  (goto (label after-lambda200308202144050))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label)))) (compile-and-sequence (rest-exps seq) target linkage label))))))
entry200308202144051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage label)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144194))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144191))
compound-branch200308202144192
  (assign continue (label after-call200308202144190))
  (goto (label compound-apply-compiled))
compiled-branch200308202144193
  (assign continue (label after-call200308202144190))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144191
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144194
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144190
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label)))) (compile-and-sequence (rest-exps seq) target linkage label)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202144053))
true-branch200308202144054
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144161))
compound-branch200308202144162
  (assign continue (label after-call200308202144160))
  (goto (label compound-apply-compiled))
compiled-branch200308202144163
  (assign continue (label after-call200308202144160))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144161
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144160
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144171))
compound-branch200308202144172
  (assign continue (label after-call200308202144170))
  (goto (label compound-apply-compiled))
compiled-branch200308202144173
  (assign continue (label after-call200308202144170))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144171
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144170
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144179))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144178))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144176))
compound-branch200308202144177
  (goto (label compound-apply-compiled))
compiled-branch200308202144178
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144176
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202144179
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202144175
false-branch200308202144053
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-and-sequence)
  (assign proc (op lookup-variable-value) (const compile-and-sequence) (reg env))
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144061))
compound-branch200308202144062
  (assign continue (label after-call200308202144060))
  (goto (label compound-apply-compiled))
compiled-branch200308202144063
  (assign continue (label after-call200308202144060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144060
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144066))
compound-branch200308202144067
  (assign continue (label after-call200308202144065))
  (goto (label compound-apply-compiled))
compiled-branch200308202144068
  (assign continue (label after-call200308202144065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144065
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144071))
compound-branch200308202144072
  (assign continue (label after-call200308202144070))
  (goto (label compound-apply-compiled))
compiled-branch200308202144073
  (assign continue (label after-call200308202144070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144070
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144091))
compound-branch200308202144092
  (assign continue (label after-call200308202144090))
  (goto (label compound-apply-compiled))
compiled-branch200308202144093
  (assign continue (label after-call200308202144090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144090
  (assign argl (op list) (reg val))
  (comment (quote (test (op false?) (reg val))))
  (assign val  (const (test (op false?) (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144099))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144098))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144096))
compound-branch200308202144097
  (assign continue (label after-call200308202144095))
  (goto (label compound-apply-compiled))
compiled-branch200308202144098
  (assign continue (label after-call200308202144095))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144096
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144099
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144095
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144101))
compound-branch200308202144102
  (assign continue (label after-call200308202144100))
  (goto (label compound-apply-compiled))
compiled-branch200308202144103
  (assign continue (label after-call200308202144100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144100
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144111))
compound-branch200308202144112
  (assign continue (label after-call200308202144110))
  (goto (label compound-apply-compiled))
compiled-branch200308202144113
  (assign continue (label after-call200308202144110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144110
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144121))
compound-branch200308202144122
  (assign continue (label after-call200308202144120))
  (goto (label compound-apply-compiled))
compiled-branch200308202144123
  (assign continue (label after-call200308202144120))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144121
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144120
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144134))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144133))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144131))
compound-branch200308202144132
  (assign continue (label after-call200308202144130))
  (goto (label compound-apply-compiled))
compiled-branch200308202144133
  (assign continue (label after-call200308202144130))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144131
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202144134
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202144130
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202144144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202144143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202144141))
compound-branch200308202144142
  (goto (label compound-apply-compiled))
compiled-branch200308202144143
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202144141
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202144144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202144140
after-if200308202144052
after-lambda200308202144050
  (comment (define (compile-and-sequence seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op false?) (reg val))) (list (quote branch) (list (quote label) label)))) (compile-and-sequence (rest-exps seq) target linkage label))))))
  (perform (op define-variable!) (const compile-and-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found))))))
  (assign val (op make-compiled-procedure) (label entry200308202143411) (reg env))
  (goto (label after-lambda200308202143410))
  (comment (lambda (seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found))))))
entry200308202143411
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (comment (lambda (false-found) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found)))))
  (assign proc (op make-compiled-procedure) (label entry200308202143511) (reg env))
  (goto (label after-lambda200308202143510))
  (comment (lambda (false-found) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found)))))
entry200308202143511
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (false-found)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (save env)
  (comment no-expressions?)
  (assign proc (op lookup-variable-value) (const no-expressions?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143541))
compound-branch200308202143542
  (assign continue (label after-call200308202143540))
  (goto (label compound-apply-compiled))
compiled-branch200308202143543
  (assign continue (label after-call200308202143540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143540
  (restore env)
  (comment (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202143513))
true-branch200308202143514
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign val  (const (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign argl (op list) (reg val))
  (comment (quote (assign exp (const true))))
  (assign val  (const (assign exp (const true))))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021435114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021435113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021435111))
compound-branch2003082021435112
  (assign continue (label after-call2003082021435110))
  (goto (label compound-apply-compiled))
compiled-branch2003082021435113
  (assign continue (label after-call2003082021435110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021435111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021435114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021435110
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143521))
compound-branch200308202143522
  (assign continue (label after-if200308202143512))
  (goto (label compound-apply-compiled))
compiled-branch200308202143523
  (assign continue (label after-if200308202143512))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143521
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (label after-if200308202143512))
primitive-branch200308202143524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (label after-if200308202143512))
after-call200308202143520
false-branch200308202143513
  (comment compile-and-sequence)
  (assign proc (op lookup-variable-value) (const compile-and-sequence) (reg env))
  (comment false-found)
  (assign val (op lookup-variable-value) (const false-found) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143516))
compound-branch200308202143517
  (assign continue (label after-call200308202143515))
  (goto (label compound-apply-compiled))
compiled-branch200308202143518
  (assign continue (label after-call200308202143515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143515
after-if200308202143512
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143551))
compound-branch200308202143552
  (goto (label compound-apply-compiled))
compiled-branch200308202143553
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143551
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143550
after-lambda200308202143510
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote and-false-found))
  (assign val  (const and-false-found))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143416))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143415))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143413))
compound-branch200308202143414
  (assign continue (label after-call200308202143412))
  (goto (label compound-apply-compiled))
compiled-branch200308202143415
  (assign continue (label after-call200308202143412))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143413
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143416
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143412
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143571))
compound-branch200308202143572
  (goto (label compound-apply-compiled))
compiled-branch200308202143573
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143571
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143570
after-lambda200308202143410
  (comment (define (compile-and seq target linkage) (let ((false-found (make-label (quote and-false-found)))) (end-with-linkage linkage (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const true))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-and-sequence seq target linkage false-found))))))
  (perform (op define-variable!) (const compile-and) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))))) (compile-or-sequence (rest-exps seq) target linkage label)))))
  (assign val (op make-compiled-procedure) (label entry200308202143191) (reg env))
  (goto (label after-lambda200308202143190))
  (comment (lambda (seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))))) (compile-or-sequence (rest-exps seq) target linkage label)))))
entry200308202143191
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage label)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143316))
compound-branch200308202143317
  (assign continue (label after-call200308202143315))
  (goto (label compound-apply-compiled))
compiled-branch200308202143318
  (assign continue (label after-call200308202143315))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143315
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))))) (compile-or-sequence (rest-exps seq) target linkage label))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202143193))
true-branch200308202143194
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143291))
compound-branch200308202143292
  (assign continue (label after-call200308202143290))
  (goto (label compound-apply-compiled))
compiled-branch200308202143293
  (assign continue (label after-call200308202143290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143290
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143299))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143298))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143296))
compound-branch200308202143297
  (assign continue (label after-call200308202143295))
  (goto (label compound-apply-compiled))
compiled-branch200308202143298
  (assign continue (label after-call200308202143295))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143296
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143299
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143295
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143311))
compound-branch200308202143312
  (goto (label compound-apply-compiled))
compiled-branch200308202143313
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143311
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143310
false-branch200308202143193
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-or-sequence)
  (assign proc (op lookup-variable-value) (const compile-or-sequence) (reg env))
  (save proc)
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143199))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143198))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143196))
compound-branch200308202143197
  (assign continue (label after-call200308202143195))
  (goto (label compound-apply-compiled))
compiled-branch200308202143198
  (assign continue (label after-call200308202143195))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143196
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143199
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143195
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021431914))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021431913))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021431911))
compound-branch2003082021431912
  (assign continue (label after-call2003082021431910))
  (goto (label compound-apply-compiled))
compiled-branch2003082021431913
  (assign continue (label after-call2003082021431910))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021431911
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021431914
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021431910
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment label)
  (assign val (op lookup-variable-value) (const label) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143201))
compound-branch200308202143202
  (assign continue (label after-call200308202143200))
  (goto (label compound-apply-compiled))
compiled-branch200308202143203
  (assign continue (label after-call200308202143200))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143201
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143200
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143211))
compound-branch200308202143212
  (assign continue (label after-call200308202143210))
  (goto (label compound-apply-compiled))
compiled-branch200308202143213
  (assign continue (label after-call200308202143210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143210
  (assign argl (op list) (reg val))
  (comment (quote (test (op true?) (reg val))))
  (assign val  (const (test (op true?) (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143224))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143223))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143221))
compound-branch200308202143222
  (assign continue (label after-call200308202143220))
  (goto (label compound-apply-compiled))
compiled-branch200308202143223
  (assign continue (label after-call200308202143220))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143221
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143224
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143220
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143231))
compound-branch200308202143232
  (assign continue (label after-call200308202143230))
  (goto (label compound-apply-compiled))
compiled-branch200308202143233
  (assign continue (label after-call200308202143230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143230
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143241))
compound-branch200308202143242
  (assign continue (label after-call200308202143240))
  (goto (label compound-apply-compiled))
compiled-branch200308202143243
  (assign continue (label after-call200308202143240))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143241
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143240
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143251))
compound-branch200308202143252
  (assign continue (label after-call200308202143250))
  (goto (label compound-apply-compiled))
compiled-branch200308202143253
  (assign continue (label after-call200308202143250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143250
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143259))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143258))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143256))
compound-branch200308202143257
  (assign continue (label after-call200308202143255))
  (goto (label compound-apply-compiled))
compiled-branch200308202143258
  (assign continue (label after-call200308202143255))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143256
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143259
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143255
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143261))
compound-branch200308202143262
  (goto (label compound-apply-compiled))
compiled-branch200308202143263
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143261
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143260
after-if200308202143192
after-lambda200308202143190
  (comment (define (compile-or-sequence seq target linkage label) (if (last-exp? seq) (append-instruction-sequences (compile (first-exp seq) target (quote next)) label) (preserving (quote (env continue)) (compile (first-exp seq) target (quote next)) (append-instruction-sequences (make-instruction-sequence (quote (val)) (quote ()) (list (quote (test (op true?) (reg val))) (list (quote branch) (list (quote label) label))))) (compile-or-sequence (rest-exps seq) target linkage label)))))
  (perform (op define-variable!) (const compile-or-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found)))))
  (assign val (op make-compiled-procedure) (label entry200308202143031) (reg env))
  (goto (label after-lambda200308202143030))
  (comment (lambda (seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found)))))
entry200308202143031
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq target linkage)) (reg argl) (reg env))
  (comment (lambda (true-found) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found))))
  (assign proc (op make-compiled-procedure) (label entry200308202143051) (reg env))
  (goto (label after-lambda200308202143050))
  (comment (lambda (true-found) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found))))
entry200308202143051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (true-found)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment no-expressions?)
  (assign proc (op lookup-variable-value) (const no-expressions?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143081))
compound-branch200308202143082
  (assign continue (label after-call200308202143080))
  (goto (label compound-apply-compiled))
compiled-branch200308202143083
  (assign continue (label after-call200308202143080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143080
  (restore env)
  (restore continue)
  (comment (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202143053))
true-branch200308202143054
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign val  (const (assign val (op lookup-variable-value) (reg exp) (reg env))))
  (assign argl (op list) (reg val))
  (comment (quote (assign exp (const false))))
  (assign val  (const (assign exp (const false))))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143066))
compound-branch200308202143067
  (assign continue (label after-call200308202143065))
  (goto (label compound-apply-compiled))
compiled-branch200308202143068
  (assign continue (label after-call200308202143065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143065
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143071))
compound-branch200308202143072
  (goto (label compound-apply-compiled))
compiled-branch200308202143073
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143071
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143070
false-branch200308202143053
  (comment compile-or-sequence)
  (assign proc (op lookup-variable-value) (const compile-or-sequence) (reg env))
  (comment true-found)
  (assign val (op lookup-variable-value) (const true-found) (reg env))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143061))
compound-branch200308202143062
  (goto (label compound-apply-compiled))
compiled-branch200308202143063
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143061
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143060
after-if200308202143052
after-lambda200308202143050
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote or-true-found))
  (assign val  (const or-true-found))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143036))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143035))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143033))
compound-branch200308202143034
  (assign continue (label after-call200308202143032))
  (goto (label compound-apply-compiled))
compiled-branch200308202143035
  (assign continue (label after-call200308202143032))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143033
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202143036
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202143032
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202143094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202143093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202143091))
compound-branch200308202143092
  (goto (label compound-apply-compiled))
compiled-branch200308202143093
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202143091
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202143094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202143090
after-lambda200308202143030
  (comment (define (compile-or seq target linkage) (let ((true-found (make-label (quote or-true-found)))) (if (no-expressions? seq) (make-instruction-sequence (quote (val)) (quote ()) (list (quote (assign exp (const false))) (quote (assign val (op lookup-variable-value) (reg exp) (reg env))))) (compile-or-sequence seq target linkage true-found)))))
  (perform (op define-variable!) (const compile-or) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda)))))
  (assign val (op make-compiled-procedure) (label entry200308202142381) (reg env))
  (goto (label after-lambda200308202142380))
  (comment (lambda (exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda)))))
entry200308202142381
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (proc-entry after-lambda) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda))))
  (assign proc (op make-compiled-procedure) (label entry2003082021423911) (reg env))
  (goto (label after-lambda2003082021423910))
  (comment (lambda (proc-entry after-lambda) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda))))
entry2003082021423911
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-entry after-lambda)) (reg argl) (reg env))
  (comment (lambda (lambda-linkage) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda)))
  (assign proc (op make-compiled-procedure) (label entry200308202142411) (reg env))
  (goto (label after-lambda200308202142410))
  (comment (lambda (lambda-linkage) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda)))
entry200308202142411
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (lambda-linkage)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment after-lambda)
  (assign val (op lookup-variable-value) (const after-lambda) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment tack-on-instruction-sequence)
  (assign proc (op lookup-variable-value) (const tack-on-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment compile-lambda-body)
  (assign proc (op lookup-variable-value) (const compile-lambda-body) (reg env))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142416))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142415))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142413))
compound-branch200308202142414
  (assign continue (label after-call200308202142412))
  (goto (label compound-apply-compiled))
compiled-branch200308202142415
  (assign continue (label after-call200308202142412))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142413
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142416
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142412
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142421))
compound-branch200308202142422
  (assign continue (label after-call200308202142420))
  (goto (label compound-apply-compiled))
compiled-branch200308202142423
  (assign continue (label after-call200308202142420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142420
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment (quote (op make-compiled-procedure)))
  (assign val  (const (op make-compiled-procedure)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142431))
compound-branch200308202142432
  (assign continue (label after-call200308202142430))
  (goto (label compound-apply-compiled))
compiled-branch200308202142433
  (assign continue (label after-call200308202142430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142430
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142441))
compound-branch200308202142442
  (assign continue (label after-call200308202142440))
  (goto (label compound-apply-compiled))
compiled-branch200308202142443
  (assign continue (label after-call200308202142440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142440
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142449))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142448))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142446))
compound-branch200308202142447
  (assign continue (label after-call200308202142445))
  (goto (label compound-apply-compiled))
compiled-branch200308202142448
  (assign continue (label after-call200308202142445))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142446
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142449
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142445
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142451))
compound-branch200308202142452
  (assign continue (label after-call200308202142450))
  (goto (label compound-apply-compiled))
compiled-branch200308202142453
  (assign continue (label after-call200308202142450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142450
  (assign argl (op list) (reg val))
  (restore env)
  (comment lambda-linkage)
  (assign val (op lookup-variable-value) (const lambda-linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142461))
compound-branch200308202142462
  (assign continue (label after-call200308202142460))
  (goto (label compound-apply-compiled))
compiled-branch200308202142463
  (assign continue (label after-call200308202142460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142460
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142481))
compound-branch200308202142482
  (assign continue (label after-call200308202142480))
  (goto (label compound-apply-compiled))
compiled-branch200308202142483
  (assign continue (label after-call200308202142480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142480
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142491))
compound-branch200308202142492
  (goto (label compound-apply-compiled))
compiled-branch200308202142493
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142491
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142490
after-lambda200308202142410
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021423919))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021423918))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021423916))
compound-branch2003082021423917
  (assign continue (label after-call2003082021423915))
  (goto (label compound-apply-compiled))
compiled-branch2003082021423918
  (assign continue (label after-call2003082021423915))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021423916
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021423919
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021423915
  (restore env)
  (comment (if (eq? linkage (quote next)) after-lambda linkage))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021423913))
true-branch2003082021423914
  (comment after-lambda)
  (assign val (op lookup-variable-value) (const after-lambda) (reg env))
  (goto (label after-if2003082021423912))
false-branch2003082021423913
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if2003082021423912
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142511))
compound-branch200308202142512
  (goto (label compound-apply-compiled))
compiled-branch200308202142513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142511
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142510
after-lambda2003082021423910
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-lambda))
  (assign val  (const after-lambda))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142391))
compound-branch200308202142392
  (assign continue (label after-call200308202142390))
  (goto (label compound-apply-compiled))
compiled-branch200308202142393
  (assign continue (label after-call200308202142390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142390
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote entry))
  (assign val  (const entry))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142399))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142398))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142396))
compound-branch200308202142397
  (assign continue (label after-call200308202142395))
  (goto (label compound-apply-compiled))
compiled-branch200308202142398
  (assign continue (label after-call200308202142395))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142396
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142399
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142395
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142531))
compound-branch200308202142532
  (goto (label compound-apply-compiled))
compiled-branch200308202142533
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142531
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142530
after-lambda200308202142380
  (comment (define (compile-lambda exp target linkage) (let ((proc-entry (make-label (quote entry))) (after-lambda (make-label (quote after-lambda)))) (let ((lambda-linkage (if (eq? linkage (quote next)) after-lambda linkage))) (append-instruction-sequences (tack-on-instruction-sequence (end-with-linkage lambda-linkage (make-instruction-sequence (quote (env)) (list target) (list (list (quote assign) target (quote (op make-compiled-procedure)) (list (quote label) proc-entry) (quote (reg env)))))) (compile-lambda-body exp proc-entry)) after-lambda)))))
  (perform (op define-variable!) (const compile-lambda) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env))))) (compile-sequence body (quote val) (quote return))))))
  (assign val (op make-compiled-procedure) (label entry200308202142201) (reg env))
  (goto (label after-lambda200308202142200))
  (comment (lambda (exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env))))) (compile-sequence body (quote val) (quote return))))))
entry200308202142201
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp proc-entry)) (reg argl) (reg env))
  (comment (lambda (formals body) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env))))) (compile-sequence body (quote val) (quote return)))))
  (assign proc (op make-compiled-procedure) (label entry200308202142221) (reg env))
  (goto (label after-lambda200308202142220))
  (comment (lambda (formals body) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env))))) (compile-sequence body (quote val) (quote return)))))
entry200308202142221
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (formals body)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment compile-sequence)
  (assign proc (op lookup-variable-value) (const compile-sequence) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142226))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142225))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142223))
compound-branch200308202142224
  (assign continue (label after-call200308202142222))
  (goto (label compound-apply-compiled))
compiled-branch200308202142225
  (assign continue (label after-call200308202142222))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142223
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142226
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142222
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (reg env)))
  (assign val  (const (reg env)))
  (assign argl (op list) (reg val))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment formals)
  (assign val (op lookup-variable-value) (const formals) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote const))
  (assign val  (const const))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142234))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142231))
compound-branch200308202142232
  (assign continue (label after-call200308202142230))
  (goto (label compound-apply-compiled))
compiled-branch200308202142233
  (assign continue (label after-call200308202142230))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142231
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142234
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142230
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op extend-environment)))
  (assign val  (const (op extend-environment)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote env))
  (assign val  (const env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142241))
compound-branch200308202142242
  (assign continue (label after-call200308202142240))
  (goto (label compound-apply-compiled))
compiled-branch200308202142243
  (assign continue (label after-call200308202142240))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142241
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142240
  (assign argl (op list) (reg val))
  (restore env)
  (comment (quote (assign env (op compiled-procedure-env) (reg proc))))
  (assign val  (const (assign env (op compiled-procedure-env) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment proc-entry)
  (assign val (op lookup-variable-value) (const proc-entry) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142251))
compound-branch200308202142252
  (assign continue (label after-call200308202142250))
  (goto (label compound-apply-compiled))
compiled-branch200308202142253
  (assign continue (label after-call200308202142250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142250
  (assign argl (op list) (reg val))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env proc argl)))
  (assign val  (const (env proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142261))
compound-branch200308202142262
  (assign continue (label after-call200308202142260))
  (goto (label compound-apply-compiled))
compiled-branch200308202142263
  (assign continue (label after-call200308202142260))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142261
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142260
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142271))
compound-branch200308202142272
  (goto (label compound-apply-compiled))
compiled-branch200308202142273
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142271
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142270
after-lambda200308202142220
  (save continue)
  (save proc)
  (save env)
  (comment scan-out-defines)
  (assign proc (op lookup-variable-value) (const scan-out-defines) (reg env))
  (save proc)
  (comment lambda-body)
  (assign proc (op lookup-variable-value) (const lambda-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142206))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142205))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142203))
compound-branch200308202142204
  (assign continue (label after-call200308202142202))
  (goto (label compound-apply-compiled))
compiled-branch200308202142205
  (assign continue (label after-call200308202142202))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142203
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142206
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142202
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142211))
compound-branch200308202142212
  (assign continue (label after-call200308202142210))
  (goto (label compound-apply-compiled))
compiled-branch200308202142213
  (assign continue (label after-call200308202142210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142210
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment lambda-parameters)
  (assign proc (op lookup-variable-value) (const lambda-parameters) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142219))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142218))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142216))
compound-branch200308202142217
  (assign continue (label after-call200308202142215))
  (goto (label compound-apply-compiled))
compiled-branch200308202142218
  (assign continue (label after-call200308202142215))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142216
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142219
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142215
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142291))
compound-branch200308202142292
  (goto (label compound-apply-compiled))
compiled-branch200308202142293
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142291
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142290
after-lambda200308202142200
  (comment (define (compile-lambda-body exp proc-entry) (let ((formals (lambda-parameters exp)) (body (scan-out-defines (lambda-body exp)))) (append-instruction-sequences (make-instruction-sequence (quote (env proc argl)) (quote (env)) (list proc-entry (quote (assign env (op compiled-procedure-env) (reg proc))) (list (quote assign) (quote env) (quote (op extend-environment)) (list (quote const) formals) (quote (reg argl)) (quote (reg env))))) (compile-sequence body (quote val) (quote return))))))
  (perform (op define-variable!) (const compile-lambda-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
  (assign val (op make-compiled-procedure) (label entry200308202142021) (reg env))
  (goto (label after-lambda200308202142020))
  (comment (lambda (exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
entry200308202142021
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp target linkage)) (reg argl) (reg env))
  (comment (lambda (proc-code operand-codes) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage)))))
  (assign proc (op make-compiled-procedure) (label entry200308202142081) (reg env))
  (goto (label after-lambda200308202142080))
  (comment (lambda (proc-code operand-codes) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage)))))
entry200308202142081
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-code operand-codes)) (reg argl) (reg env))
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment compile-procedure-call)
  (assign proc (op lookup-variable-value) (const compile-procedure-call) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142086))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142085))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142083))
compound-branch200308202142084
  (assign continue (label after-call200308202142082))
  (goto (label compound-apply-compiled))
compiled-branch200308202142085
  (assign continue (label after-call200308202142082))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142083
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142086
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142082
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment construct-arglist)
  (assign proc (op lookup-variable-value) (const construct-arglist) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021420811))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021420810))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142088))
compound-branch200308202142089
  (assign continue (label after-call200308202142087))
  (goto (label compound-apply-compiled))
compiled-branch2003082021420810
  (assign continue (label after-call200308202142087))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142088
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021420811
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142087
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142091))
compound-branch200308202142092
  (assign continue (label after-call200308202142090))
  (goto (label compound-apply-compiled))
compiled-branch200308202142093
  (assign continue (label after-call200308202142090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142090
  (assign argl (op list) (reg val))
  (restore env)
  (comment proc-code)
  (assign val (op lookup-variable-value) (const proc-code) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env continue)))
  (assign val  (const (env continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142101))
compound-branch200308202142102
  (goto (label compound-apply-compiled))
compiled-branch200308202142103
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142101
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142100
after-lambda200308202142080
  (save continue)
  (save proc)
  (save env)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (save proc)
  (save env)
  (comment operands)
  (assign proc (op lookup-variable-value) (const operands) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142031))
compound-branch200308202142032
  (assign continue (label after-call200308202142030))
  (goto (label compound-apply-compiled))
compiled-branch200308202142033
  (assign continue (label after-call200308202142030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142030
  (assign argl (op list) (reg val))
  (restore env)
  (comment (lambda (operand) (compile operand (quote val) (quote next))))
  (assign val (op make-compiled-procedure) (label entry200308202142051) (reg env))
  (goto (label after-lambda200308202142050))
  (comment (lambda (operand) (compile operand (quote val) (quote next))))
entry200308202142051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand)) (reg argl) (reg env))
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op cons) (reg val) (reg argl))
  (comment operand)
  (assign val (op lookup-variable-value) (const operand) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142056))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142055))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142053))
compound-branch200308202142054
  (goto (label compound-apply-compiled))
compiled-branch200308202142055
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142056
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142052
after-lambda200308202142050
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021420511))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021420510))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142058))
compound-branch200308202142059
  (assign continue (label after-call200308202142057))
  (goto (label compound-apply-compiled))
compiled-branch2003082021420510
  (assign continue (label after-call200308202142057))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142058
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021420511
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142057
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment compile)
  (assign proc (op lookup-variable-value) (const compile) (reg env))
  (save proc)
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment (quote proc))
  (assign val  (const proc))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment operator)
  (assign proc (op lookup-variable-value) (const operator) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142071))
compound-branch200308202142072
  (assign continue (label after-call200308202142070))
  (goto (label compound-apply-compiled))
compiled-branch200308202142073
  (assign continue (label after-call200308202142070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142079))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142078))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142076))
compound-branch200308202142077
  (assign continue (label after-call200308202142075))
  (goto (label compound-apply-compiled))
compiled-branch200308202142078
  (assign continue (label after-call200308202142075))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142076
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202142079
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202142075
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202142124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202142123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202142121))
compound-branch200308202142122
  (goto (label compound-apply-compiled))
compiled-branch200308202142123
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202142121
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202142124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202142120
after-lambda200308202142020
  (comment (define (compile-application exp target linkage) (let ((proc-code (compile (operator exp) (quote proc) (quote next))) (operand-codes (map (lambda (operand) (compile operand (quote val) (quote next))) (operands exp)))) (preserving (quote (env continue)) proc-code (preserving (quote (proc continue)) (construct-arglist operand-codes) (compile-procedure-call target linkage))))))
  (perform (op define-variable!) (const compile-application) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
  (assign val (op make-compiled-procedure) (label entry200308202141441) (reg env))
  (goto (label after-lambda200308202141440))
  (comment (lambda (operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
entry200308202141441
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (comment (lambda (operand-codes) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))))
  (assign proc (op make-compiled-procedure) (label entry200308202141456) (reg env))
  (goto (label after-lambda200308202141455))
  (comment (lambda (operand-codes) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))))
entry200308202141456
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141531))
compound-branch200308202141532
  (assign continue (label after-call200308202141530))
  (goto (label compound-apply-compiled))
compiled-branch200308202141533
  (assign continue (label after-call200308202141530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141530
  (restore env)
  (restore continue)
  (comment (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202141458))
true-branch200308202141459
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((assign argl (const ())))))
  (assign val  (const ((assign argl (const ())))))
  (assign argl (op list) (reg val))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141529))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141528))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141526))
compound-branch200308202141527
  (goto (label compound-apply-compiled))
compiled-branch200308202141528
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141526
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141529
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141525
false-branch200308202141458
  (comment (lambda (code-to-get-last-arg) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))
  (assign proc (op make-compiled-procedure) (label entry200308202141471) (reg env))
  (goto (label after-lambda200308202141470))
  (comment (lambda (code-to-get-last-arg) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes))))))
entry200308202141471
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (code-to-get-last-arg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141491))
compound-branch200308202141492
  (assign continue (label after-call200308202141490))
  (goto (label compound-apply-compiled))
compiled-branch200308202141493
  (assign continue (label after-call200308202141490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141490
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141501))
compound-branch200308202141502
  (assign continue (label after-call200308202141500))
  (goto (label compound-apply-compiled))
compiled-branch200308202141503
  (assign continue (label after-call200308202141500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141500
  (restore env)
  (restore continue)
  (comment (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202141473))
true-branch200308202141474
  (comment code-to-get-last-arg)
  (assign val (op lookup-variable-value) (const code-to-get-last-arg) (reg env))
  (goto (reg continue))
false-branch200308202141473
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment code-to-get-rest-args)
  (assign proc (op lookup-variable-value) (const code-to-get-rest-args) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141479))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141478))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141476))
compound-branch200308202141477
  (assign continue (label after-call200308202141475))
  (goto (label compound-apply-compiled))
compiled-branch200308202141478
  (assign continue (label after-call200308202141475))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141476
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141479
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141475
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141481))
compound-branch200308202141482
  (assign continue (label after-call200308202141480))
  (goto (label compound-apply-compiled))
compiled-branch200308202141483
  (assign continue (label after-call200308202141480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141480
  (assign argl (op list) (reg val))
  (restore env)
  (comment code-to-get-last-arg)
  (assign val (op lookup-variable-value) (const code-to-get-last-arg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141486))
compound-branch200308202141487
  (goto (label compound-apply-compiled))
compiled-branch200308202141488
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141486
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141485
after-if200308202141472
after-lambda200308202141470
  (save continue)
  (save proc)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((assign argl (op list) (reg val)))))
  (assign val  (const ((assign argl (op list) (reg val)))))
  (assign argl (op list) (reg val))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val)))
  (assign val  (const (val)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021414514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021414513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021414511))
compound-branch2003082021414512
  (assign continue (label after-call2003082021414510))
  (goto (label compound-apply-compiled))
compiled-branch2003082021414513
  (assign continue (label after-call2003082021414510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021414511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021414514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021414510
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141461))
compound-branch200308202141462
  (assign continue (label after-call200308202141460))
  (goto (label compound-apply-compiled))
compiled-branch200308202141463
  (assign continue (label after-call200308202141460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141460
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141469))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141468))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141466))
compound-branch200308202141467
  (assign continue (label after-call200308202141465))
  (goto (label compound-apply-compiled))
compiled-branch200308202141468
  (assign continue (label after-call200308202141465))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141466
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141469
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141465
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141521))
compound-branch200308202141522
  (goto (label compound-apply-compiled))
compiled-branch200308202141523
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141521
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141520
after-if200308202141457
after-lambda200308202141455
  (save continue)
  (save proc)
  (comment reverse)
  (assign proc (op lookup-variable-value) (const reverse) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141451))
compound-branch200308202141452
  (assign continue (label after-call200308202141450))
  (goto (label compound-apply-compiled))
compiled-branch200308202141453
  (assign continue (label after-call200308202141450))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141451
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141450
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141561))
compound-branch200308202141562
  (goto (label compound-apply-compiled))
compiled-branch200308202141563
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141561
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141560
after-lambda200308202141440
  (comment (define (construct-arglist operand-codes) (let ((operand-codes (reverse operand-codes))) (if (null? operand-codes) (make-instruction-sequence (quote ()) (quote (argl)) (quote ((assign argl (const ()))))) (let ((code-to-get-last-arg (append-instruction-sequences (car operand-codes) (make-instruction-sequence (quote (val)) (quote (argl)) (quote ((assign argl (op list) (reg val)))))))) (if (null? (cdr operand-codes)) code-to-get-last-arg (preserving (quote (env)) code-to-get-last-arg (code-to-get-rest-args (cdr operand-codes)))))))))
  (perform (op define-variable!) (const construct-arglist) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (assign val (op make-compiled-procedure) (label entry200308202141291) (reg env))
  (goto (label after-lambda200308202141290))
  (comment (lambda (operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
entry200308202141291
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (operand-codes)) (reg argl) (reg env))
  (comment (lambda (code-for-next-arg) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes))))))
  (assign proc (op make-compiled-procedure) (label entry200308202141326) (reg env))
  (goto (label after-lambda200308202141325))
  (comment (lambda (code-for-next-arg) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes))))))
entry200308202141326
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (code-for-next-arg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141354))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141353))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141351))
compound-branch200308202141352
  (assign continue (label after-call200308202141350))
  (goto (label compound-apply-compiled))
compiled-branch200308202141353
  (assign continue (label after-call200308202141350))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141351
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141354
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141350
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141361))
compound-branch200308202141362
  (assign continue (label after-call200308202141360))
  (goto (label compound-apply-compiled))
compiled-branch200308202141363
  (assign continue (label after-call200308202141360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141360
  (restore env)
  (restore continue)
  (comment (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202141328))
true-branch200308202141329
  (comment code-for-next-arg)
  (assign val (op lookup-variable-value) (const code-for-next-arg) (reg env))
  (goto (reg continue))
false-branch200308202141328
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment code-to-get-rest-args)
  (assign proc (op lookup-variable-value) (const code-to-get-rest-args) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021413214))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021413213))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021413211))
compound-branch2003082021413212
  (assign continue (label after-call2003082021413210))
  (goto (label compound-apply-compiled))
compiled-branch2003082021413213
  (assign continue (label after-call2003082021413210))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021413211
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021413214
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021413210
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141331))
compound-branch200308202141332
  (assign continue (label after-call200308202141330))
  (goto (label compound-apply-compiled))
compiled-branch200308202141333
  (assign continue (label after-call200308202141330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141330
  (assign argl (op list) (reg val))
  (restore env)
  (comment code-for-next-arg)
  (assign val (op lookup-variable-value) (const code-for-next-arg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (env)))
  (assign val  (const (env)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141341))
compound-branch200308202141342
  (goto (label compound-apply-compiled))
compiled-branch200308202141343
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141341
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141340
after-if200308202141327
after-lambda200308202141325
  (save continue)
  (save proc)
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((assign argl (op cons) (reg val) (reg argl)))))
  (assign val  (const ((assign argl (op cons) (reg val) (reg argl)))))
  (assign argl (op list) (reg val))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (val argl)))
  (assign val  (const (val argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141296))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141295))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141293))
compound-branch200308202141294
  (assign continue (label after-call200308202141292))
  (goto (label compound-apply-compiled))
compiled-branch200308202141295
  (assign continue (label after-call200308202141292))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141293
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141296
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141292
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment operand-codes)
  (assign val (op lookup-variable-value) (const operand-codes) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141311))
compound-branch200308202141312
  (assign continue (label after-call200308202141310))
  (goto (label compound-apply-compiled))
compiled-branch200308202141313
  (assign continue (label after-call200308202141310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141310
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (argl)))
  (assign val  (const (argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141321))
compound-branch200308202141322
  (assign continue (label after-call200308202141320))
  (goto (label compound-apply-compiled))
compiled-branch200308202141323
  (assign continue (label after-call200308202141320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141320
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141371))
compound-branch200308202141372
  (goto (label compound-apply-compiled))
compiled-branch200308202141373
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141371
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141370
after-lambda200308202141290
  (comment (define (code-to-get-rest-args operand-codes) (let ((code-for-next-arg (preserving (quote (argl)) (car operand-codes) (make-instruction-sequence (quote (val argl)) (quote (argl)) (quote ((assign argl (op cons) (reg val) (reg argl)))))))) (if (null? (cdr operand-codes)) code-for-next-arg (preserving (quote (env)) code-for-next-arg (code-to-get-rest-args (cdr operand-codes)))))))
  (perform (op define-variable!) (const code-to-get-rest-args) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
  (assign val (op make-compiled-procedure) (label entry200308202140481) (reg env))
  (goto (label after-lambda200308202140480))
  (comment (lambda (target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
entry200308202140481
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment (lambda (primitive-branch compiled-branch compound-branch continuation-branch after-call) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call))))
  (assign proc (op make-compiled-procedure) (label entry200308202140511) (reg env))
  (goto (label after-lambda200308202140510))
  (comment (lambda (primitive-branch compiled-branch compound-branch continuation-branch after-call) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call))))
entry200308202140511
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (primitive-branch compiled-branch compound-branch continuation-branch after-call)) (reg argl) (reg env))
  (comment (lambda (compiled-linkage) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))
  (assign proc (op make-compiled-procedure) (label entry200308202140521) (reg env))
  (goto (label after-lambda200308202140520))
  (comment (lambda (compiled-linkage) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))
entry200308202140521
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (compiled-linkage)) (reg argl) (reg env))
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save continue)
  (save proc)
  (comment after-call)
  (assign val (op lookup-variable-value) (const after-call) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment parallel-instruction-sequences)
  (assign proc (op lookup-variable-value) (const parallel-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-primitive-apply)
  (assign proc (op lookup-variable-value) (const compile-primitive-apply) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140526))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140525))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140523))
compound-branch200308202140524
  (assign continue (label after-call200308202140522))
  (goto (label compound-apply-compiled))
compiled-branch200308202140525
  (assign continue (label after-call200308202140522))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140523
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140526
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140522
  (assign argl (op list) (reg val))
  (restore env)
  (comment primitive-branch)
  (assign val (op lookup-variable-value) (const primitive-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140531))
compound-branch200308202140532
  (assign continue (label after-call200308202140530))
  (goto (label compound-apply-compiled))
compiled-branch200308202140533
  (assign continue (label after-call200308202140530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140530
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-continuation-apply)
  (assign proc (op lookup-variable-value) (const compile-continuation-apply) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140541))
compound-branch200308202140542
  (assign continue (label after-call200308202140540))
  (goto (label compound-apply-compiled))
compiled-branch200308202140543
  (assign continue (label after-call200308202140540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140540
  (assign argl (op list) (reg val))
  (restore env)
  (comment continuation-branch)
  (assign val (op lookup-variable-value) (const continuation-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140549))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140548))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140546))
compound-branch200308202140547
  (assign continue (label after-call200308202140545))
  (goto (label compound-apply-compiled))
compiled-branch200308202140548
  (assign continue (label after-call200308202140545))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140546
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140549
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140545
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140551))
compound-branch200308202140552
  (assign continue (label after-call200308202140550))
  (goto (label compound-apply-compiled))
compiled-branch200308202140553
  (assign continue (label after-call200308202140550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140550
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-proc-appl)
  (assign proc (op lookup-variable-value) (const compile-proc-appl) (reg env))
  (comment compiled-linkage)
  (assign val (op lookup-variable-value) (const compiled-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140561))
compound-branch200308202140562
  (assign continue (label after-call200308202140560))
  (goto (label compound-apply-compiled))
compiled-branch200308202140563
  (assign continue (label after-call200308202140560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140560
  (assign argl (op list) (reg val))
  (restore env)
  (comment compiled-branch)
  (assign val (op lookup-variable-value) (const compiled-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140569))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140568))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140566))
compound-branch200308202140567
  (assign continue (label after-call200308202140565))
  (goto (label compound-apply-compiled))
compiled-branch200308202140568
  (assign continue (label after-call200308202140565))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140566
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140569
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140565
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140571))
compound-branch200308202140572
  (assign continue (label after-call200308202140570))
  (goto (label compound-apply-compiled))
compiled-branch200308202140573
  (assign continue (label after-call200308202140570))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140571
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140570
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (save proc)
  (save env)
  (comment compile-compound-proc-appl)
  (assign proc (op lookup-variable-value) (const compile-compound-proc-appl) (reg env))
  (comment compiled-linkage)
  (assign val (op lookup-variable-value) (const compiled-linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140591))
compound-branch200308202140592
  (assign continue (label after-call200308202140590))
  (goto (label compound-apply-compiled))
compiled-branch200308202140593
  (assign continue (label after-call200308202140590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140590
  (assign argl (op list) (reg val))
  (restore env)
  (comment compound-branch)
  (assign val (op lookup-variable-value) (const compound-branch) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140599))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140598))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140596))
compound-branch200308202140597
  (assign continue (label after-call200308202140595))
  (goto (label compound-apply-compiled))
compiled-branch200308202140598
  (assign continue (label after-call200308202140595))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140596
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140599
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140595
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141001))
compound-branch200308202141002
  (assign continue (label after-call200308202141000))
  (goto (label compound-apply-compiled))
compiled-branch200308202141003
  (assign continue (label after-call200308202141000))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141001
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141000
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment continuation-branch)
  (assign val (op lookup-variable-value) (const continuation-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141011))
compound-branch200308202141012
  (assign continue (label after-call200308202141010))
  (goto (label compound-apply-compiled))
compiled-branch200308202141013
  (assign continue (label after-call200308202141010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141010
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141021))
compound-branch200308202141022
  (assign continue (label after-call200308202141020))
  (goto (label compound-apply-compiled))
compiled-branch200308202141023
  (assign continue (label after-call200308202141020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141020
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op continuation?)))
  (assign val  (const (op continuation?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141031))
compound-branch200308202141032
  (assign continue (label after-call200308202141030))
  (goto (label compound-apply-compiled))
compiled-branch200308202141033
  (assign continue (label after-call200308202141030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment compiled-branch)
  (assign val (op lookup-variable-value) (const compiled-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141041))
compound-branch200308202141042
  (assign continue (label after-call200308202141040))
  (goto (label compound-apply-compiled))
compiled-branch200308202141043
  (assign continue (label after-call200308202141040))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141041
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141040
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141051))
compound-branch200308202141052
  (assign continue (label after-call200308202141050))
  (goto (label compound-apply-compiled))
compiled-branch200308202141053
  (assign continue (label after-call200308202141050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141050
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op compiled-procedure?)))
  (assign val  (const (op compiled-procedure?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141059))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141058))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141056))
compound-branch200308202141057
  (assign continue (label after-call200308202141055))
  (goto (label compound-apply-compiled))
compiled-branch200308202141058
  (assign continue (label after-call200308202141055))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141056
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141059
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141055
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment primitive-branch)
  (assign val (op lookup-variable-value) (const primitive-branch) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141061))
compound-branch200308202141062
  (assign continue (label after-call200308202141060))
  (goto (label compound-apply-compiled))
compiled-branch200308202141063
  (assign continue (label after-call200308202141060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141060
  (assign argl (op list) (reg val))
  (comment (quote branch))
  (assign val  (const branch))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141069))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141068))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141066))
compound-branch200308202141067
  (assign continue (label after-call200308202141065))
  (goto (label compound-apply-compiled))
compiled-branch200308202141068
  (assign continue (label after-call200308202141065))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141066
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141069
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141065
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op list) (reg val))
  (comment (quote (op primitive-procedure?)))
  (assign val  (const (op primitive-procedure?)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote test))
  (assign val  (const test))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141071))
compound-branch200308202141072
  (assign continue (label after-call200308202141070))
  (goto (label compound-apply-compiled))
compiled-branch200308202141073
  (assign continue (label after-call200308202141070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141081))
compound-branch200308202141082
  (assign continue (label after-call200308202141080))
  (goto (label compound-apply-compiled))
compiled-branch200308202141083
  (assign continue (label after-call200308202141080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141080
  (assign argl (op list) (reg val))
  (comment (quote ()))
  (assign val  (const ()))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141101))
compound-branch200308202141102
  (assign continue (label after-call200308202141100))
  (goto (label compound-apply-compiled))
compiled-branch200308202141103
  (assign continue (label after-call200308202141100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202141104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202141100
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141124))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141123))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141121))
compound-branch200308202141122
  (goto (label compound-apply-compiled))
compiled-branch200308202141123
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141121
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141124
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141120
after-lambda200308202140520
  (save continue)
  (save proc)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote next))
  (assign val  (const next))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140516))
compound-branch200308202140517
  (assign continue (label after-call200308202140515))
  (goto (label compound-apply-compiled))
compiled-branch200308202140518
  (assign continue (label after-call200308202140515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140515
  (restore env)
  (comment (if (eq? linkage (quote next)) after-call linkage))
  (test (op false?) (reg val))
  (branch (label false-branch200308202140513))
true-branch200308202140514
  (comment after-call)
  (assign val (op lookup-variable-value) (const after-call) (reg env))
  (goto (label after-if200308202140512))
false-branch200308202140513
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
after-if200308202140512
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141171))
compound-branch200308202141172
  (goto (label compound-apply-compiled))
compiled-branch200308202141173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141170
after-lambda200308202140510
  (save continue)
  (save proc)
  (save env)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote after-call))
  (assign val  (const after-call))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140486))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140485))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140483))
compound-branch200308202140484
  (assign continue (label after-call200308202140482))
  (goto (label compound-apply-compiled))
compiled-branch200308202140485
  (assign continue (label after-call200308202140482))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140483
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140486
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140482
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote continuation-branch))
  (assign val  (const continuation-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140491))
compound-branch200308202140492
  (assign continue (label after-call200308202140490))
  (goto (label compound-apply-compiled))
compiled-branch200308202140493
  (assign continue (label after-call200308202140490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140490
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote compound-branch))
  (assign val  (const compound-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140499))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140498))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140496))
compound-branch200308202140497
  (assign continue (label after-call200308202140495))
  (goto (label compound-apply-compiled))
compiled-branch200308202140498
  (assign continue (label after-call200308202140495))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140496
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140499
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140495
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote compiled-branch))
  (assign val  (const compiled-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140501))
compound-branch200308202140502
  (assign continue (label after-call200308202140500))
  (goto (label compound-apply-compiled))
compiled-branch200308202140503
  (assign continue (label after-call200308202140500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote primitive-branch))
  (assign val  (const primitive-branch))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140506))
compound-branch200308202140507
  (assign continue (label after-call200308202140505))
  (goto (label compound-apply-compiled))
compiled-branch200308202140508
  (assign continue (label after-call200308202140505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140505
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202141204))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202141203))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202141201))
compound-branch200308202141202
  (goto (label compound-apply-compiled))
compiled-branch200308202141203
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202141201
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202141204
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202141200
after-lambda200308202140480
  (comment (define (compile-procedure-call target linkage) (let ((primitive-branch (make-label (quote primitive-branch))) (compiled-branch (make-label (quote compiled-branch))) (compound-branch (make-label (quote compound-branch))) (continuation-branch (make-label (quote continuation-branch))) (after-call (make-label (quote after-call)))) (let ((compiled-linkage (if (eq? linkage (quote next)) after-call linkage))) (append-instruction-sequences (make-instruction-sequence (quote (proc)) (quote ()) (list (list (quote test) (quote (op primitive-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) primitive-branch)) (list (quote test) (quote (op compiled-procedure?)) (quote (reg proc))) (list (quote branch) (list (quote label) compiled-branch)) (list (quote test) (quote (op continuation?)) (quote (reg proc))) (list (quote branch) (list (quote label) continuation-branch)))) (parallel-instruction-sequences (append-instruction-sequences compound-branch (compile-compound-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences compiled-branch (compile-proc-appl target compiled-linkage)) (parallel-instruction-sequences (append-instruction-sequences continuation-branch (compile-continuation-apply target linkage)) (append-instruction-sequences primitive-branch (compile-primitive-apply target linkage))))) after-call)))))
  (perform (op define-variable!) (const compile-procedure-call) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl))))))))
  (assign val (op make-compiled-procedure) (label entry200308202140371) (reg env))
  (goto (label after-lambda200308202140370))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl))))))))
entry200308202140371
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op list) (reg val))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op apply-primitive-procedure)))
  (assign val  (const (op apply-primitive-procedure)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140376))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140375))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140373))
compound-branch200308202140374
  (assign continue (label after-call200308202140372))
  (goto (label compound-apply-compiled))
compiled-branch200308202140375
  (assign continue (label after-call200308202140372))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140373
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140376
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140372
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021403711))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021403710))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140378))
compound-branch200308202140379
  (assign continue (label after-call200308202140377))
  (goto (label compound-apply-compiled))
compiled-branch2003082021403710
  (assign continue (label after-call200308202140377))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140378
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021403711
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140377
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140411))
compound-branch200308202140412
  (assign continue (label after-call200308202140410))
  (goto (label compound-apply-compiled))
compiled-branch200308202140413
  (assign continue (label after-call200308202140410))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140411
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140410
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc argl)))
  (assign val  (const (proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140419))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140418))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140416))
compound-branch200308202140417
  (assign continue (label after-call200308202140415))
  (goto (label compound-apply-compiled))
compiled-branch200308202140418
  (assign continue (label after-call200308202140415))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140416
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140419
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140415
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140421))
compound-branch200308202140422
  (goto (label compound-apply-compiled))
compiled-branch200308202140423
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140421
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202140424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202140420
after-lambda200308202140370
  (comment (define (compile-primitive-apply target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-primitive-procedure)) (quote (reg proc)) (quote (reg argl))))))))
  (perform (op define-variable!) (const compile-primitive-apply) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl))))))))
  (assign val (op make-compiled-procedure) (label entry200308202140281) (reg env))
  (goto (label after-lambda200308202140280))
  (comment (lambda (target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl))))))))
entry200308202140281
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (comment end-with-linkage)
  (assign proc (op lookup-variable-value) (const end-with-linkage) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg argl)))
  (assign val  (const (reg argl)))
  (assign argl (op list) (reg val))
  (comment (quote (reg proc)))
  (assign val  (const (reg proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (op apply-continuation)))
  (assign val  (const (op apply-continuation)))
  (assign argl (op cons) (reg val) (reg argl))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140286))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140285))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140283))
compound-branch200308202140284
  (assign continue (label after-call200308202140282))
  (goto (label compound-apply-compiled))
compiled-branch200308202140285
  (assign continue (label after-call200308202140282))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140283
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140286
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140282
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021402811))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021402810))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140288))
compound-branch200308202140289
  (assign continue (label after-call200308202140287))
  (goto (label compound-apply-compiled))
compiled-branch2003082021402810
  (assign continue (label after-call200308202140287))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140288
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021402811
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140287
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140291))
compound-branch200308202140292
  (assign continue (label after-call200308202140290))
  (goto (label compound-apply-compiled))
compiled-branch200308202140293
  (assign continue (label after-call200308202140290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140290
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc argl)))
  (assign val  (const (proc argl)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140304))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140303))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140301))
compound-branch200308202140302
  (assign continue (label after-call200308202140300))
  (goto (label compound-apply-compiled))
compiled-branch200308202140303
  (assign continue (label after-call200308202140300))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140301
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140304
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140300
  (assign argl (op list) (reg val))
  (restore env)
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140309))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140308))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140306))
compound-branch200308202140307
  (goto (label compound-apply-compiled))
compiled-branch200308202140308
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140306
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202140309
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202140305
after-lambda200308202140280
  (comment (define (compile-continuation-apply target linkage) (end-with-linkage linkage (make-instruction-sequence (quote (proc argl)) (list target) (list (list (quote assign) target (quote (op apply-continuation)) (quote (reg proc)) (quote (reg argl))))))))
  (perform (op define-variable!) (const compile-continuation-apply) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (assign val (op make-compiled-procedure) (label entry200308202139541) (reg env))
  (goto (label after-lambda200308202139540))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
entry200308202139541
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140189))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140188))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140186))
compound-branch200308202140187
  (assign continue (label after-call200308202140185))
  (goto (label compound-apply-compiled))
compiled-branch200308202140188
  (assign continue (label after-call200308202140185))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140186
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140189
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140185
  (restore env)
  (comment ((eq? target (quote val)) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202140170))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140175))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140174))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140172))
compound-branch200308202140173
  (assign continue (label after-call200308202140171))
  (goto (label compound-apply-compiled))
compiled-branch200308202140174
  (assign continue (label after-call200308202140171))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140172
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140175
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140171
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140181))
compound-branch200308202140182
  (assign continue (label after-call200308202140180))
  (goto (label compound-apply-compiled))
compiled-branch200308202140183
  (assign continue (label after-call200308202140180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140180
and-false-found200308202140170
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))))) (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139543))
true-branch200308202139544
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (goto (reg val))))
  (assign val  (const (goto (reg val))))
  (assign argl (op list) (reg val))
  (comment (quote (assign val (op compiled-procedure-entry) (reg proc))))
  (assign val  (const (assign val (op compiled-procedure-entry) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140141))
compound-branch200308202140142
  (assign continue (label after-call200308202140140))
  (goto (label compound-apply-compiled))
compiled-branch200308202140143
  (assign continue (label after-call200308202140140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140140
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140149))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140148))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140146))
compound-branch200308202140147
  (assign continue (label after-call200308202140145))
  (goto (label compound-apply-compiled))
compiled-branch200308202140148
  (assign continue (label after-call200308202140145))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140146
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140149
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140145
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140154))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140153))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140151))
compound-branch200308202140152
  (assign continue (label after-call200308202140150))
  (goto (label compound-apply-compiled))
compiled-branch200308202140153
  (assign continue (label after-call200308202140150))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140151
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140154
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140150
  (assign argl (op list) (reg val))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140164))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140163))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140161))
compound-branch200308202140162
  (goto (label compound-apply-compiled))
compiled-branch200308202140163
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140161
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202140164
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202140160
false-branch200308202139543
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140109))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140108))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140106))
compound-branch200308202140107
  (assign continue (label after-call200308202140105))
  (goto (label compound-apply-compiled))
compiled-branch200308202140108
  (assign continue (label after-call200308202140105))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140106
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140109
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140105
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140111))
compound-branch200308202140112
  (assign continue (label after-call200308202140110))
  (goto (label compound-apply-compiled))
compiled-branch200308202140113
  (assign continue (label after-call200308202140110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140110
  (restore env)
  (comment ((not (eq? target (quote val))) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202140090))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140095))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140094))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140092))
compound-branch200308202140093
  (assign continue (label after-call200308202140091))
  (goto (label compound-apply-compiled))
compiled-branch200308202140094
  (assign continue (label after-call200308202140091))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140092
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140095
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140091
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140101))
compound-branch200308202140102
  (assign continue (label after-call200308202140100))
  (goto (label compound-apply-compiled))
compiled-branch200308202140103
  (assign continue (label after-call200308202140100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140100
and-false-found200308202140090
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139546))
true-branch200308202139547
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))))
  (assign proc (op make-compiled-procedure) (label entry200308202140016) (reg env))
  (goto (label after-lambda200308202140015))
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))))
entry200308202140016
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-return)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021400111))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021400110))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140018))
compound-branch200308202140019
  (assign continue (label after-call200308202140017))
  (goto (label compound-apply-compiled))
compiled-branch2003082021400110
  (assign continue (label after-call200308202140017))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140018
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021400111
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140017
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140021))
compound-branch200308202140022
  (assign continue (label after-call200308202140020))
  (goto (label compound-apply-compiled))
compiled-branch200308202140023
  (assign continue (label after-call200308202140020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140020
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140031))
compound-branch200308202140032
  (assign continue (label after-call200308202140030))
  (goto (label compound-apply-compiled))
compiled-branch200308202140033
  (assign continue (label after-call200308202140030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140030
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (goto (reg val))))
  (assign val  (const (goto (reg val))))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (assign val (op compiled-procedure-entry) (reg proc))))
  (assign val  (const (assign val (op compiled-procedure-entry) (reg proc))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140041))
compound-branch200308202140042
  (assign continue (label after-call200308202140040))
  (goto (label compound-apply-compiled))
compiled-branch200308202140043
  (assign continue (label after-call200308202140040))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140041
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140040
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140049))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140048))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140046))
compound-branch200308202140047
  (assign continue (label after-call200308202140045))
  (goto (label compound-apply-compiled))
compiled-branch200308202140048
  (assign continue (label after-call200308202140045))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140046
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140049
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140045
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140051))
compound-branch200308202140052
  (assign continue (label after-call200308202140050))
  (goto (label compound-apply-compiled))
compiled-branch200308202140053
  (assign continue (label after-call200308202140050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140050
  (assign argl (op list) (reg val))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140071))
compound-branch200308202140072
  (goto (label compound-apply-compiled))
compiled-branch200308202140073
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140071
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202140074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202140070
after-lambda200308202140015
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote proc-return))
  (assign val  (const proc-return))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140014))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140013))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140011))
compound-branch200308202140012
  (assign continue (label after-call200308202140010))
  (goto (label compound-apply-compiled))
compiled-branch200308202140013
  (assign continue (label after-call200308202140010))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140011
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202140014
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202140010
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202140084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202140083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202140081))
compound-branch200308202140082
  (goto (label compound-apply-compiled))
compiled-branch200308202140083
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202140081
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202140084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202140080
false-branch200308202139546
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139594))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139593))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139591))
compound-branch200308202139592
  (assign continue (label after-call200308202139590))
  (goto (label compound-apply-compiled))
compiled-branch200308202139593
  (assign continue (label after-call200308202139590))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139591
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139594
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139590
  (restore env)
  (comment ((eq? target (quote val)) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202139585))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021395810))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139589))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139587))
compound-branch200308202139588
  (assign continue (label after-call200308202139586))
  (goto (label compound-apply-compiled))
compiled-branch200308202139589
  (assign continue (label after-call200308202139586))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139587
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021395810
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139586
and-false-found200308202139585
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139549))
true-branch2003082021395410
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))
  (assign val  (const ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))
  (assign argl (op list) (reg val))
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139581))
compound-branch200308202139582
  (goto (label compound-apply-compiled))
compiled-branch200308202139583
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139581
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139580
false-branch200308202139549
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139564))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139563))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139561))
compound-branch200308202139562
  (assign continue (label after-call200308202139560))
  (goto (label compound-apply-compiled))
compiled-branch200308202139563
  (assign continue (label after-call200308202139560))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139561
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139564
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139560
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139569))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139568))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139566))
compound-branch200308202139567
  (assign continue (label after-call200308202139565))
  (goto (label compound-apply-compiled))
compiled-branch200308202139568
  (assign continue (label after-call200308202139565))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139566
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139569
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139565
  (restore env)
  (comment ((not (eq? target (quote val))) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202139550))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139555))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139554))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139552))
compound-branch200308202139553
  (assign continue (label after-call200308202139551))
  (goto (label compound-apply-compiled))
compiled-branch200308202139554
  (assign continue (label after-call200308202139551))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139552
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139555
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139551
and-false-found200308202139550
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021395412))
true-branch2003082021395413
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (comment "return linkage, target not val -- COMPILE")
  (assign val  (const "return linkage, target not val -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021395418))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021395417))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021395415))
compound-branch2003082021395416
  (goto (label compound-apply-compiled))
compiled-branch2003082021395417
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021395415
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021395418
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021395414
false-branch2003082021395412
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if2003082021395411
after-if200308202139548
after-if200308202139545
after-if200308202139542
after-lambda200308202139540
  (comment (define (compile-proc-appl target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (assign val (op compiled-procedure-entry) (reg proc))) (quote (goto (reg val))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (perform (op define-variable!) (const compile-proc-appl) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (assign val (op make-compiled-procedure) (label entry200308202139241) (reg env))
  (goto (label after-lambda200308202139240))
  (comment (lambda (target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
entry200308202139241
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (target linkage)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139471))
compound-branch200308202139472
  (assign continue (label after-call200308202139470))
  (goto (label compound-apply-compiled))
compiled-branch200308202139473
  (assign continue (label after-call200308202139470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139470
  (restore env)
  (comment ((eq? target (quote val)) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202139450))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139455))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139454))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139452))
compound-branch200308202139453
  (assign continue (label after-call200308202139451))
  (goto (label compound-apply-compiled))
compiled-branch200308202139454
  (assign continue (label after-call200308202139451))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139452
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139455
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139451
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139461))
compound-branch200308202139462
  (assign continue (label after-call200308202139460))
  (goto (label compound-apply-compiled))
compiled-branch200308202139463
  (assign continue (label after-call200308202139460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139460
and-false-found200308202139450
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled))))) (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139243))
true-branch200308202139244
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment (quote (goto (label compound-apply-compiled))))
  (assign val  (const (goto (label compound-apply-compiled))))
  (assign argl (op list) (reg val))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139421))
compound-branch200308202139422
  (assign continue (label after-call200308202139420))
  (goto (label compound-apply-compiled))
compiled-branch200308202139423
  (assign continue (label after-call200308202139420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139420
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139434))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139433))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139431))
compound-branch200308202139432
  (assign continue (label after-call200308202139430))
  (goto (label compound-apply-compiled))
compiled-branch200308202139433
  (assign continue (label after-call200308202139430))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139431
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139434
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139430
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139441))
compound-branch200308202139442
  (assign continue (label after-call200308202139440))
  (goto (label compound-apply-compiled))
compiled-branch200308202139443
  (assign continue (label after-call200308202139440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139440
  (assign argl (op list) (reg val))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139449))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139448))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139446))
compound-branch200308202139447
  (goto (label compound-apply-compiled))
compiled-branch200308202139448
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139446
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139449
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139445
false-branch200308202139243
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139399))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139398))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139396))
compound-branch200308202139397
  (assign continue (label after-call200308202139395))
  (goto (label compound-apply-compiled))
compiled-branch200308202139398
  (assign continue (label after-call200308202139395))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139396
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139399
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139395
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139404))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139403))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139401))
compound-branch200308202139402
  (assign continue (label after-call200308202139400))
  (goto (label compound-apply-compiled))
compiled-branch200308202139403
  (assign continue (label after-call200308202139400))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139401
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139404
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139400
  (restore env)
  (comment ((not (eq? target (quote val))) (not (eq? linkage (quote return)))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202139380))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139385))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139384))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139382))
compound-branch200308202139383
  (assign continue (label after-call200308202139381))
  (goto (label compound-apply-compiled))
compiled-branch200308202139384
  (assign continue (label after-call200308202139381))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139382
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139385
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139381
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139391))
compound-branch200308202139392
  (assign continue (label after-call200308202139390))
  (goto (label compound-apply-compiled))
compiled-branch200308202139393
  (assign continue (label after-call200308202139390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139390
and-false-found200308202139380
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))) (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139246))
true-branch200308202139247
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))))
  (assign proc (op make-compiled-procedure) (label entry200308202139301) (reg env))
  (goto (label after-lambda200308202139300))
  (comment (lambda (proc-return) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage))))))
entry200308202139301
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (proc-return)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139306))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139305))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139303))
compound-branch200308202139304
  (assign continue (label after-call200308202139302))
  (goto (label compound-apply-compiled))
compiled-branch200308202139305
  (assign continue (label after-call200308202139302))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139303
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139306
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139302
  (assign argl (op list) (reg val))
  (comment (quote goto))
  (assign val  (const goto))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139311))
compound-branch200308202139312
  (assign continue (label after-call200308202139310))
  (goto (label compound-apply-compiled))
compiled-branch200308202139313
  (assign continue (label after-call200308202139310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139310
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (reg val)))
  (assign val  (const (reg val)))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139319))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139318))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139316))
compound-branch200308202139317
  (assign continue (label after-call200308202139315))
  (goto (label compound-apply-compiled))
compiled-branch200308202139318
  (assign continue (label after-call200308202139315))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139319
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139315
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (goto (label compound-apply))))
  (assign val  (const (goto (label compound-apply))))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment proc-return)
  (assign val (op lookup-variable-value) (const proc-return) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote label))
  (assign val  (const label))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139324))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139323))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139321))
compound-branch200308202139322
  (assign continue (label after-call200308202139320))
  (goto (label compound-apply-compiled))
compiled-branch200308202139323
  (assign continue (label after-call200308202139320))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139321
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139324
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139320
  (assign argl (op list) (reg val))
  (comment (quote continue))
  (assign val  (const continue))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote assign))
  (assign val  (const assign))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139331))
compound-branch200308202139332
  (assign continue (label after-call200308202139330))
  (goto (label compound-apply-compiled))
compiled-branch200308202139333
  (assign continue (label after-call200308202139330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139330
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139341))
compound-branch200308202139342
  (assign continue (label after-call200308202139340))
  (goto (label compound-apply-compiled))
compiled-branch200308202139343
  (assign continue (label after-call200308202139340))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139341
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139340
  (assign argl (op list) (reg val))
  (restore env)
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc)))
  (assign val  (const (proc)))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139361))
compound-branch200308202139362
  (goto (label compound-apply-compiled))
compiled-branch200308202139363
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139361
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139360
after-lambda200308202139300
  (save continue)
  (save proc)
  (comment make-label)
  (assign proc (op lookup-variable-value) (const make-label) (reg env))
  (comment (quote proc-return))
  (assign val  (const proc-return))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139291))
compound-branch200308202139292
  (assign continue (label after-call200308202139290))
  (goto (label compound-apply-compiled))
compiled-branch200308202139293
  (assign continue (label after-call200308202139290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139290
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139371))
compound-branch200308202139372
  (goto (label compound-apply-compiled))
compiled-branch200308202139373
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139371
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139370
false-branch200308202139246
  (save continue)
  (save env)
  (save env)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139284))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139283))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139281))
compound-branch200308202139282
  (assign continue (label after-call200308202139280))
  (goto (label compound-apply-compiled))
compiled-branch200308202139283
  (assign continue (label after-call200308202139280))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139281
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139284
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139280
  (restore env)
  (comment ((eq? target (quote val)) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202139275))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021392710))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139279))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139277))
compound-branch200308202139278
  (assign continue (label after-call200308202139276))
  (goto (label compound-apply-compiled))
compiled-branch200308202139279
  (assign continue (label after-call200308202139276))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139277
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021392710
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139276
and-false-found200308202139275
  (restore env)
  (restore continue)
  (comment (if (and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled))))) (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139249))
true-branch2003082021392410
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (comment (quote ((goto (label compound-apply-compiled)))))
  (assign val  (const ((goto (label compound-apply-compiled)))))
  (assign argl (op list) (reg val))
  (comment all-regs)
  (assign val (op lookup-variable-value) (const all-regs) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote (proc continue)))
  (assign val  (const (proc continue)))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139271))
compound-branch200308202139272
  (goto (label compound-apply-compiled))
compiled-branch200308202139273
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139271
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139270
false-branch200308202139249
  (save continue)
  (save env)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote val))
  (assign val  (const val))
  (assign argl (op list) (reg val))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139251))
compound-branch200308202139252
  (assign continue (label after-call200308202139250))
  (goto (label compound-apply-compiled))
compiled-branch200308202139253
  (assign continue (label after-call200308202139250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139250
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139259))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139258))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139256))
compound-branch200308202139257
  (assign continue (label after-call200308202139255))
  (goto (label compound-apply-compiled))
compiled-branch200308202139258
  (assign continue (label after-call200308202139255))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139256
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139259
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139255
  (restore env)
  (comment ((not (eq? target (quote val))) (eq? linkage (quote return))))
  (test (op false?) (reg val))
  (branch (label and-false-found2003082021392419))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (comment (quote return))
  (assign val  (const return))
  (assign argl (op list) (reg val))
  (comment linkage)
  (assign val (op lookup-variable-value) (const linkage) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021392424))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021392423))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021392421))
compound-branch2003082021392422
  (assign continue (label after-call2003082021392420))
  (goto (label compound-apply-compiled))
compiled-branch2003082021392423
  (assign continue (label after-call2003082021392420))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021392421
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021392424
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021392420
and-false-found2003082021392419
  (restore env)
  (restore continue)
  (comment (if (and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target) false))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021392412))
true-branch2003082021392413
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment target)
  (assign val (op lookup-variable-value) (const target) (reg env))
  (assign argl (op list) (reg val))
  (comment "return linkage, target not val -- COMPILE")
  (assign val  (const "return linkage, target not val -- COMPILE"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021392418))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021392417))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021392415))
compound-branch2003082021392416
  (goto (label compound-apply-compiled))
compiled-branch2003082021392417
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021392415
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021392418
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021392414
false-branch2003082021392412
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if2003082021392411
after-if200308202139248
after-if200308202139245
after-if200308202139242
after-lambda200308202139240
  (comment (define (compile-compound-proc-appl target linkage) (cond ((and (eq? target (quote val)) (not (eq? linkage (quote return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) linkage)) (quote (goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (not (eq? linkage (quote return)))) (let ((proc-return (make-label (quote proc-return)))) (make-instruction-sequence (quote (proc)) all-regs (list (list (quote assign) (quote continue) (list (quote label) proc-return)) (quote (goto (label compound-apply))) proc-return (list (quote assign) target (quote (reg val))) (list (quote goto) (list (quote label) linkage)))))) ((and (eq? target (quote val)) (eq? linkage (quote return))) (make-instruction-sequence (quote (proc continue)) all-regs (quote ((goto (label compound-apply-compiled)))))) ((and (not (eq? target (quote val))) (eq? linkage (quote return))) (error "return linkage, target not val -- COMPILE" target)))))
  (perform (op define-variable!) (const compile-compound-proc-appl) (reg val) (reg env))
  (assign val  (const ok))
  (comment (quote (env proc val argl continue)))
  (assign val  (const (env proc val argl continue)))
  (comment (define all-regs (quote (env proc val argl continue))))
  (perform (op define-variable!) (const all-regs) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (quote ()) (car s))))
  (assign val (op make-compiled-procedure) (label entry200308202139171) (reg env))
  (goto (label after-lambda200308202139170))
  (comment (lambda (s) (if (symbol? s) (quote ()) (car s))))
entry200308202139171
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139181))
compound-branch200308202139182
  (assign continue (label after-call200308202139180))
  (goto (label compound-apply-compiled))
compiled-branch200308202139183
  (assign continue (label after-call200308202139180))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139181
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139180
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (quote ()) (car s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139173))
true-branch200308202139174
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308202139173
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139179))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139178))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139176))
compound-branch200308202139177
  (goto (label compound-apply-compiled))
compiled-branch200308202139178
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139176
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139179
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139175
after-if200308202139172
after-lambda200308202139170
  (comment (define (registers-needed s) (if (symbol? s) (quote ()) (car s))))
  (perform (op define-variable!) (const registers-needed) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (quote ()) (cadr s))))
  (assign val (op make-compiled-procedure) (label entry200308202139131) (reg env))
  (goto (label after-lambda200308202139130))
  (comment (lambda (s) (if (symbol? s) (quote ()) (cadr s))))
entry200308202139131
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139141))
compound-branch200308202139142
  (assign continue (label after-call200308202139140))
  (goto (label compound-apply-compiled))
compiled-branch200308202139143
  (assign continue (label after-call200308202139140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139140
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (quote ()) (cadr s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139133))
true-branch200308202139134
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308202139133
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139139))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139138))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139136))
compound-branch200308202139137
  (goto (label compound-apply-compiled))
compiled-branch200308202139138
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139136
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139139
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139135
after-if200308202139132
after-lambda200308202139130
  (comment (define (registers-modified s) (if (symbol? s) (quote ()) (cadr s))))
  (perform (op define-variable!) (const registers-modified) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s) (if (symbol? s) (list s) (caddr s))))
  (assign val (op make-compiled-procedure) (label entry200308202139081) (reg env))
  (goto (label after-lambda200308202139080))
  (comment (lambda (s) (if (symbol? s) (list s) (caddr s))))
entry200308202139081
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139104))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139101))
compound-branch200308202139102
  (assign continue (label after-call200308202139100))
  (goto (label compound-apply-compiled))
compiled-branch200308202139103
  (assign continue (label after-call200308202139100))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139101
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139104
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139100
  (restore env)
  (restore continue)
  (comment (if (symbol? s) (list s) (caddr s)))
  (test (op false?) (reg val))
  (branch (label false-branch200308202139083))
true-branch200308202139084
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139091))
compound-branch200308202139092
  (goto (label compound-apply-compiled))
compiled-branch200308202139093
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139091
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139090
false-branch200308202139083
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment s)
  (assign val (op lookup-variable-value) (const s) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139089))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139088))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139086))
compound-branch200308202139087
  (goto (label compound-apply-compiled))
compiled-branch200308202139088
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139086
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139089
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139085
after-if200308202139082
after-lambda200308202139080
  (comment (define (statements s) (if (symbol? s) (list s) (caddr s))))
  (perform (op define-variable!) (const statements) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq reg) (memq reg (registers-needed seq))))
  (assign val (op make-compiled-procedure) (label entry200308202139051) (reg env))
  (goto (label after-lambda200308202139050))
  (comment (lambda (seq reg) (memq reg (registers-needed seq))))
entry200308202139051
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq reg)) (reg argl) (reg env))
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139056))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139055))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139053))
compound-branch200308202139054
  (assign continue (label after-call200308202139052))
  (goto (label compound-apply-compiled))
compiled-branch200308202139055
  (assign continue (label after-call200308202139052))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139053
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139056
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139052
  (assign argl (op list) (reg val))
  (restore env)
  (comment reg)
  (assign val (op lookup-variable-value) (const reg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021390511))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021390510))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139058))
compound-branch200308202139059
  (goto (label compound-apply-compiled))
compiled-branch2003082021390510
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139058
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021390511
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139057
after-lambda200308202139050
  (comment (define (needs-register? seq reg) (memq reg (registers-needed seq))))
  (perform (op define-variable!) (const needs-register?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq reg) (memq reg (registers-modified seq))))
  (assign val (op make-compiled-procedure) (label entry200308202139011) (reg env))
  (goto (label after-lambda200308202139010))
  (comment (lambda (seq reg) (memq reg (registers-modified seq))))
entry200308202139011
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq reg)) (reg argl) (reg env))
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139021))
compound-branch200308202139022
  (assign continue (label after-call200308202139020))
  (goto (label compound-apply-compiled))
compiled-branch200308202139023
  (assign continue (label after-call200308202139020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202139024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202139020
  (assign argl (op list) (reg val))
  (restore env)
  (comment reg)
  (assign val (op lookup-variable-value) (const reg) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202139029))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202139028))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202139026))
compound-branch200308202139027
  (goto (label compound-apply-compiled))
compiled-branch200308202139028
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202139026
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202139029
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202139025
after-lambda200308202139010
  (comment (define (modifies-register? seq reg) (memq reg (registers-modified seq))))
  (perform (op define-variable!) (const modifies-register?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda seqs (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
  (assign val (op make-compiled-procedure) (label entry200308202138421) (reg env))
  (goto (label after-lambda200308202138420))
  (comment (lambda seqs (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
entry200308202138421
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const seqs) (reg argl) (reg env))
  (comment (lambda (append-2-sequences append-seq-list) (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2))))) (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))) (append-seq-list seqs)))
  (assign proc (op make-compiled-procedure) (label entry200308202138423) (reg env))
  (goto (label after-lambda200308202138422))
  (comment (lambda (append-2-sequences append-seq-list) (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2))))) (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))) (append-seq-list seqs)))
entry200308202138423
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (append-2-sequences append-seq-list)) (reg argl) (reg env))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))))
  (assign val (op make-compiled-procedure) (label entry200308202138471) (reg env))
  (goto (label after-lambda200308202138470))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))))
entry200308202138471
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq1 seq2)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138476))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138475))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138473))
compound-branch200308202138474
  (assign continue (label after-call200308202138472))
  (goto (label compound-apply-compiled))
compiled-branch200308202138475
  (assign continue (label after-call200308202138472))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138473
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138476
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138472
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138481))
compound-branch200308202138482
  (assign continue (label after-call200308202138480))
  (goto (label compound-apply-compiled))
compiled-branch200308202138483
  (assign continue (label after-call200308202138480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138480
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138486))
compound-branch200308202138487
  (assign continue (label after-call200308202138485))
  (goto (label compound-apply-compiled))
compiled-branch200308202138488
  (assign continue (label after-call200308202138485))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138486
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138485
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138491))
compound-branch200308202138492
  (assign continue (label after-call200308202138490))
  (goto (label compound-apply-compiled))
compiled-branch200308202138493
  (assign continue (label after-call200308202138490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138490
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138501))
compound-branch200308202138502
  (assign continue (label after-call200308202138500))
  (goto (label compound-apply-compiled))
compiled-branch200308202138503
  (assign continue (label after-call200308202138500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138506))
compound-branch200308202138507
  (assign continue (label after-call200308202138505))
  (goto (label compound-apply-compiled))
compiled-branch200308202138508
  (assign continue (label after-call200308202138505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138505
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138511))
compound-branch200308202138512
  (assign continue (label after-call200308202138510))
  (goto (label compound-apply-compiled))
compiled-branch200308202138513
  (assign continue (label after-call200308202138510))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138511
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138510
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138519))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138518))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138516))
compound-branch200308202138517
  (assign continue (label after-call200308202138515))
  (goto (label compound-apply-compiled))
compiled-branch200308202138518
  (assign continue (label after-call200308202138515))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138519
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138515
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138524))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138521))
compound-branch200308202138522
  (assign continue (label after-call200308202138520))
  (goto (label compound-apply-compiled))
compiled-branch200308202138523
  (assign continue (label after-call200308202138520))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138521
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138524
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138520
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138529))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138528))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138526))
compound-branch200308202138527
  (assign continue (label after-call200308202138525))
  (goto (label compound-apply-compiled))
compiled-branch200308202138528
  (assign continue (label after-call200308202138525))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138526
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138529
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138525
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138534))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138533))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138531))
compound-branch200308202138532
  (assign continue (label after-call200308202138530))
  (goto (label compound-apply-compiled))
compiled-branch200308202138533
  (assign continue (label after-call200308202138530))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138531
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138534
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138530
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138541))
compound-branch200308202138542
  (goto (label compound-apply-compiled))
compiled-branch200308202138543
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138541
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138540
after-lambda200308202138470
  (comment (set! append-2-sequences (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2))))))
  (perform (op set-variable-value!) (const append-2-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))))
  (assign val (op make-compiled-procedure) (label entry200308202138431) (reg env))
  (goto (label after-lambda200308202138430))
  (comment (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))))
entry200308202138431
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seqs)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138464))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138463))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138461))
compound-branch200308202138462
  (assign continue (label after-call200308202138460))
  (goto (label compound-apply-compiled))
compiled-branch200308202138463
  (assign continue (label after-call200308202138460))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138461
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138464
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138460
  (restore env)
  (restore continue)
  (comment (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202138433))
true-branch200308202138434
  (comment empty-instruction-sequence)
  (assign proc (op lookup-variable-value) (const empty-instruction-sequence) (reg env))
  (assign argl  (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138454))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138451))
compound-branch200308202138452
  (goto (label compound-apply-compiled))
compiled-branch200308202138453
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138451
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138454
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138450
false-branch200308202138433
  (comment append-2-sequences)
  (assign proc (op lookup-variable-value) (const append-2-sequences) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append-seq-list)
  (assign proc (op lookup-variable-value) (const append-seq-list) (reg env))
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138439))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138438))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138436))
compound-branch200308202138437
  (assign continue (label after-call200308202138435))
  (goto (label compound-apply-compiled))
compiled-branch200308202138438
  (assign continue (label after-call200308202138435))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138436
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138439
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138435
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021384314))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021384313))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021384311))
compound-branch2003082021384312
  (assign continue (label after-call2003082021384310))
  (goto (label compound-apply-compiled))
compiled-branch2003082021384313
  (assign continue (label after-call2003082021384310))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021384311
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021384314
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021384310
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138444))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138443))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138441))
compound-branch200308202138442
  (assign continue (label after-call200308202138440))
  (goto (label compound-apply-compiled))
compiled-branch200308202138443
  (assign continue (label after-call200308202138440))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138441
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138444
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138440
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138449))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138448))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138446))
compound-branch200308202138447
  (goto (label compound-apply-compiled))
compiled-branch200308202138448
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138446
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138449
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138445
after-if200308202138432
after-lambda200308202138430
  (comment (set! append-seq-list (lambda (seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs)))))))
  (perform (op set-variable-value!) (const append-seq-list) (reg val) (reg env))
  (assign val  (const ok))
  (comment append-seq-list)
  (assign proc (op lookup-variable-value) (const append-seq-list) (reg env))
  (comment seqs)
  (assign val (op lookup-variable-value) (const seqs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138428))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138427))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138425))
compound-branch200308202138426
  (goto (label compound-apply-compiled))
compiled-branch200308202138427
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138425
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138428
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138424
after-lambda200308202138422
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op list) (reg val))
  (comment (quote *unassigned*))
  (assign val  (const *unassigned*))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138584))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138583))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138581))
compound-branch200308202138582
  (goto (label compound-apply-compiled))
compiled-branch200308202138583
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138581
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138584
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138580
after-lambda200308202138420
  (comment (define (append-instruction-sequences . seqs) (define (append-2-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (list-difference (registers-needed seq2) (registers-modified seq1))) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))) (define (append-seq-list seqs) (if (null? seqs) (empty-instruction-sequence) (append-2-sequences (car seqs) (append-seq-list (cdr seqs))))) (append-seq-list seqs)))
  (perform (op define-variable!) (const append-instruction-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
  (assign val (op make-compiled-procedure) (label entry200308202138321) (reg env))
  (goto (label after-lambda200308202138320))
  (comment (lambda (s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
entry200308202138321
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s1 s2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138394))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138391))
compound-branch200308202138392
  (assign continue (label after-call200308202138390))
  (goto (label compound-apply-compiled))
compiled-branch200308202138393
  (assign continue (label after-call200308202138390))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138391
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138394
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138390
  (restore env)
  (restore continue)
  (comment (if (null? s1) s2 (if (memq (car s1) s2) (list-union (cdr s1) s2) (cons (car s1) (list-union (cdr s1) s2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202138323))
true-branch200308202138324
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (goto (reg continue))
false-branch200308202138323
  (save continue)
  (save env)
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138374))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138373))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138371))
compound-branch200308202138372
  (assign continue (label after-call200308202138370))
  (goto (label compound-apply-compiled))
compiled-branch200308202138373
  (assign continue (label after-call200308202138370))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138371
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138374
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138370
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138384))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138383))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138381))
compound-branch200308202138382
  (assign continue (label after-call200308202138380))
  (goto (label compound-apply-compiled))
compiled-branch200308202138383
  (assign continue (label after-call200308202138380))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138381
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138384
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138380
  (restore env)
  (restore continue)
  (comment (if (memq (car s1) s2) (list-union (cdr s1) s2) (cons (car s1) (list-union (cdr s1) s2))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202138326))
true-branch200308202138327
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save continue)
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138364))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138363))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138361))
compound-branch200308202138362
  (assign continue (label after-call200308202138360))
  (goto (label compound-apply-compiled))
compiled-branch200308202138363
  (assign continue (label after-call200308202138360))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138361
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138364
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138360
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138369))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138368))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138366))
compound-branch200308202138367
  (goto (label compound-apply-compiled))
compiled-branch200308202138368
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138366
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138369
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138365
false-branch200308202138326
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021383212))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021383211))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138329))
compound-branch2003082021383210
  (assign continue (label after-call200308202138328))
  (goto (label compound-apply-compiled))
compiled-branch2003082021383211
  (assign continue (label after-call200308202138328))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138329
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021383212
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138328
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138334))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138333))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138331))
compound-branch200308202138332
  (assign continue (label after-call200308202138330))
  (goto (label compound-apply-compiled))
compiled-branch200308202138333
  (assign continue (label after-call200308202138330))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138331
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138334
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138330
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138339))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138338))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138336))
compound-branch200308202138337
  (assign continue (label after-call200308202138335))
  (goto (label compound-apply-compiled))
compiled-branch200308202138338
  (assign continue (label after-call200308202138335))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138336
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138339
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138335
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138344))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138343))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138341))
compound-branch200308202138342
  (goto (label compound-apply-compiled))
compiled-branch200308202138343
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138341
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138344
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138340
after-if200308202138325
after-if200308202138322
after-lambda200308202138320
  (comment (define (list-union s1 s2) (cond ((null? s1) s2) ((memq (car s1) s2) (list-union (cdr s1) s2)) (else (cons (car s1) (list-union (cdr s1) s2))))))
  (perform (op define-variable!) (const list-union) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
  (assign val (op make-compiled-procedure) (label entry200308202138231) (reg env))
  (goto (label after-lambda200308202138230))
  (comment (lambda (s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
entry200308202138231
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (s1 s2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138294))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138293))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138291))
compound-branch200308202138292
  (assign continue (label after-call200308202138290))
  (goto (label compound-apply-compiled))
compiled-branch200308202138293
  (assign continue (label after-call200308202138290))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138291
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138294
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138290
  (restore env)
  (restore continue)
  (comment (if (null? s1) (quote ()) (if (memq (car s1) s2) (list-difference (cdr s1) s2) (cons (car s1) (list-difference (cdr s1) s2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202138233))
true-branch200308202138234
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
false-branch200308202138233
  (save continue)
  (save env)
  (comment memq)
  (assign proc (op lookup-variable-value) (const memq) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138269))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138268))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138266))
compound-branch200308202138267
  (assign continue (label after-call200308202138265))
  (goto (label compound-apply-compiled))
compiled-branch200308202138268
  (assign continue (label after-call200308202138265))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138266
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138269
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138265
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138274))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138273))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138271))
compound-branch200308202138272
  (assign continue (label after-call200308202138270))
  (goto (label compound-apply-compiled))
compiled-branch200308202138273
  (assign continue (label after-call200308202138270))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138271
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138274
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138270
  (restore env)
  (restore continue)
  (comment (if (memq (car s1) s2) (list-difference (cdr s1) s2) (cons (car s1) (list-difference (cdr s1) s2))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202138236))
true-branch200308202138237
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save continue)
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138254))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138251))
compound-branch200308202138252
  (assign continue (label after-call200308202138250))
  (goto (label compound-apply-compiled))
compiled-branch200308202138253
  (assign continue (label after-call200308202138250))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138251
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138254
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138250
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138264))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138263))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138261))
compound-branch200308202138262
  (goto (label compound-apply-compiled))
compiled-branch200308202138263
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138261
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138264
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138260
false-branch200308202138236
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (comment s2)
  (assign val (op lookup-variable-value) (const s2) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021382312))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021382311))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138239))
compound-branch2003082021382310
  (assign continue (label after-call200308202138238))
  (goto (label compound-apply-compiled))
compiled-branch2003082021382311
  (assign continue (label after-call200308202138238))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138239
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021382312
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138238
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138244))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138243))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138241))
compound-branch200308202138242
  (assign continue (label after-call200308202138240))
  (goto (label compound-apply-compiled))
compiled-branch200308202138243
  (assign continue (label after-call200308202138240))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138241
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138244
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138240
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment s1)
  (assign val (op lookup-variable-value) (const s1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138249))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138248))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138246))
compound-branch200308202138247
  (assign continue (label after-call200308202138245))
  (goto (label compound-apply-compiled))
compiled-branch200308202138248
  (assign continue (label after-call200308202138245))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138246
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138249
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138245
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021382414))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021382413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021382411))
compound-branch2003082021382412
  (goto (label compound-apply-compiled))
compiled-branch2003082021382413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021382411
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch2003082021382414
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call2003082021382410
after-if200308202138235
after-if200308202138232
after-lambda200308202138230
  (comment (define (list-difference s1 s2) (cond ((null? s1) (quote ())) ((memq (car s1) s2) (list-difference (cdr s1) s2)) (else (cons (car s1) (list-difference (cdr s1) s2))))))
  (perform (op define-variable!) (const list-difference) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2))))))
  (assign val (op make-compiled-procedure) (label entry200308202137591) (reg env))
  (goto (label after-lambda200308202137590))
  (comment (lambda (regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2))))))
entry200308202137591
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (regs seq1 seq2)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138189))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138188))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138186))
compound-branch200308202138187
  (assign continue (label after-call200308202138185))
  (goto (label compound-apply-compiled))
compiled-branch200308202138188
  (assign continue (label after-call200308202138185))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138186
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138189
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138185
  (restore env)
  (restore continue)
  (comment (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308202137593))
true-branch200308202137594
  (comment append-instruction-sequences)
  (assign proc (op lookup-variable-value) (const append-instruction-sequences) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138184))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138183))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138181))
compound-branch200308202138182
  (goto (label compound-apply-compiled))
compiled-branch200308202138183
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138181
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138184
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138180
false-branch200308202137593
  (comment (lambda (first-reg) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2))))
  (assign proc (op make-compiled-procedure) (label entry2003082021375911) (reg env))
  (goto (label after-lambda2003082021375910))
  (comment (lambda (first-reg) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2))))
entry2003082021375911
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (first-reg)) (reg argl) (reg env))
  (save continue)
  (save env)
  (save env)
  (comment needs-register?)
  (assign proc (op lookup-variable-value) (const needs-register?) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138149))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138148))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138146))
compound-branch200308202138147
  (assign continue (label after-call200308202138145))
  (goto (label compound-apply-compiled))
compiled-branch200308202138148
  (assign continue (label after-call200308202138145))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138146
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138149
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138145
  (restore env)
  (comment ((needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)))
  (test (op false?) (reg val))
  (branch (label and-false-found200308202138130))
  (comment modifies-register?)
  (assign proc (op lookup-variable-value) (const modifies-register?) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138144))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138143))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138141))
compound-branch200308202138142
  (assign continue (label after-call200308202138140))
  (goto (label compound-apply-compiled))
compiled-branch200308202138143
  (assign continue (label after-call200308202138140))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138141
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138144
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138140
and-false-found200308202138130
  (restore env)
  (restore continue)
  (comment (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2)))
  (test (op false?) (reg val))
  (branch (label false-branch2003082021375913))
true-branch2003082021375914
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (save env)
  (save argl)
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote restore))
  (assign val  (const restore))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138024))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138023))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138021))
compound-branch200308202138022
  (assign continue (label after-call200308202138020))
  (goto (label compound-apply-compiled))
compiled-branch200308202138023
  (assign continue (label after-call200308202138020))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138021
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138024
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138020
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138034))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138033))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138031))
compound-branch200308202138032
  (assign continue (label after-call200308202138030))
  (goto (label compound-apply-compiled))
compiled-branch200308202138033
  (assign continue (label after-call200308202138030))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138031
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138034
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138030
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138039))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138038))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138036))
compound-branch200308202138037
  (assign continue (label after-call200308202138035))
  (goto (label compound-apply-compiled))
compiled-branch200308202138038
  (assign continue (label after-call200308202138035))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138036
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138039
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138035
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote save))
  (assign val  (const save))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138044))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138043))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138041))
compound-branch200308202138042
  (assign continue (label after-call200308202138040))
  (goto (label compound-apply-compiled))
compiled-branch200308202138043
  (assign continue (label after-call200308202138040))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138041
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138044
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138040
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138054))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138053))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138051))
compound-branch200308202138052
  (assign continue (label after-call200308202138050))
  (goto (label compound-apply-compiled))
compiled-branch200308202138053
  (assign continue (label after-call200308202138050))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138051
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138054
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138050
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138059))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138058))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138056))
compound-branch200308202138057
  (assign continue (label after-call200308202138055))
  (goto (label compound-apply-compiled))
compiled-branch200308202138058
  (assign continue (label after-call200308202138055))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138056
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138059
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138055
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list-difference)
  (assign proc (op lookup-variable-value) (const list-difference) (reg env))
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138064))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138063))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138061))
compound-branch200308202138062
  (assign continue (label after-call200308202138060))
  (goto (label compound-apply-compiled))
compiled-branch200308202138063
  (assign continue (label after-call200308202138060))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138061
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138064
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138060
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138074))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138073))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138071))
compound-branch200308202138072
  (assign continue (label after-call200308202138070))
  (goto (label compound-apply-compiled))
compiled-branch200308202138073
  (assign continue (label after-call200308202138070))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138071
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138074
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138070
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138079))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138078))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138076))
compound-branch200308202138077
  (assign continue (label after-call200308202138075))
  (goto (label compound-apply-compiled))
compiled-branch200308202138078
  (assign continue (label after-call200308202138075))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138076
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138079
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138075
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138084))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138083))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138081))
compound-branch200308202138082
  (assign continue (label after-call200308202138080))
  (goto (label compound-apply-compiled))
compiled-branch200308202138083
  (assign continue (label after-call200308202138080))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138081
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138084
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138080
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment first-reg)
  (assign val (op lookup-variable-value) (const first-reg) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138089))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138088))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138086))
compound-branch200308202138087
  (assign continue (label after-call200308202138085))
  (goto (label compound-apply-compiled))
compiled-branch200308202138088
  (assign continue (label after-call200308202138085))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138086
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138089
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138085
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138094))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138093))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138091))
compound-branch200308202138092
  (assign continue (label after-call200308202138090))
  (goto (label compound-apply-compiled))
compiled-branch200308202138093
  (assign continue (label after-call200308202138090))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138091
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138094
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138090
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138099))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138098))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138096))
compound-branch200308202138097
  (assign continue (label after-call200308202138095))
  (goto (label compound-apply-compiled))
compiled-branch200308202138098
  (assign continue (label after-call200308202138095))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138096
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138099
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138095
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138114))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138113))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138111))
compound-branch200308202138112
  (assign continue (label after-call200308202138110))
  (goto (label compound-apply-compiled))
compiled-branch200308202138113
  (assign continue (label after-call200308202138110))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138111
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202138114
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202138110
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138119))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138118))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138116))
compound-branch200308202138117
  (goto (label compound-apply-compiled))
compiled-branch200308202138118
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138116
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138119
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138115
false-branch2003082021375913
  (comment preserving)
  (assign proc (op lookup-variable-value) (const preserving) (reg env))
  (save continue)
  (save proc)
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (save argl)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021375919))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021375918))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch2003082021375916))
compound-branch2003082021375917
  (assign continue (label after-call2003082021375915))
  (goto (label compound-apply-compiled))
compiled-branch2003082021375918
  (assign continue (label after-call2003082021375915))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch2003082021375916
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021375919
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call2003082021375915
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138004))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138003))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138001))
compound-branch200308202138002
  (goto (label compound-apply-compiled))
compiled-branch200308202138003
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138001
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138004
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138000
after-if2003082021375912
after-lambda2003082021375910
  (save continue)
  (save proc)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment regs)
  (assign val (op lookup-variable-value) (const regs) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137599))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137598))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137596))
compound-branch200308202137597
  (assign continue (label after-call200308202137595))
  (goto (label compound-apply-compiled))
compiled-branch200308202137598
  (assign continue (label after-call200308202137595))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137596
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137599
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137595
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202138174))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202138173))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202138171))
compound-branch200308202138172
  (goto (label compound-apply-compiled))
compiled-branch200308202138173
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202138171
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202138174
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202138170
after-if200308202137592
after-lambda200308202137590
  (comment (define (preserving regs seq1 seq2) (if (null? regs) (append-instruction-sequences seq1 seq2) (let ((first-reg (car regs))) (if (and (needs-register? seq2 first-reg) (modifies-register? seq1 first-reg)) (preserving (cdr regs) (make-instruction-sequence (list-union (list first-reg) (registers-needed seq1)) (list-difference (registers-modified seq1) (list first-reg)) (append (list (list (quote save) first-reg)) (statements seq1) (list (list (quote restore) first-reg)))) seq2) (preserving (cdr regs) seq1 seq2))))))
  (perform (op define-variable!) (const preserving) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)))))
  (assign val (op make-compiled-procedure) (label entry200308202137531) (reg env))
  (goto (label after-lambda200308202137530))
  (comment (lambda (seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)))))
entry200308202137531
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq body-seq)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment body-seq)
  (assign val (op lookup-variable-value) (const body-seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137536))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137535))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137533))
compound-branch200308202137534
  (assign continue (label after-call200308202137532))
  (goto (label compound-apply-compiled))
compiled-branch200308202137535
  (assign continue (label after-call200308202137532))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137533
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137536
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137532
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137544))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137541))
compound-branch200308202137542
  (assign continue (label after-call200308202137540))
  (goto (label compound-apply-compiled))
compiled-branch200308202137543
  (assign continue (label after-call200308202137540))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137541
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137544
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137540
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137549))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137548))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137546))
compound-branch200308202137547
  (assign continue (label after-call200308202137545))
  (goto (label compound-apply-compiled))
compiled-branch200308202137548
  (assign continue (label after-call200308202137545))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137546
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137549
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137545
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137554))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137553))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137551))
compound-branch200308202137552
  (assign continue (label after-call200308202137550))
  (goto (label compound-apply-compiled))
compiled-branch200308202137553
  (assign continue (label after-call200308202137550))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137551
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137554
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137550
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137559))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137558))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137556))
compound-branch200308202137557
  (assign continue (label after-call200308202137555))
  (goto (label compound-apply-compiled))
compiled-branch200308202137558
  (assign continue (label after-call200308202137555))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137556
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137559
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137555
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137574))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137573))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137571))
compound-branch200308202137572
  (goto (label compound-apply-compiled))
compiled-branch200308202137573
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137571
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202137574
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202137570
after-lambda200308202137530
  (comment (define (tack-on-instruction-sequence seq body-seq) (make-instruction-sequence (registers-needed seq) (registers-modified seq) (append (statements seq) (statements body-seq)))))
  (perform (op define-variable!) (const tack-on-instruction-sequence) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))))
  (assign val (op make-compiled-procedure) (label entry200308202137461) (reg env))
  (goto (label after-lambda200308202137460))
  (comment (lambda (seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))))
entry200308202137461
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq1 seq2)) (reg argl) (reg env))
  (comment make-instruction-sequence)
  (assign proc (op lookup-variable-value) (const make-instruction-sequence) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137466))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137465))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137463))
compound-branch200308202137464
  (assign continue (label after-call200308202137462))
  (goto (label compound-apply-compiled))
compiled-branch200308202137465
  (assign continue (label after-call200308202137462))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137463
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137466
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137462
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment statements)
  (assign proc (op lookup-variable-value) (const statements) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch2003082021374611))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch2003082021374610))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137468))
compound-branch200308202137469
  (assign continue (label after-call200308202137467))
  (goto (label compound-apply-compiled))
compiled-branch2003082021374610
  (assign continue (label after-call200308202137467))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137468
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch2003082021374611
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137467
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137474))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137473))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137471))
compound-branch200308202137472
  (assign continue (label after-call200308202137470))
  (goto (label compound-apply-compiled))
compiled-branch200308202137473
  (assign continue (label after-call200308202137470))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137471
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137474
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137470
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137484))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137483))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137481))
compound-branch200308202137482
  (assign continue (label after-call200308202137480))
  (goto (label compound-apply-compiled))
compiled-branch200308202137483
  (assign continue (label after-call200308202137480))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137481
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137484
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137480
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-modified)
  (assign proc (op lookup-variable-value) (const registers-modified) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137489))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137488))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137486))
compound-branch200308202137487
  (assign continue (label after-call200308202137485))
  (goto (label compound-apply-compiled))
compiled-branch200308202137488
  (assign continue (label after-call200308202137485))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137486
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137489
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137485
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137494))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137493))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137491))
compound-branch200308202137492
  (assign continue (label after-call200308202137490))
  (goto (label compound-apply-compiled))
compiled-branch200308202137493
  (assign continue (label after-call200308202137490))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137491
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137494
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137490
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment list-union)
  (assign proc (op lookup-variable-value) (const list-union) (reg env))
  (save proc)
  (save env)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq2)
  (assign val (op lookup-variable-value) (const seq2) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137499))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137498))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137496))
compound-branch200308202137497
  (assign continue (label after-call200308202137495))
  (goto (label compound-apply-compiled))
compiled-branch200308202137498
  (assign continue (label after-call200308202137495))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137496
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137499
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137495
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment registers-needed)
  (assign proc (op lookup-variable-value) (const registers-needed) (reg env))
  (comment seq1)
  (assign val (op lookup-variable-value) (const seq1) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137504))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137501))
compound-branch200308202137502
  (assign continue (label after-call200308202137500))
  (goto (label compound-apply-compiled))
compiled-branch200308202137503
  (assign continue (label after-call200308202137500))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137501
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137504
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137500
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137509))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137508))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137506))
compound-branch200308202137507
  (assign continue (label after-call200308202137505))
  (goto (label compound-apply-compiled))
compiled-branch200308202137508
  (assign continue (label after-call200308202137505))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137506
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308202137509
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308202137505
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308202137514))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308202137513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308202137511))
compound-branch200308202137512
  (goto (label compound-apply-compiled))
compiled-branch200308202137513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308202137511
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308202137514
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308202137510
after-lambda200308202137460
  (comment (define (parallel-instruction-sequences seq1 seq2) (make-instruction-sequence (list-union (registers-needed seq1) (registers-needed seq2)) (list-union (registers-modified seq1) (registers-modified seq2)) (append (statements seq1) (statements seq2)))))
  (perform (op define-variable!) (const parallel-instruction-sequences) (reg val) (reg env))
  (assign val  (const ok))
  (comment (quote (COMPILER LOADED)))
  (assign val  (const (COMPILER LOADED)))
))
