
; This file is generated by the pretty printer
; The needs- and modifies-registers are discarded

; This is compiled by the interpreted compiler
(()()
(
  (comment (lambda (exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
  (assign val (op make-compiled-procedure) (label entry200308172013500) (reg env))
  (goto (label after-lambda200308172013501))
  (comment (lambda (exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
entry200308172013500
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment number?)
  (assign proc (op lookup-variable-value) (const number?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172013505))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172013506))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172013508))
compound-branch200308172013507
  (assign continue (label after-call200308172013509))
  (goto (label compound-apply-compiled))
compiled-branch200308172013506
  (assign continue (label after-call200308172013509))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172013508
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172013505
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172013509
  (restore env)
  (restore continue)
  (comment (if (number? exp) true (if (string? exp) true false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172013503))
true-branch200308172013502
  (comment true)
  (assign val (op lookup-variable-value) (const true) (reg env))
  (goto (reg continue))
false-branch200308172013503
  (save continue)
  (save env)
  (comment string?)
  (assign proc (op lookup-variable-value) (const string?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172013513))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172013514))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172013516))
compound-branch200308172013515
  (assign continue (label after-call200308172013517))
  (goto (label compound-apply-compiled))
compiled-branch200308172013514
  (assign continue (label after-call200308172013517))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172013516
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172013513
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172013517
  (restore env)
  (restore continue)
  (comment (if (string? exp) true false))
  (test (op false?) (reg val))
  (branch (label false-branch200308172013511))
true-branch200308172013510
  (comment true)
  (assign val (op lookup-variable-value) (const true) (reg env))
  (goto (reg continue))
false-branch200308172013511
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if200308172013512
after-if200308172013504
after-lambda200308172013501
  (comment (define (self-evaluating? exp) (cond ((number? exp) true) ((string? exp) true) (else false))))
  (perform (op define-variable!) (const self-evaluating?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote quote))))
  (assign val (op make-compiled-procedure) (label entry200308172013550) (reg env))
  (goto (label after-lambda200308172013551))
  (comment (lambda (exp) (tagged-list? exp (quote quote))))
entry200308172013550
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote quote))
  (assign val  (const quote))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172013560))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172013561))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172013563))
compound-branch200308172013562
  (goto (label compound-apply-compiled))
compiled-branch200308172013561
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172013563
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172013560
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172013564
after-lambda200308172013551
  (comment (define (quoted? exp) (tagged-list? exp (quote quote))))
  (perform (op define-variable!) (const quoted?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172013570) (reg env))
  (goto (label after-lambda200308172013571))
  (comment (lambda (exp) (cadr exp)))
entry200308172013570
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172013580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172013581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172013583))
compound-branch200308172013582
  (goto (label compound-apply-compiled))
compiled-branch200308172013581
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172013583
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172013580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172013584
after-lambda200308172013571
  (comment (define (text-of-quotation exp) (cadr exp)))
  (perform (op define-variable!) (const text-of-quotation) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
  (assign val (op make-compiled-procedure) (label entry200308172013590) (reg env))
  (goto (label after-lambda200308172013591))
  (comment (lambda (exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
entry200308172013590
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp tag)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014000))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014001))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014003))
compound-branch200308172014002
  (assign continue (label after-call200308172014004))
  (goto (label compound-apply-compiled))
compiled-branch200308172014001
  (assign continue (label after-call200308172014004))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014003
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014000
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014004
  (restore env)
  (restore continue)
  (comment (if (pair? exp) (eq? (car exp) tag) false))
  (test (op false?) (reg val))
  (branch (label false-branch200308172013593))
true-branch200308172013592
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (save continue)
  (save proc)
  (comment tag)
  (assign val (op lookup-variable-value) (const tag) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014010))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014011))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014013))
compound-branch200308172014012
  (assign continue (label after-call200308172014014))
  (goto (label compound-apply-compiled))
compiled-branch200308172014011
  (assign continue (label after-call200308172014014))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014013
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014010
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014014
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014030))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014031))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014033))
compound-branch200308172014032
  (goto (label compound-apply-compiled))
compiled-branch200308172014031
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014033
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014030
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014034
false-branch200308172013593
  (comment false)
  (assign val (op lookup-variable-value) (const false) (reg env))
  (goto (reg continue))
after-if200308172013594
after-lambda200308172013591
  (comment (define (tagged-list? exp tag) (if (pair? exp) (eq? (car exp) tag) false)))
  (perform (op define-variable!) (const tagged-list?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (symbol? exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014060) (reg env))
  (goto (label after-lambda200308172014061))
  (comment (lambda (exp) (symbol? exp)))
entry200308172014060
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014070))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014071))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014073))
compound-branch200308172014072
  (goto (label compound-apply-compiled))
compiled-branch200308172014071
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014073
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014070
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014074
after-lambda200308172014061
  (comment (define (variable? exp) (symbol? exp)))
  (perform (op define-variable!) (const variable?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote set!))))
  (assign val (op make-compiled-procedure) (label entry200308172014080) (reg env))
  (goto (label after-lambda200308172014081))
  (comment (lambda (exp) (tagged-list? exp (quote set!))))
entry200308172014080
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote set!))
  (assign val  (const set!))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014090))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014091))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014093))
compound-branch200308172014092
  (goto (label compound-apply-compiled))
compiled-branch200308172014091
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014093
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014090
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014094
after-lambda200308172014081
  (comment (define (assignment? exp) (tagged-list? exp (quote set!))))
  (perform (op define-variable!) (const assignment?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014100) (reg env))
  (goto (label after-lambda200308172014101))
  (comment (lambda (exp) (cadr exp)))
entry200308172014100
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014110))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014113))
compound-branch200308172014112
  (goto (label compound-apply-compiled))
compiled-branch200308172014111
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014113
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014110
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014114
after-lambda200308172014101
  (comment (define (assignment-variable exp) (cadr exp)))
  (perform (op define-variable!) (const assignment-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (caddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014120) (reg env))
  (goto (label after-lambda200308172014121))
  (comment (lambda (exp) (caddr exp)))
entry200308172014120
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014130))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014131))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014133))
compound-branch200308172014132
  (goto (label compound-apply-compiled))
compiled-branch200308172014131
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014133
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014130
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014134
after-lambda200308172014121
  (comment (define (assignment-value exp) (caddr exp)))
  (perform (op define-variable!) (const assignment-value) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote define))))
  (assign val (op make-compiled-procedure) (label entry200308172014140) (reg env))
  (goto (label after-lambda200308172014141))
  (comment (lambda (exp) (tagged-list? exp (quote define))))
entry200308172014140
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote define))
  (assign val  (const define))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014150))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014151))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014153))
compound-branch200308172014152
  (goto (label compound-apply-compiled))
compiled-branch200308172014151
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014153
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014150
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014154
after-lambda200308172014141
  (comment (define (definition? exp) (tagged-list? exp (quote define))))
  (perform (op define-variable!) (const definition?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
  (assign val (op make-compiled-procedure) (label entry200308172014170) (reg env))
  (goto (label after-lambda200308172014171))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
entry200308172014170
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014175))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014176))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014178))
compound-branch200308172014177
  (assign continue (label after-call200308172014179))
  (goto (label compound-apply-compiled))
compiled-branch200308172014176
  (assign continue (label after-call200308172014179))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014178
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014175
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014179
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014180))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014181))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014183))
compound-branch200308172014182
  (assign continue (label after-call200308172014184))
  (goto (label compound-apply-compiled))
compiled-branch200308172014181
  (assign continue (label after-call200308172014184))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014183
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014180
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014184
  (restore env)
  (restore continue)
  (comment (if (symbol? (cadr exp)) (cadr exp) (caadr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172014173))
true-branch200308172014172
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014200))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014201))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014203))
compound-branch200308172014202
  (goto (label compound-apply-compiled))
compiled-branch200308172014201
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014203
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014200
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014204
false-branch200308172014173
  (comment caadr)
  (assign proc (op lookup-variable-value) (const caadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014210))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014211))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014213))
compound-branch200308172014212
  (goto (label compound-apply-compiled))
compiled-branch200308172014211
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014213
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014210
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014214
after-if200308172014174
after-lambda200308172014171
  (comment (define (definition-variable exp) (if (symbol? (cadr exp)) (cadr exp) (caadr exp))))
  (perform (op define-variable!) (const definition-variable) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308172014250) (reg env))
  (goto (label after-lambda200308172014251))
  (comment (lambda (exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
entry200308172014250
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment symbol?)
  (assign proc (op lookup-variable-value) (const symbol?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014255))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014256))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014258))
compound-branch200308172014257
  (assign continue (label after-call200308172014259))
  (goto (label compound-apply-compiled))
compiled-branch200308172014256
  (assign continue (label after-call200308172014259))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014258
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014255
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014259
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014260))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014261))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014263))
compound-branch200308172014262
  (assign continue (label after-call200308172014264))
  (goto (label compound-apply-compiled))
compiled-branch200308172014261
  (assign continue (label after-call200308172014264))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014263
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014260
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014264
  (restore env)
  (restore continue)
  (comment (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172014253))
true-branch200308172014252
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014280))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014281))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014283))
compound-branch200308172014282
  (goto (label compound-apply-compiled))
compiled-branch200308172014281
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014283
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014280
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014284
false-branch200308172014253
  (comment make-lambda)
  (assign proc (op lookup-variable-value) (const make-lambda) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014310))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014311))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014313))
compound-branch200308172014312
  (assign continue (label after-call200308172014314))
  (goto (label compound-apply-compiled))
compiled-branch200308172014311
  (assign continue (label after-call200308172014314))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014313
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014310
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014314
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment cdadr)
  (assign proc (op lookup-variable-value) (const cdadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014290))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014291))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014293))
compound-branch200308172014292
  (assign continue (label after-call200308172014294))
  (goto (label compound-apply-compiled))
compiled-branch200308172014291
  (assign continue (label after-call200308172014294))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014293
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014290
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014294
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014320))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014321))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014323))
compound-branch200308172014322
  (goto (label compound-apply-compiled))
compiled-branch200308172014321
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014323
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014320
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014324
after-if200308172014254
after-lambda200308172014251
  (comment (define (definition-value exp) (if (symbol? (cadr exp)) (caddr exp) (make-lambda (cdadr exp) (cddr exp)))))
  (perform (op define-variable!) (const definition-value) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote lambda))))
  (assign val (op make-compiled-procedure) (label entry200308172014370) (reg env))
  (goto (label after-lambda200308172014371))
  (comment (lambda (exp) (tagged-list? exp (quote lambda))))
entry200308172014370
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014380))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014381))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014383))
compound-branch200308172014382
  (goto (label compound-apply-compiled))
compiled-branch200308172014381
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014383
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014380
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014384
after-lambda200308172014371
  (comment (define (lambda? exp) (tagged-list? exp (quote lambda))))
  (perform (op define-variable!) (const lambda?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014390) (reg env))
  (goto (label after-lambda200308172014391))
  (comment (lambda (exp) (cadr exp)))
entry200308172014390
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014400))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014401))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014403))
compound-branch200308172014402
  (goto (label compound-apply-compiled))
compiled-branch200308172014401
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014403
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014400
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014404
after-lambda200308172014391
  (comment (define (lambda-parameters exp) (cadr exp)))
  (perform (op define-variable!) (const lambda-parameters) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014410) (reg env))
  (goto (label after-lambda200308172014411))
  (comment (lambda (exp) (cddr exp)))
entry200308172014410
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014420))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014421))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014423))
compound-branch200308172014422
  (goto (label compound-apply-compiled))
compiled-branch200308172014421
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014423
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014420
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014424
after-lambda200308172014411
  (comment (define (lambda-body exp) (cddr exp)))
  (perform (op define-variable!) (const lambda-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
  (assign val (op make-compiled-procedure) (label entry200308172014430) (reg env))
  (goto (label after-lambda200308172014431))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
entry200308172014430
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (parameters body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment parameters)
  (assign val (op lookup-variable-value) (const parameters) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014440))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014441))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014443))
compound-branch200308172014442
  (assign continue (label after-call200308172014444))
  (goto (label compound-apply-compiled))
compiled-branch200308172014441
  (assign continue (label after-call200308172014444))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014443
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014440
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014444
  (assign argl (op list) (reg val))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014450))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014451))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014453))
compound-branch200308172014452
  (goto (label compound-apply-compiled))
compiled-branch200308172014451
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014453
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014450
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014454
after-lambda200308172014431
  (comment (define (make-lambda parameters body) (cons (quote lambda) (cons parameters body))))
  (perform (op define-variable!) (const make-lambda) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote if))))
  (assign val (op make-compiled-procedure) (label entry200308172014470) (reg env))
  (goto (label after-lambda200308172014471))
  (comment (lambda (exp) (tagged-list? exp (quote if))))
entry200308172014470
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote if))
  (assign val  (const if))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014480))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014481))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014483))
compound-branch200308172014482
  (goto (label compound-apply-compiled))
compiled-branch200308172014481
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014483
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014480
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014484
after-lambda200308172014471
  (comment (define (if? exp) (tagged-list? exp (quote if))))
  (perform (op define-variable!) (const if?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cadr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014500) (reg env))
  (goto (label after-lambda200308172014501))
  (comment (lambda (exp) (cadr exp)))
entry200308172014500
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014502))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014505))
compound-branch200308172014504
  (goto (label compound-apply-compiled))
compiled-branch200308172014503
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014505
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014502
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014506
after-lambda200308172014501
  (comment (define (if-predicate exp) (cadr exp)))
  (perform (op define-variable!) (const if-predicate) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (caddr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172014520) (reg env))
  (goto (label after-lambda200308172014521))
  (comment (lambda (exp) (caddr exp)))
entry200308172014520
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014522))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014525))
compound-branch200308172014524
  (goto (label compound-apply-compiled))
compiled-branch200308172014523
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014525
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014522
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014526
after-lambda200308172014521
  (comment (define (if-consequent exp) (caddr exp)))
  (perform (op define-variable!) (const if-consequent) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
  (assign val (op make-compiled-procedure) (label entry200308172014540) (reg env))
  (goto (label after-lambda200308172014541))
  (comment (lambda (exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
entry200308172014540
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save proc)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save proc)
  (comment cdddr)
  (assign proc (op lookup-variable-value) (const cdddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014545))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014546))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014548))
compound-branch200308172014547
  (assign continue (label after-call200308172014549))
  (goto (label compound-apply-compiled))
compiled-branch200308172014546
  (assign continue (label after-call200308172014549))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014548
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014545
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014549
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014550))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014551))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014553))
compound-branch200308172014552
  (assign continue (label after-call200308172014554))
  (goto (label compound-apply-compiled))
compiled-branch200308172014551
  (assign continue (label after-call200308172014554))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014553
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014550
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014554
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014570))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014571))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014573))
compound-branch200308172014572
  (assign continue (label after-call200308172014574))
  (goto (label compound-apply-compiled))
compiled-branch200308172014571
  (assign continue (label after-call200308172014574))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014573
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172014570
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172014574
  (restore env)
  (restore continue)
  (comment (if (not (null? (cdddr exp))) (cadddr exp) (quote false)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172014543))
true-branch200308172014542
  (comment cadddr)
  (assign proc (op lookup-variable-value) (const cadddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172014580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172014581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172014583))
compound-branch200308172014582
  (goto (label compound-apply-compiled))
compiled-branch200308172014581
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172014583
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172014580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172014584
false-branch200308172014543
  (comment (quote false))
  (assign val  (const false))
  (goto (reg continue))
after-if200308172014544
after-lambda200308172014541
  (comment (define (if-alternative exp) (if (not (null? (cdddr exp))) (cadddr exp) (quote false))))
  (perform (op define-variable!) (const if-alternative) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote begin))))
  (assign val (op make-compiled-procedure) (label entry200308172015020) (reg env))
  (goto (label after-lambda200308172015021))
  (comment (lambda (exp) (tagged-list? exp (quote begin))))
entry200308172015020
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote begin))
  (assign val  (const begin))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015030))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015031))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015033))
compound-branch200308172015032
  (goto (label compound-apply-compiled))
compiled-branch200308172015031
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015033
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015030
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015034
after-lambda200308172015021
  (comment (define (begin? exp) (tagged-list? exp (quote begin))))
  (perform (op define-variable!) (const begin?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172015040) (reg env))
  (goto (label after-lambda200308172015041))
  (comment (lambda (exp) (cdr exp)))
entry200308172015040
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015050))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015051))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015053))
compound-branch200308172015052
  (goto (label compound-apply-compiled))
compiled-branch200308172015051
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015050
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015054
after-lambda200308172015041
  (comment (define (begin-actions exp) (cdr exp)))
  (perform (op define-variable!) (const begin-actions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (null? (cdr seq))))
  (assign val (op make-compiled-procedure) (label entry200308172015060) (reg env))
  (goto (label after-lambda200308172015061))
  (comment (lambda (seq) (null? (cdr seq))))
entry200308172015060
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (save continue)
  (save proc)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015070))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015071))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015073))
compound-branch200308172015072
  (assign continue (label after-call200308172015074))
  (goto (label compound-apply-compiled))
compiled-branch200308172015071
  (assign continue (label after-call200308172015074))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015073
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015070
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015074
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015080))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015081))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015083))
compound-branch200308172015082
  (goto (label compound-apply-compiled))
compiled-branch200308172015081
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015083
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015080
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015084
after-lambda200308172015061
  (comment (define (last-exp? seq) (null? (cdr seq))))
  (perform (op define-variable!) (const last-exp?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (car seq)))
  (assign val (op make-compiled-procedure) (label entry200308172015100) (reg env))
  (goto (label after-lambda200308172015101))
  (comment (lambda (seq) (car seq)))
entry200308172015100
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015102))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015103))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015105))
compound-branch200308172015104
  (goto (label compound-apply-compiled))
compiled-branch200308172015103
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015105
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015102
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015106
after-lambda200308172015101
  (comment (define (first-exp seq) (car seq)))
  (perform (op define-variable!) (const first-exp) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cdr seq)))
  (assign val (op make-compiled-procedure) (label entry200308172015120) (reg env))
  (goto (label after-lambda200308172015121))
  (comment (lambda (seq) (cdr seq)))
entry200308172015120
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015130))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015131))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015133))
compound-branch200308172015132
  (goto (label compound-apply-compiled))
compiled-branch200308172015131
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015133
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015130
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015134
after-lambda200308172015121
  (comment (define (rest-exps seq) (cdr seq)))
  (perform (op define-variable!) (const rest-exps) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (pair? exp)))
  (assign val (op make-compiled-procedure) (label entry200308172015140) (reg env))
  (goto (label after-lambda200308172015141))
  (comment (lambda (exp) (pair? exp)))
entry200308172015140
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015150))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015151))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015153))
compound-branch200308172015152
  (goto (label compound-apply-compiled))
compiled-branch200308172015151
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015153
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015150
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015154
after-lambda200308172015141
  (comment (define (application? exp) (pair? exp)))
  (perform (op define-variable!) (const application?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (car exp)))
  (assign val (op make-compiled-procedure) (label entry200308172015160) (reg env))
  (goto (label after-lambda200308172015161))
  (comment (lambda (exp) (car exp)))
entry200308172015160
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015170))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015171))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015173))
compound-branch200308172015172
  (goto (label compound-apply-compiled))
compiled-branch200308172015171
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015173
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015170
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015174
after-lambda200308172015161
  (comment (define (operator exp) (car exp)))
  (perform (op define-variable!) (const operator) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172015180) (reg env))
  (goto (label after-lambda200308172015181))
  (comment (lambda (exp) (cdr exp)))
entry200308172015180
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015190))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015191))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015193))
compound-branch200308172015192
  (goto (label compound-apply-compiled))
compiled-branch200308172015191
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015193
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015190
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015194
after-lambda200308172015181
  (comment (define (operands exp) (cdr exp)))
  (perform (op define-variable!) (const operands) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (null? ops)))
  (assign val (op make-compiled-procedure) (label entry200308172015200) (reg env))
  (goto (label after-lambda200308172015201))
  (comment (lambda (ops) (null? ops)))
entry200308172015200
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015210))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015211))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015213))
compound-branch200308172015212
  (goto (label compound-apply-compiled))
compiled-branch200308172015211
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015213
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015210
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015214
after-lambda200308172015201
  (comment (define (no-operands? ops) (null? ops)))
  (perform (op define-variable!) (const no-operands?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (car ops)))
  (assign val (op make-compiled-procedure) (label entry200308172015230) (reg env))
  (goto (label after-lambda200308172015231))
  (comment (lambda (ops) (car ops)))
entry200308172015230
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015232))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015233))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015235))
compound-branch200308172015234
  (goto (label compound-apply-compiled))
compiled-branch200308172015233
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015235
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015232
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015236
after-lambda200308172015231
  (comment (define (first-operand ops) (car ops)))
  (perform (op define-variable!) (const first-operand) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (ops) (cdr ops)))
  (assign val (op make-compiled-procedure) (label entry200308172015250) (reg env))
  (goto (label after-lambda200308172015251))
  (comment (lambda (ops) (cdr ops)))
entry200308172015250
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (ops)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment ops)
  (assign val (op lookup-variable-value) (const ops) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015252))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015253))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015255))
compound-branch200308172015254
  (goto (label compound-apply-compiled))
compiled-branch200308172015253
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015255
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015252
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015256
after-lambda200308172015251
  (comment (define (rest-operands ops) (cdr ops)))
  (perform (op define-variable!) (const rest-operands) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (predicate consequent alternative) (list (quote if) predicate consequent alternative)))
  (assign val (op make-compiled-procedure) (label entry200308172015270) (reg env))
  (goto (label after-lambda200308172015271))
  (comment (lambda (predicate consequent alternative) (list (quote if) predicate consequent alternative)))
entry200308172015270
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (predicate consequent alternative)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment alternative)
  (assign val (op lookup-variable-value) (const alternative) (reg env))
  (assign argl (op list) (reg val))
  (comment consequent)
  (assign val (op lookup-variable-value) (const consequent) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment predicate)
  (assign val (op lookup-variable-value) (const predicate) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote if))
  (assign val  (const if))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015280))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015281))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015283))
compound-branch200308172015282
  (goto (label compound-apply-compiled))
compiled-branch200308172015281
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015283
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015280
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015284
after-lambda200308172015271
  (comment (define (make-if predicate consequent alternative) (list (quote if) predicate consequent alternative)))
  (perform (op define-variable!) (const make-if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
  (assign val (op make-compiled-procedure) (label entry200308172015300) (reg env))
  (goto (label after-lambda200308172015301))
  (comment (lambda (seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
entry200308172015300
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015305))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015306))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015308))
compound-branch200308172015307
  (assign continue (label after-call200308172015309))
  (goto (label compound-apply-compiled))
compiled-branch200308172015306
  (assign continue (label after-call200308172015309))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015308
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015305
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015309
  (restore env)
  (restore continue)
  (comment (if (null? seq) seq (if (last-exp? seq) (first-exp seq) (make-begin seq))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172015303))
true-branch200308172015302
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (goto (reg continue))
false-branch200308172015303
  (save continue)
  (save env)
  (comment last-exp?)
  (assign proc (op lookup-variable-value) (const last-exp?) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015313))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015314))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015316))
compound-branch200308172015315
  (assign continue (label after-call200308172015317))
  (goto (label compound-apply-compiled))
compiled-branch200308172015314
  (assign continue (label after-call200308172015317))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015316
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015313
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015317
  (restore env)
  (restore continue)
  (comment (if (last-exp? seq) (first-exp seq) (make-begin seq)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172015311))
true-branch200308172015310
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015330))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015331))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015333))
compound-branch200308172015332
  (goto (label compound-apply-compiled))
compiled-branch200308172015331
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015333
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015330
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015334
false-branch200308172015311
  (comment make-begin)
  (assign proc (op lookup-variable-value) (const make-begin) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015340))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015341))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015343))
compound-branch200308172015342
  (goto (label compound-apply-compiled))
compiled-branch200308172015341
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015343
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015340
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015344
after-if200308172015312
after-if200308172015304
after-lambda200308172015301
  (comment (define (sequence->exp seq) (cond ((null? seq) seq) ((last-exp? seq) (first-exp seq)) (else (make-begin seq)))))
  (perform (op define-variable!) (const sequence->exp) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (seq) (cons (quote begin) seq)))
  (assign val (op make-compiled-procedure) (label entry200308172015390) (reg env))
  (goto (label after-lambda200308172015391))
  (comment (lambda (seq) (cons (quote begin) seq)))
entry200308172015390
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (seq)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment seq)
  (assign val (op lookup-variable-value) (const seq) (reg env))
  (assign argl (op list) (reg val))
  (comment (quote begin))
  (assign val  (const begin))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015392))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015393))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015395))
compound-branch200308172015394
  (goto (label compound-apply-compiled))
compiled-branch200308172015393
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015395
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015392
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015396
after-lambda200308172015391
  (comment (define (make-begin seq) (cons (quote begin) seq)))
  (perform (op define-variable!) (const make-begin) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote cond))))
  (assign val (op make-compiled-procedure) (label entry200308172015410) (reg env))
  (goto (label after-lambda200308172015411))
  (comment (lambda (exp) (tagged-list? exp (quote cond))))
entry200308172015410
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote cond))
  (assign val  (const cond))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015420))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015421))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015423))
compound-branch200308172015422
  (goto (label compound-apply-compiled))
compiled-branch200308172015421
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015423
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015420
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015424
after-lambda200308172015411
  (comment (define (cond? exp) (tagged-list? exp (quote cond))))
  (perform (op define-variable!) (const cond?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cdr exp)))
  (assign val (op make-compiled-procedure) (label entry200308172015430) (reg env))
  (goto (label after-lambda200308172015431))
  (comment (lambda (exp) (cdr exp)))
entry200308172015430
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015440))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015441))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015443))
compound-branch200308172015442
  (goto (label compound-apply-compiled))
compiled-branch200308172015441
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015443
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015440
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015444
after-lambda200308172015431
  (comment (define (cond-clauses exp) (cdr exp)))
  (perform (op define-variable!) (const cond-clauses) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (eq? (cond-predicate clause) (quote else))))
  (assign val (op make-compiled-procedure) (label entry200308172015450) (reg env))
  (goto (label after-lambda200308172015451))
  (comment (lambda (clause) (eq? (cond-predicate clause) (quote else))))
entry200308172015450
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment eq?)
  (assign proc (op lookup-variable-value) (const eq?) (reg env))
  (save continue)
  (save proc)
  (comment (quote else))
  (assign val  (const else))
  (assign argl (op list) (reg val))
  (save argl)
  (comment cond-predicate)
  (assign proc (op lookup-variable-value) (const cond-predicate) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015460))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015461))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015463))
compound-branch200308172015462
  (assign continue (label after-call200308172015464))
  (goto (label compound-apply-compiled))
compiled-branch200308172015461
  (assign continue (label after-call200308172015464))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015463
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015460
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015464
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015470))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015471))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015473))
compound-branch200308172015472
  (goto (label compound-apply-compiled))
compiled-branch200308172015471
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015473
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015470
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015474
after-lambda200308172015451
  (comment (define (cond-else-clause? clause) (eq? (cond-predicate clause) (quote else))))
  (perform (op define-variable!) (const cond-else-clause?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (car clause)))
  (assign val (op make-compiled-procedure) (label entry200308172015500) (reg env))
  (goto (label after-lambda200308172015501))
  (comment (lambda (clause) (car clause)))
entry200308172015500
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015502))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015503))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015505))
compound-branch200308172015504
  (goto (label compound-apply-compiled))
compiled-branch200308172015503
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015505
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015502
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015506
after-lambda200308172015501
  (comment (define (cond-predicate clause) (car clause)))
  (perform (op define-variable!) (const cond-predicate) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clause) (cdr clause)))
  (assign val (op make-compiled-procedure) (label entry200308172015520) (reg env))
  (goto (label after-lambda200308172015521))
  (comment (lambda (clause) (cdr clause)))
entry200308172015520
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clause)) (reg argl) (reg env))
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment clause)
  (assign val (op lookup-variable-value) (const clause) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015522))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015523))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015525))
compound-branch200308172015524
  (goto (label compound-apply-compiled))
compiled-branch200308172015523
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015525
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015522
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015526
after-lambda200308172015521
  (comment (define (cond-actions clause) (cdr clause)))
  (perform (op define-variable!) (const cond-actions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (expand-clauses (cond-clauses exp))))
  (assign val (op make-compiled-procedure) (label entry200308172015540) (reg env))
  (goto (label after-lambda200308172015541))
  (comment (lambda (exp) (expand-clauses (cond-clauses exp))))
entry200308172015540
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment expand-clauses)
  (assign proc (op lookup-variable-value) (const expand-clauses) (reg env))
  (save continue)
  (save proc)
  (comment cond-clauses)
  (assign proc (op lookup-variable-value) (const cond-clauses) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015542))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015543))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015545))
compound-branch200308172015544
  (assign continue (label after-call200308172015546))
  (goto (label compound-apply-compiled))
compiled-branch200308172015543
  (assign continue (label after-call200308172015546))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015545
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015542
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015546
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015550))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015551))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015553))
compound-branch200308172015552
  (goto (label compound-apply-compiled))
compiled-branch200308172015551
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015553
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172015550
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172015554
after-lambda200308172015541
  (comment (define (cond->if exp) (expand-clauses (cond-clauses exp))))
  (perform (op define-variable!) (const cond->if) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
  (assign val (op make-compiled-procedure) (label entry200308172015570) (reg env))
  (goto (label after-lambda200308172015571))
  (comment (lambda (clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
entry200308172015570
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (clauses)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015583))
compound-branch200308172015582
  (assign continue (label after-call200308172015584))
  (goto (label compound-apply-compiled))
compiled-branch200308172015581
  (assign continue (label after-call200308172015584))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015584
  (restore env)
  (restore continue)
  (comment (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172015573))
true-branch200308172015572
  (comment (quote false))
  (assign val  (const false))
  (goto (reg continue))
false-branch200308172015573
  (comment (lambda (first rest) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))
  (assign proc (op make-compiled-procedure) (label entry200308172015590) (reg env))
  (goto (label after-lambda200308172015591))
  (comment (lambda (first rest) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))
entry200308172015590
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (first rest)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment cond-else-clause?)
  (assign proc (op lookup-variable-value) (const cond-else-clause?) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172015595))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172015596))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172015598))
compound-branch200308172015597
  (assign continue (label after-call200308172015599))
  (goto (label compound-apply-compiled))
compiled-branch200308172015596
  (assign continue (label after-call200308172015599))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172015598
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172015595
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172015599
  (restore env)
  (restore continue)
  (comment (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172015593))
true-branch200308172015592
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016010))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016011))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016013))
compound-branch200308172016012
  (assign continue (label after-call200308172016014))
  (goto (label compound-apply-compiled))
compiled-branch200308172016011
  (assign continue (label after-call200308172016014))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016013
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016010
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016014
  (restore env)
  (restore continue)
  (comment (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172016001))
true-branch200308172016000
  (comment sequence->exp)
  (assign proc (op lookup-variable-value) (const sequence->exp) (reg env))
  (save continue)
  (save proc)
  (comment cond-actions)
  (assign proc (op lookup-variable-value) (const cond-actions) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016020))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016021))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016023))
compound-branch200308172016022
  (assign continue (label after-call200308172016024))
  (goto (label compound-apply-compiled))
compiled-branch200308172016021
  (assign continue (label after-call200308172016024))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016023
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016020
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016024
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016030))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016031))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016033))
compound-branch200308172016032
  (goto (label compound-apply-compiled))
compiled-branch200308172016031
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016033
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016030
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016034
false-branch200308172016001
  (comment error)
  (assign proc (op lookup-variable-value) (const error) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (comment "ELSE clause isn't last -- COND->IF")
  (assign val  (const "ELSE clause isn't last -- COND->IF"))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016050))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016051))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016053))
compound-branch200308172016052
  (goto (label compound-apply-compiled))
compiled-branch200308172016051
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016050
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016054
after-if200308172016002
false-branch200308172015593
  (comment make-if)
  (assign proc (op lookup-variable-value) (const make-if) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment expand-clauses)
  (assign proc (op lookup-variable-value) (const expand-clauses) (reg env))
  (comment rest)
  (assign val (op lookup-variable-value) (const rest) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016120))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016121))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016123))
compound-branch200308172016122
  (assign continue (label after-call200308172016124))
  (goto (label compound-apply-compiled))
compiled-branch200308172016121
  (assign continue (label after-call200308172016124))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016120
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016124
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment sequence->exp)
  (assign proc (op lookup-variable-value) (const sequence->exp) (reg env))
  (save proc)
  (comment cond-actions)
  (assign proc (op lookup-variable-value) (const cond-actions) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016100))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016101))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016103))
compound-branch200308172016102
  (assign continue (label after-call200308172016104))
  (goto (label compound-apply-compiled))
compiled-branch200308172016101
  (assign continue (label after-call200308172016104))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016103
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016100
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016104
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016110))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016113))
compound-branch200308172016112
  (assign continue (label after-call200308172016114))
  (goto (label compound-apply-compiled))
compiled-branch200308172016111
  (assign continue (label after-call200308172016114))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016113
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016110
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016114
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment cond-predicate)
  (assign proc (op lookup-variable-value) (const cond-predicate) (reg env))
  (comment first)
  (assign val (op lookup-variable-value) (const first) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016080))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016081))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016083))
compound-branch200308172016082
  (assign continue (label after-call200308172016084))
  (goto (label compound-apply-compiled))
compiled-branch200308172016081
  (assign continue (label after-call200308172016084))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016083
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016080
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016084
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016140))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016141))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016143))
compound-branch200308172016142
  (goto (label compound-apply-compiled))
compiled-branch200308172016141
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016143
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016140
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016144
after-if200308172015594
after-lambda200308172015591
  (save continue)
  (save proc)
  (save env)
  (comment cdr)
  (assign proc (op lookup-variable-value) (const cdr) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016220))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016221))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016223))
compound-branch200308172016222
  (assign continue (label after-call200308172016224))
  (goto (label compound-apply-compiled))
compiled-branch200308172016221
  (assign continue (label after-call200308172016224))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016223
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016220
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016224
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment clauses)
  (assign val (op lookup-variable-value) (const clauses) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016210))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016211))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016213))
compound-branch200308172016212
  (assign continue (label after-call200308172016214))
  (goto (label compound-apply-compiled))
compiled-branch200308172016211
  (assign continue (label after-call200308172016214))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016213
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016210
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016214
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016240))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016241))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016243))
compound-branch200308172016242
  (goto (label compound-apply-compiled))
compiled-branch200308172016241
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016243
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016240
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016244
after-if200308172015574
after-lambda200308172015571
  (comment (define (expand-clauses clauses) (if (null? clauses) (quote false) (let ((first (car clauses)) (rest (cdr clauses))) (if (cond-else-clause? first) (if (null? rest) (sequence->exp (cond-actions first)) (error "ELSE clause isn't last -- COND->IF" clauses)) (make-if (cond-predicate first) (sequence->exp (cond-actions first)) (expand-clauses rest)))))))
  (perform (op define-variable!) (const expand-clauses) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (variable value) (list (quote set!) variable value)))
  (assign val (op make-compiled-procedure) (label entry200308172016330) (reg env))
  (goto (label after-lambda200308172016331))
  (comment (lambda (variable value) (list (quote set!) variable value)))
entry200308172016330
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variable value)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment value)
  (assign val (op lookup-variable-value) (const value) (reg env))
  (assign argl (op list) (reg val))
  (comment variable)
  (assign val (op lookup-variable-value) (const variable) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (quote set!))
  (assign val  (const set!))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016340))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016341))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016343))
compound-branch200308172016342
  (goto (label compound-apply-compiled))
compiled-branch200308172016341
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016343
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016340
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016344
after-lambda200308172016331
  (comment (define (assignment-make variable value) (list (quote set!) variable value)))
  (perform (op define-variable!) (const assignment-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
  (assign val (op make-compiled-procedure) (label entry200308172016350) (reg env))
  (goto (label after-lambda200308172016351))
  (comment (lambda (parameters body) (cons (quote lambda) (cons parameters body))))
entry200308172016350
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (parameters body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment parameters)
  (assign val (op lookup-variable-value) (const parameters) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016360))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016361))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016363))
compound-branch200308172016362
  (assign continue (label after-call200308172016364))
  (goto (label compound-apply-compiled))
compiled-branch200308172016361
  (assign continue (label after-call200308172016364))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016363
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016360
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016364
  (assign argl (op list) (reg val))
  (comment (quote lambda))
  (assign val  (const lambda))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016380))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016381))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016383))
compound-branch200308172016382
  (goto (label compound-apply-compiled))
compiled-branch200308172016381
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016383
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016380
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016384
after-lambda200308172016351
  (comment (define (lambda-make parameters body) (cons (quote lambda) (cons parameters body))))
  (perform (op define-variable!) (const lambda-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote let))))
  (assign val (op make-compiled-procedure) (label entry200308172016400) (reg env))
  (goto (label after-lambda200308172016401))
  (comment (lambda (exp) (tagged-list? exp (quote let))))
entry200308172016400
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote let))
  (assign val  (const let))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016410))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016411))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016413))
compound-branch200308172016412
  (goto (label compound-apply-compiled))
compiled-branch200308172016411
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016413
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016410
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016414
after-lambda200308172016401
  (comment (define (let? exp) (tagged-list? exp (quote let))))
  (perform (op define-variable!) (const let?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote let*))))
  (assign val (op make-compiled-procedure) (label entry200308172016420) (reg env))
  (goto (label after-lambda200308172016421))
  (comment (lambda (exp) (tagged-list? exp (quote let*))))
entry200308172016420
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote let*))
  (assign val  (const let*))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016430))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016431))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016433))
compound-branch200308172016432
  (goto (label compound-apply-compiled))
compiled-branch200308172016431
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016433
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016430
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016434
after-lambda200308172016421
  (comment (define (let*? exp) (tagged-list? exp (quote let*))))
  (perform (op define-variable!) (const let*?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (tagged-list? exp (quote letrec))))
  (assign val (op make-compiled-procedure) (label entry200308172016450) (reg env))
  (goto (label after-lambda200308172016451))
  (comment (lambda (exp) (tagged-list? exp (quote letrec))))
entry200308172016450
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment tagged-list?)
  (assign proc (op lookup-variable-value) (const tagged-list?) (reg env))
  (comment (quote letrec))
  (assign val  (const letrec))
  (assign argl (op list) (reg val))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016452))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016455))
compound-branch200308172016454
  (goto (label compound-apply-compiled))
compiled-branch200308172016453
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016455
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016452
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016456
after-lambda200308172016451
  (comment (define (letrec? exp) (tagged-list? exp (quote letrec))))
  (perform (op define-variable!) (const letrec?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (not (pair? (cadr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308172016470) (reg env))
  (goto (label after-lambda200308172016471))
  (comment (lambda (exp) (not (pair? (cadr exp)))))
entry200308172016470
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save continue)
  (save proc)
  (comment pair?)
  (assign proc (op lookup-variable-value) (const pair?) (reg env))
  (save proc)
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016480))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016481))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016483))
compound-branch200308172016482
  (assign continue (label after-call200308172016484))
  (goto (label compound-apply-compiled))
compiled-branch200308172016481
  (assign continue (label after-call200308172016484))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016483
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016480
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016484
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016490))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016491))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016493))
compound-branch200308172016492
  (assign continue (label after-call200308172016494))
  (goto (label compound-apply-compiled))
compiled-branch200308172016491
  (assign continue (label after-call200308172016494))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016493
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016490
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016494
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016500))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016501))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016503))
compound-branch200308172016502
  (goto (label compound-apply-compiled))
compiled-branch200308172016501
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016503
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016500
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016504
after-lambda200308172016471
  (comment (define (named-let? exp) (not (pair? (cadr exp)))))
  (perform (op define-variable!) (const named-let?) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
  (assign val (op make-compiled-procedure) (label entry200308172016520) (reg env))
  (goto (label after-lambda200308172016521))
  (comment (lambda (exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
entry200308172016520
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016533))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016534))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016536))
compound-branch200308172016535
  (assign continue (label after-call200308172016537))
  (goto (label compound-apply-compiled))
compiled-branch200308172016534
  (assign continue (label after-call200308172016537))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016536
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016533
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016537
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (cadr exp) (quote ())))
  (test (op false?) (reg val))
  (branch (label false-branch200308172016531))
true-branch200308172016530
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016540))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016541))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016543))
compound-branch200308172016542
  (goto (label compound-apply-compiled))
compiled-branch200308172016541
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016543
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016540
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016544
false-branch200308172016531
  (comment (quote ()))
  (assign val  (const ()))
  (goto (reg continue))
after-if200308172016532
after-lambda200308172016521
  (comment (define (let-name exp) (cond ((named-let? exp) (cadr exp)) (else (quote ())))))
  (perform (op define-variable!) (const let-name) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308172016570) (reg env))
  (goto (label after-lambda200308172016571))
  (comment (lambda (exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
entry200308172016570
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016583))
compound-branch200308172016582
  (assign continue (label after-call200308172016584))
  (goto (label compound-apply-compiled))
compiled-branch200308172016581
  (assign continue (label after-call200308172016584))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172016580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172016584
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (caddr exp) (cadr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172016573))
true-branch200308172016572
  (comment caddr)
  (assign proc (op lookup-variable-value) (const caddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172016590))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172016591))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172016593))
compound-branch200308172016592
  (goto (label compound-apply-compiled))
compiled-branch200308172016591
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172016593
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172016590
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172016594
false-branch200308172016573
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017000))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017001))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017003))
compound-branch200308172017002
  (goto (label compound-apply-compiled))
compiled-branch200308172017001
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017003
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017000
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017004
after-if200308172016574
after-lambda200308172016571
  (comment (define (let-bindings exp) (cond ((named-let? exp) (caddr exp)) (else (cadr exp)))))
  (perform (op define-variable!) (const let-bindings) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
  (assign val (op make-compiled-procedure) (label entry200308172017030) (reg env))
  (goto (label after-lambda200308172017031))
  (comment (lambda (exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
entry200308172017030
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017043))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017044))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017046))
compound-branch200308172017045
  (assign continue (label after-call200308172017047))
  (goto (label compound-apply-compiled))
compiled-branch200308172017044
  (assign continue (label after-call200308172017047))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017046
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017043
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017047
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (cdddr exp) (cddr exp)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172017041))
true-branch200308172017040
  (comment cdddr)
  (assign proc (op lookup-variable-value) (const cdddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017050))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017051))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017053))
compound-branch200308172017052
  (goto (label compound-apply-compiled))
compiled-branch200308172017051
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017050
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017054
false-branch200308172017041
  (comment cddr)
  (assign proc (op lookup-variable-value) (const cddr) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017070))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017071))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017073))
compound-branch200308172017072
  (goto (label compound-apply-compiled))
compiled-branch200308172017071
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017073
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017070
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017074
after-if200308172017042
after-lambda200308172017031
  (comment (define (let-body exp) (cond ((named-let? exp) (cdddr exp)) (else (cddr exp)))))
  (perform (op define-variable!) (const let-body) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
  (assign val (op make-compiled-procedure) (label entry200308172017100) (reg env))
  (goto (label after-lambda200308172017101))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
entry200308172017100
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (bindings) (map (lambda (binding) (car binding)) bindings)))
  (assign proc (op make-compiled-procedure) (label entry200308172017102) (reg env))
  (goto (label after-lambda200308172017103))
  (comment (lambda (bindings) (map (lambda (binding) (car binding)) bindings)))
entry200308172017102
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (binding) (car binding)))
  (assign val (op make-compiled-procedure) (label entry200308172017104) (reg env))
  (goto (label after-lambda200308172017105))
  (comment (lambda (binding) (car binding)))
entry200308172017104
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (binding)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (comment binding)
  (assign val (op lookup-variable-value) (const binding) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017110))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017113))
compound-branch200308172017112
  (goto (label compound-apply-compiled))
compiled-branch200308172017111
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017113
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017110
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017114
after-lambda200308172017105
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017120))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017121))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017123))
compound-branch200308172017122
  (goto (label compound-apply-compiled))
compiled-branch200308172017121
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017123
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017120
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017124
after-lambda200308172017103
  (save continue)
  (save proc)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017140))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017141))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017143))
compound-branch200308172017142
  (assign continue (label after-call200308172017144))
  (goto (label compound-apply-compiled))
compiled-branch200308172017141
  (assign continue (label after-call200308172017144))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017143
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017140
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017144
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017160))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017161))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017163))
compound-branch200308172017162
  (goto (label compound-apply-compiled))
compiled-branch200308172017161
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017163
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017160
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017164
after-lambda200308172017101
  (comment (define (let-variables exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (car binding)) bindings))))
  (perform (op define-variable!) (const let-variables) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
  (assign val (op make-compiled-procedure) (label entry200308172017180) (reg env))
  (goto (label after-lambda200308172017181))
  (comment (lambda (exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
entry200308172017180
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (bindings) (map (lambda (binding) (cadr binding)) bindings)))
  (assign proc (op make-compiled-procedure) (label entry200308172017182) (reg env))
  (goto (label after-lambda200308172017183))
  (comment (lambda (bindings) (map (lambda (binding) (cadr binding)) bindings)))
entry200308172017182
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (binding) (cadr binding)))
  (assign val (op make-compiled-procedure) (label entry200308172017190) (reg env))
  (goto (label after-lambda200308172017191))
  (comment (lambda (binding) (cadr binding)))
entry200308172017190
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (binding)) (reg argl) (reg env))
  (comment cadr)
  (assign proc (op lookup-variable-value) (const cadr) (reg env))
  (comment binding)
  (assign val (op lookup-variable-value) (const binding) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017192))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017193))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017195))
compound-branch200308172017194
  (goto (label compound-apply-compiled))
compiled-branch200308172017193
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017195
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017192
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017196
after-lambda200308172017191
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017210))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017211))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017213))
compound-branch200308172017212
  (goto (label compound-apply-compiled))
compiled-branch200308172017211
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017213
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017210
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017214
after-lambda200308172017183
  (save continue)
  (save proc)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017230))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017231))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017233))
compound-branch200308172017232
  (assign continue (label after-call200308172017234))
  (goto (label compound-apply-compiled))
compiled-branch200308172017231
  (assign continue (label after-call200308172017234))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017233
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017230
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017234
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017240))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017241))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017243))
compound-branch200308172017242
  (goto (label compound-apply-compiled))
compiled-branch200308172017241
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017243
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017240
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017244
after-lambda200308172017181
  (comment (define (let-expressions exp) (let ((bindings (let-bindings exp))) (map (lambda (binding) (cadr binding)) bindings))))
  (perform (op define-variable!) (const let-expressions) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (bindings body) (cons (quote let) (cons bindings body))))
  (assign val (op make-compiled-procedure) (label entry200308172017270) (reg env))
  (goto (label after-lambda200308172017271))
  (comment (lambda (bindings body) (cons (quote let) (cons bindings body))))
entry200308172017270
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings body)) (reg argl) (reg env))
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017280))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017281))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017283))
compound-branch200308172017282
  (assign continue (label after-call200308172017284))
  (goto (label compound-apply-compiled))
compiled-branch200308172017281
  (assign continue (label after-call200308172017284))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017283
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017280
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017284
  (assign argl (op list) (reg val))
  (comment (quote let))
  (assign val  (const let))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017290))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017291))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017293))
compound-branch200308172017292
  (goto (label compound-apply-compiled))
compiled-branch200308172017291
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017293
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017290
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017294
after-lambda200308172017271
  (comment (define (let-make bindings body) (cons (quote let) (cons bindings body))))
  (perform (op define-variable!) (const let-make) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
  (assign val (op make-compiled-procedure) (label entry200308172017310) (reg env))
  (goto (label after-lambda200308172017311))
  (comment (lambda (exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
entry200308172017310
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (variables expressions body name) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions)))))
  (assign proc (op make-compiled-procedure) (label entry200308172017320) (reg env))
  (goto (label after-lambda200308172017321))
  (comment (lambda (variables expressions body name) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions)))))
entry200308172017320
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables expressions body name)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment named-let?)
  (assign proc (op lookup-variable-value) (const named-let?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017325))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017326))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017328))
compound-branch200308172017327
  (assign continue (label after-call200308172017329))
  (goto (label compound-apply-compiled))
compiled-branch200308172017326
  (assign continue (label after-call200308172017329))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017328
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017325
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017329
  (restore env)
  (restore continue)
  (comment (if (named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions))) (cons (lambda-make variables body) expressions)))
  (test (op false?) (reg val))
  (branch (label false-branch200308172017323))
true-branch200308172017322
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (save env)
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (comment expressions)
  (assign val (op lookup-variable-value) (const expressions) (reg env))
  (assign argl (op list) (reg val))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017410))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017411))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017413))
compound-branch200308172017412
  (assign continue (label after-call200308172017414))
  (goto (label compound-apply-compiled))
compiled-branch200308172017411
  (assign continue (label after-call200308172017414))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017413
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017410
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017414
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (save proc)
  (save env)
  (comment lambda-make)
  (assign proc (op lookup-variable-value) (const lambda-make) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017380))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017381))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017383))
compound-branch200308172017382
  (assign continue (label after-call200308172017384))
  (goto (label compound-apply-compiled))
compiled-branch200308172017381
  (assign continue (label after-call200308172017384))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017383
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017380
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017384
  (assign argl (op list) (reg val))
  (restore env)
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017390))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017391))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017393))
compound-branch200308172017392
  (assign continue (label after-call200308172017394))
  (goto (label compound-apply-compiled))
compiled-branch200308172017391
  (assign continue (label after-call200308172017394))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017393
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017390
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017394
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017430))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017431))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017433))
compound-branch200308172017432
  (assign continue (label after-call200308172017434))
  (goto (label compound-apply-compiled))
compiled-branch200308172017431
  (assign continue (label after-call200308172017434))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017433
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017430
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017434
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment name)
  (assign val (op lookup-variable-value) (const name) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017340))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017341))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017343))
compound-branch200308172017342
  (assign continue (label after-call200308172017344))
  (goto (label compound-apply-compiled))
compiled-branch200308172017341
  (assign continue (label after-call200308172017344))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017343
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017340
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017344
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017360))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017361))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017363))
compound-branch200308172017362
  (assign continue (label after-call200308172017364))
  (goto (label compound-apply-compiled))
compiled-branch200308172017361
  (assign continue (label after-call200308172017364))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017363
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017360
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017364
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017460))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017461))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017463))
compound-branch200308172017462
  (goto (label compound-apply-compiled))
compiled-branch200308172017461
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017463
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017460
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017464
false-branch200308172017323
  (comment cons)
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (save continue)
  (save proc)
  (comment expressions)
  (assign val (op lookup-variable-value) (const expressions) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment lambda-make)
  (assign proc (op lookup-variable-value) (const lambda-make) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017490))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017491))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017493))
compound-branch200308172017492
  (assign continue (label after-call200308172017494))
  (goto (label compound-apply-compiled))
compiled-branch200308172017491
  (assign continue (label after-call200308172017494))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017493
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017490
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017494
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017500))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017501))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017503))
compound-branch200308172017502
  (goto (label compound-apply-compiled))
compiled-branch200308172017501
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017503
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172017500
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172017504
after-if200308172017324
after-lambda200308172017321
  (save continue)
  (save proc)
  (save env)
  (comment let-name)
  (assign proc (op lookup-variable-value) (const let-name) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018010))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018011))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018013))
compound-branch200308172018012
  (assign continue (label after-call200308172018014))
  (goto (label compound-apply-compiled))
compiled-branch200308172018011
  (assign continue (label after-call200308172018014))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018013
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018010
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018014
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018000))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018001))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018003))
compound-branch200308172018002
  (assign continue (label after-call200308172018004))
  (goto (label compound-apply-compiled))
compiled-branch200308172018001
  (assign continue (label after-call200308172018004))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018003
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018000
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018004
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (comment let-expressions)
  (assign proc (op lookup-variable-value) (const let-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017583))
compound-branch200308172017582
  (assign continue (label after-call200308172017584))
  (goto (label compound-apply-compiled))
compiled-branch200308172017581
  (assign continue (label after-call200308172017584))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017584
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment let-variables)
  (assign proc (op lookup-variable-value) (const let-variables) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172017570))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172017571))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172017573))
compound-branch200308172017572
  (assign continue (label after-call200308172017574))
  (goto (label compound-apply-compiled))
compiled-branch200308172017571
  (assign continue (label after-call200308172017574))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172017573
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172017570
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172017574
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018040))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018041))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018043))
compound-branch200308172018042
  (goto (label compound-apply-compiled))
compiled-branch200308172018041
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018043
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018040
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018044
after-lambda200308172017311
  (comment (define (let->combination exp) (let ((variables (let-variables exp)) (expressions (let-expressions exp)) (body (let-body exp)) (name (let-name exp))) (cond ((named-let? exp) (let-make (list (list name (quote (quote *unassigned*)))) (list (assignment-make name (lambda-make variables body)) (cons name expressions)))) (else (cons (lambda-make variables body) expressions))))))
  (perform (op define-variable!) (const let->combination) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
  (assign val (op make-compiled-procedure) (label entry200308172018100) (reg env))
  (goto (label after-lambda200308172018101))
  (comment (lambda (exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
entry200308172018100
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment car)
  (assign proc (op lookup-variable-value) (const car) (reg env))
  (save continue)
  (save proc)
  (comment expand-bindings)
  (assign proc (op lookup-variable-value) (const expand-bindings) (reg env))
  (save proc)
  (save env)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018120))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018121))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018123))
compound-branch200308172018122
  (assign continue (label after-call200308172018124))
  (goto (label compound-apply-compiled))
compiled-branch200308172018121
  (assign continue (label after-call200308172018124))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018123
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018120
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018124
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment let-bindings)
  (assign proc (op lookup-variable-value) (const let-bindings) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018110))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018113))
compound-branch200308172018112
  (assign continue (label after-call200308172018114))
  (goto (label compound-apply-compiled))
compiled-branch200308172018111
  (assign continue (label after-call200308172018114))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018113
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018110
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018114
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018140))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018141))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018143))
compound-branch200308172018142
  (assign continue (label after-call200308172018144))
  (goto (label compound-apply-compiled))
compiled-branch200308172018141
  (assign continue (label after-call200308172018144))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018143
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018140
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018144
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018150))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018151))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018153))
compound-branch200308172018152
  (goto (label compound-apply-compiled))
compiled-branch200308172018151
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018153
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018150
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018154
after-lambda200308172018101
  (comment (define (let*->nested-lets exp) (car (expand-bindings (let-bindings exp) (let-body exp)))))
  (perform (op define-variable!) (const let*->nested-lets) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
  (assign val (op make-compiled-procedure) (label entry200308172018180) (reg env))
  (goto (label after-lambda200308172018181))
  (comment (lambda (bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
entry200308172018180
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings body)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018190))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018191))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018193))
compound-branch200308172018192
  (assign continue (label after-call200308172018194))
  (goto (label compound-apply-compiled))
compiled-branch200308172018191
  (assign continue (label after-call200308172018194))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018193
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018190
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018194
  (restore env)
  (restore continue)
  (comment (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body)))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172018183))
true-branch200308172018182
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (goto (reg continue))
false-branch200308172018183
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save proc)
  (save env)
  (comment expand-bindings)
  (assign proc (op lookup-variable-value) (const expand-bindings) (reg env))
  (save proc)
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (save argl)
  (comment rest-exps)
  (assign proc (op lookup-variable-value) (const rest-exps) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018240))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018241))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018243))
compound-branch200308172018242
  (assign continue (label after-call200308172018244))
  (goto (label compound-apply-compiled))
compiled-branch200308172018241
  (assign continue (label after-call200308172018244))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018243
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018240
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018244
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018250))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018251))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018253))
compound-branch200308172018252
  (assign continue (label after-call200308172018254))
  (goto (label compound-apply-compiled))
compiled-branch200308172018251
  (assign continue (label after-call200308172018254))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018253
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018250
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018254
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save proc)
  (comment first-exp)
  (assign proc (op lookup-variable-value) (const first-exp) (reg env))
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018200))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018201))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018203))
compound-branch200308172018202
  (assign continue (label after-call200308172018204))
  (goto (label compound-apply-compiled))
compiled-branch200308172018201
  (assign continue (label after-call200308172018204))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018203
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018200
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018204
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018220))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018221))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018223))
compound-branch200308172018222
  (assign continue (label after-call200308172018224))
  (goto (label compound-apply-compiled))
compiled-branch200308172018221
  (assign continue (label after-call200308172018224))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018223
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018220
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018224
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018270))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018271))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018273))
compound-branch200308172018272
  (assign continue (label after-call200308172018274))
  (goto (label compound-apply-compiled))
compiled-branch200308172018271
  (assign continue (label after-call200308172018274))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018273
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018270
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018274
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018290))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018291))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018293))
compound-branch200308172018292
  (goto (label compound-apply-compiled))
compiled-branch200308172018291
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018293
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018290
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018294
after-if200308172018184
after-lambda200308172018181
  (comment (define (expand-bindings bindings body) (if (null? bindings) body (list (let-make (list (first-exp bindings)) (expand-bindings (rest-exps bindings) body))))))
  (perform (op define-variable!) (const expand-bindings) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (assign val (op make-compiled-procedure) (label entry200308172018350) (reg env))
  (goto (label after-lambda200308172018351))
  (comment (lambda (exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
entry200308172018350
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment (lambda (variables) (let ((values (let-expressions exp))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))))
  (assign proc (op make-compiled-procedure) (label entry200308172018360) (reg env))
  (goto (label after-lambda200308172018361))
  (comment (lambda (variables) (let ((values (let-expressions exp))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))))
entry200308172018360
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables)) (reg argl) (reg env))
  (comment (lambda (values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp)))))))
  (assign proc (op make-compiled-procedure) (label entry200308172018362) (reg env))
  (goto (label after-lambda200308172018363))
  (comment (lambda (values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables))) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp)))))))
entry200308172018362
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (values)) (reg argl) (reg env))
  (comment (lambda (bindings) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (assign proc (op make-compiled-procedure) (label entry200308172018364) (reg env))
  (goto (label after-lambda200308172018365))
  (comment (lambda (bindings) (let ((assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
entry200308172018364
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings)) (reg argl) (reg env))
  (comment (lambda (assignments) (let-make bindings (append assignments (let-body exp)))))
  (assign proc (op make-compiled-procedure) (label entry200308172018366) (reg env))
  (goto (label after-lambda200308172018367))
  (comment (lambda (assignments) (let-make bindings (append assignments (let-body exp)))))
entry200308172018366
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (assignments)) (reg argl) (reg env))
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save continue)
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (save proc)
  (save env)
  (comment let-body)
  (assign proc (op lookup-variable-value) (const let-body) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018370))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018371))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018373))
compound-branch200308172018372
  (assign continue (label after-call200308172018374))
  (goto (label compound-apply-compiled))
compiled-branch200308172018371
  (assign continue (label after-call200308172018374))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018373
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018370
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018374
  (assign argl (op list) (reg val))
  (restore env)
  (comment assignments)
  (assign val (op lookup-variable-value) (const assignments) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018390))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018391))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018393))
compound-branch200308172018392
  (assign continue (label after-call200308172018394))
  (goto (label compound-apply-compiled))
compiled-branch200308172018391
  (assign continue (label after-call200308172018394))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018393
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018390
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018394
  (assign argl (op list) (reg val))
  (restore env)
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018410))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018411))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018413))
compound-branch200308172018412
  (goto (label compound-apply-compiled))
compiled-branch200308172018411
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018413
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018410
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018414
after-lambda200308172018367
  (save continue)
  (save proc)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment values)
  (assign val (op lookup-variable-value) (const values) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (lambda (var val) (assignment-make var val)))
  (assign val (op make-compiled-procedure) (label entry200308172018430) (reg env))
  (goto (label after-lambda200308172018431))
  (comment (lambda (var val) (assignment-make var val)))
entry200308172018430
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var val)) (reg argl) (reg env))
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (comment val)
  (assign val (op lookup-variable-value) (const val) (reg env))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018440))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018441))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018443))
compound-branch200308172018442
  (goto (label compound-apply-compiled))
compiled-branch200308172018441
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018443
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018440
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018444
after-lambda200308172018431
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018460))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018461))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018463))
compound-branch200308172018462
  (assign continue (label after-call200308172018464))
  (goto (label compound-apply-compiled))
compiled-branch200308172018461
  (assign continue (label after-call200308172018464))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018463
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018460
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018464
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018480))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018481))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018483))
compound-branch200308172018482
  (goto (label compound-apply-compiled))
compiled-branch200308172018481
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018483
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018480
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018484
after-lambda200308172018365
  (save continue)
  (save proc)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
  (assign val (op make-compiled-procedure) (label entry200308172018510) (reg env))
  (goto (label after-lambda200308172018511))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
entry200308172018510
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018512))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018513))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018515))
compound-branch200308172018514
  (goto (label compound-apply-compiled))
compiled-branch200308172018513
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018515
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018512
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018516
after-lambda200308172018511
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018530))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018531))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018533))
compound-branch200308172018532
  (assign continue (label after-call200308172018534))
  (goto (label compound-apply-compiled))
compiled-branch200308172018531
  (assign continue (label after-call200308172018534))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018533
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018530
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018534
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018550))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018551))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018553))
compound-branch200308172018552
  (goto (label compound-apply-compiled))
compiled-branch200308172018551
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018553
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172018550
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172018554
after-lambda200308172018363
  (save continue)
  (save proc)
  (comment let-expressions)
  (assign proc (op lookup-variable-value) (const let-expressions) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172018580))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172018581))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172018583))
compound-branch200308172018582
  (assign continue (label after-call200308172018584))
  (goto (label compound-apply-compiled))
compiled-branch200308172018581
  (assign continue (label after-call200308172018584))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172018583
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172018580
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172018584
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019000))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019001))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019003))
compound-branch200308172019002
  (goto (label compound-apply-compiled))
compiled-branch200308172019001
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019003
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019000
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019004
after-lambda200308172018361
  (save continue)
  (save proc)
  (comment let-variables)
  (assign proc (op lookup-variable-value) (const let-variables) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019040))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019041))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019043))
compound-branch200308172019042
  (assign continue (label after-call200308172019044))
  (goto (label compound-apply-compiled))
compiled-branch200308172019041
  (assign continue (label after-call200308172019044))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019043
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019040
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019044
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019050))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019051))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019053))
compound-branch200308172019052
  (goto (label compound-apply-compiled))
compiled-branch200308172019051
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019053
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019050
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019054
after-lambda200308172018351
  (comment (define (letrec->let exp) (let* ((variables (let-variables exp)) (values (let-expressions exp)) (bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values))) (let-make bindings (append assignments (let-body exp))))))
  (perform (op define-variable!) (const letrec->let) (reg val) (reg env))
  (assign val  (const ok))
  (comment (lambda (body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
  (assign val (op make-compiled-procedure) (label entry200308172019100) (reg env))
  (goto (label after-lambda200308172019101))
  (comment (lambda (body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
entry200308172019100
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (body)) (reg argl) (reg env))
  (comment (lambda (defines) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))))
  (assign proc (op make-compiled-procedure) (label entry200308172019102) (reg env))
  (goto (label after-lambda200308172019103))
  (comment (lambda (defines) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))))
entry200308172019102
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (defines)) (reg argl) (reg env))
  (save continue)
  (save env)
  (comment null?)
  (assign proc (op lookup-variable-value) (const null?) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019110))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019111))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019113))
compound-branch200308172019112
  (assign continue (label after-call200308172019114))
  (goto (label compound-apply-compiled))
compiled-branch200308172019111
  (assign continue (label after-call200308172019114))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019113
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019110
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019114
  (restore env)
  (restore continue)
  (comment (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))
  (test (op false?) (reg val))
  (branch (label false-branch200308172019105))
true-branch200308172019104
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (goto (reg continue))
false-branch200308172019105
  (comment (lambda (variables values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))
  (assign proc (op make-compiled-procedure) (label entry200308172019120) (reg env))
  (goto (label after-lambda200308172019121))
  (comment (lambda (variables values) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines))))))
entry200308172019120
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (variables values)) (reg argl) (reg env))
  (comment (lambda (bindings assignments body-without-defines) (list (let-make bindings (append assignments body-without-defines)))))
  (assign proc (op make-compiled-procedure) (label entry200308172019130) (reg env))
  (goto (label after-lambda200308172019131))
  (comment (lambda (bindings assignments body-without-defines) (list (let-make bindings (append assignments body-without-defines)))))
entry200308172019130
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (bindings assignments body-without-defines)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (comment let-make)
  (assign proc (op lookup-variable-value) (const let-make) (reg env))
  (save proc)
  (save env)
  (comment append)
  (assign proc (op lookup-variable-value) (const append) (reg env))
  (comment body-without-defines)
  (assign val (op lookup-variable-value) (const body-without-defines) (reg env))
  (assign argl (op list) (reg val))
  (comment assignments)
  (assign val (op lookup-variable-value) (const assignments) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019140))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019141))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019143))
compound-branch200308172019142
  (assign continue (label after-call200308172019144))
  (goto (label compound-apply-compiled))
compiled-branch200308172019141
  (assign continue (label after-call200308172019144))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019143
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019140
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019144
  (assign argl (op list) (reg val))
  (restore env)
  (comment bindings)
  (assign val (op lookup-variable-value) (const bindings) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019160))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019161))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019163))
compound-branch200308172019162
  (assign continue (label after-call200308172019164))
  (goto (label compound-apply-compiled))
compiled-branch200308172019161
  (assign continue (label after-call200308172019164))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019163
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019160
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019164
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019170))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019171))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019173))
compound-branch200308172019172
  (goto (label compound-apply-compiled))
compiled-branch200308172019171
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019173
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019170
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019174
after-lambda200308172019131
  (save continue)
  (save proc)
  (save env)
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (not (definition? exp))))
  (assign val (op make-compiled-procedure) (label entry200308172019280) (reg env))
  (goto (label after-lambda200308172019281))
  (comment (lambda (exp) (not (definition? exp))))
entry200308172019280
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment not)
  (assign proc (op lookup-variable-value) (const not) (reg env))
  (save continue)
  (save proc)
  (comment definition?)
  (assign proc (op lookup-variable-value) (const definition?) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019290))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019291))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019293))
compound-branch200308172019292
  (assign continue (label after-call200308172019294))
  (goto (label compound-apply-compiled))
compiled-branch200308172019291
  (assign continue (label after-call200308172019294))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019293
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019290
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019294
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019300))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019301))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019303))
compound-branch200308172019302
  (goto (label compound-apply-compiled))
compiled-branch200308172019301
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019303
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019300
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019304
after-lambda200308172019281
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019330))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019331))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019333))
compound-branch200308172019332
  (assign continue (label after-call200308172019334))
  (goto (label compound-apply-compiled))
compiled-branch200308172019331
  (assign continue (label after-call200308172019334))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019333
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019330
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019334
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment values)
  (assign val (op lookup-variable-value) (const values) (reg env))
  (assign argl (op list) (reg val))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (comment (lambda (var val) (assignment-make var val)))
  (assign val (op make-compiled-procedure) (label entry200308172019230) (reg env))
  (goto (label after-lambda200308172019231))
  (comment (lambda (var val) (assignment-make var val)))
entry200308172019230
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var val)) (reg argl) (reg env))
  (comment assignment-make)
  (assign proc (op lookup-variable-value) (const assignment-make) (reg env))
  (comment val)
  (assign val (op lookup-variable-value) (const val) (reg env))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019240))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019241))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019243))
compound-branch200308172019242
  (goto (label compound-apply-compiled))
compiled-branch200308172019241
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019243
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019240
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019244
after-lambda200308172019231
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019270))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019271))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019273))
compound-branch200308172019272
  (assign continue (label after-call200308172019274))
  (goto (label compound-apply-compiled))
compiled-branch200308172019271
  (assign continue (label after-call200308172019274))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019273
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019270
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019274
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment variables)
  (assign val (op lookup-variable-value) (const variables) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
  (assign val (op make-compiled-procedure) (label entry200308172019190) (reg env))
  (goto (label after-lambda200308172019191))
  (comment (lambda (var) (list var (quote (quote *unassigned*)))))
entry200308172019190
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (var)) (reg argl) (reg env))
  (comment list)
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (comment (quote (quote *unassigned*)))
  (assign val  (const (quote *unassigned*)))
  (assign argl (op list) (reg val))
  (comment var)
  (assign val (op lookup-variable-value) (const var) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019200))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019201))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019203))
compound-branch200308172019202
  (goto (label compound-apply-compiled))
compiled-branch200308172019201
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019203
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019200
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019204
after-lambda200308172019191
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019220))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019221))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019223))
compound-branch200308172019222
  (assign continue (label after-call200308172019224))
  (goto (label compound-apply-compiled))
compiled-branch200308172019221
  (assign continue (label after-call200308172019224))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019223
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019220
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019224
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019360))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019361))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019363))
compound-branch200308172019362
  (goto (label compound-apply-compiled))
compiled-branch200308172019361
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019363
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019360
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019364
after-lambda200308172019121
  (save continue)
  (save proc)
  (save env)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (definition-value exp)))
  (assign val (op make-compiled-procedure) (label entry200308172019450) (reg env))
  (goto (label after-lambda200308172019451))
  (comment (lambda (exp) (definition-value exp)))
entry200308172019450
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment definition-value)
  (assign proc (op lookup-variable-value) (const definition-value) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019452))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019453))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019455))
compound-branch200308172019454
  (goto (label compound-apply-compiled))
compiled-branch200308172019453
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019455
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019452
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019456
after-lambda200308172019451
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019470))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019471))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019473))
compound-branch200308172019472
  (assign continue (label after-call200308172019474))
  (goto (label compound-apply-compiled))
compiled-branch200308172019471
  (assign continue (label after-call200308172019474))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019473
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019470
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019474
  (assign argl (op list) (reg val))
  (restore env)
  (save argl)
  (comment map)
  (assign proc (op lookup-variable-value) (const map) (reg env))
  (comment defines)
  (assign val (op lookup-variable-value) (const defines) (reg env))
  (assign argl (op list) (reg val))
  (comment (lambda (exp) (definition-variable exp)))
  (assign val (op make-compiled-procedure) (label entry200308172019410) (reg env))
  (goto (label after-lambda200308172019411))
  (comment (lambda (exp) (definition-variable exp)))
entry200308172019410
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (exp)) (reg argl) (reg env))
  (comment definition-variable)
  (assign proc (op lookup-variable-value) (const definition-variable) (reg env))
  (comment exp)
  (assign val (op lookup-variable-value) (const exp) (reg env))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019412))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019413))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019415))
compound-branch200308172019414
  (goto (label compound-apply-compiled))
compiled-branch200308172019413
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019415
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019412
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019416
after-lambda200308172019411
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019430))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019431))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019433))
compound-branch200308172019432
  (assign continue (label after-call200308172019434))
  (goto (label compound-apply-compiled))
compiled-branch200308172019431
  (assign continue (label after-call200308172019434))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019433
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172019430
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172019434
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172019490))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172019491))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172019493))
compound-branch200308172019492
  (goto (label compound-apply-compiled))
compiled-branch200308172019491
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172019493
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172019490
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172019494
after-if200308172019106
after-lambda200308172019103
  (save continue)
  (save proc)
  (comment filter)
  (assign proc (op lookup-variable-value) (const filter) (reg env))
  (comment body)
  (assign val (op lookup-variable-value) (const body) (reg env))
  (assign argl (op list) (reg val))
  (comment definition?)
  (assign val (op lookup-variable-value) (const definition?) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172020000))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172020001))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172020003))
compound-branch200308172020002
  (assign continue (label after-call200308172020004))
  (goto (label compound-apply-compiled))
compiled-branch200308172020001
  (assign continue (label after-call200308172020004))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172020003
  (assign val (op apply-continuation) (reg proc) (reg argl))
primitive-branch200308172020000
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call200308172020004
  (assign argl (op list) (reg val))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch200308172020010))
  (test (op compiled-procedure?) (reg proc))
  (branch (label compiled-branch200308172020011))
  (test (op continuation?) (reg proc))
  (branch (label continuation-branch200308172020013))
compound-branch200308172020012
  (goto (label compound-apply-compiled))
compiled-branch200308172020011
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
continuation-branch200308172020013
  (assign val (op apply-continuation) (reg proc) (reg argl))
  (goto (reg continue))
primitive-branch200308172020010
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call200308172020014
after-lambda200308172019101
  (comment (define (scan-out-defines body) (let ((defines (filter definition? body))) (if (null? defines) body (let ((variables (map (lambda (exp) (definition-variable exp)) defines)) (values (map (lambda (exp) (definition-value exp)) defines))) (let ((bindings (map (lambda (var) (list var (quote (quote *unassigned*)))) variables)) (assignments (map (lambda (var val) (assignment-make var val)) variables values)) (body-without-defines (filter (lambda (exp) (not (definition? exp))) body))) (list (let-make bindings (append assignments body-without-defines)))))))))
  (perform (op define-variable!) (const scan-out-defines) (reg val) (reg env))
  (assign val  (const ok))
))
