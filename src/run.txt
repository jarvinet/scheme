(a b)
   30:   (perform (op newline))

   31:   (test (op eof-object?) (reg exp))
   32:   (branch (label exit))
   33:   (assign env (op get-global-environment))
   34:   (assign continue (label print-result))
   35:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
   63:   (test (op variable?) (reg exp))
   64:   (branch (label ev-variable))
   65:   (test (op quoted?) (reg exp))
   66:   (branch (label ev-quoted))
   67:   (test (op quasiquote?) (reg exp))
   68:   (branch (label ev-quasiquote))
   69:   (test (op assignment?) (reg exp))
   70:   (branch (label ev-assignment))
   71:   (test (op definition?) (reg exp))
   72:   (branch (label ev-definition))
   73:   (test (op if?) (reg exp))
   74:   (branch (label ev-if))
   75:   (test (op lambda?) (reg exp))
   76:   (branch (label ev-lambda))
   77:   (test (op begin?) (reg exp))
   78:   (branch (label ev-begin))
   79:   (test (op let?) (reg exp))
   80:   (branch (label ev-let))
   81:   (test (op letrec?) (reg exp))
   82:   (branch (label ev-letrec))
   83:   (test (op cond?) (reg exp))
   84:   (branch (label ev-cond))
   85:   (test (op and?) (reg exp))
   86:   (branch (label ev-and))
   87:   (test (op or?) (reg exp))
   88:   (branch (label ev-or))
   89:   (test (op delay?) (reg exp))
   90:   (branch (label ev-delay))
   91:   (test (op application?) (reg exp))
   92:   (branch (label ev-application))
   95: ev-application
   96:   (save continue)
   97:   (save env)
   98:   (assign unev (op operands) (reg exp))
   99:   (save unev)
  100:   (assign exp (op operator) (reg exp))
  101:   (assign continue (label ev-appl-did-operator))
  102:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
   63:   (test (op variable?) (reg exp))
   64:   (branch (label ev-variable))
  252: ev-variable
  253:   (assign val (op lookup-variable-value) (reg exp) (reg env))
  254:   (goto (reg continue))
  103: ev-appl-did-operator
  104:   (restore unev)
  105:   (restore env)
  106:   (assign argl (op empty-arglist))
  107:   (assign proc (reg val))
  108:   (test (op no-operands?) (reg unev))
  109:   (branch (label apply-dispatch))
  110:   (save proc)
  111: ev-appl-operand-loop
  112:   (save argl)
  113:   (assign exp (op first-operand) (reg unev))
  114:   (test (op last-operand?) (reg unev))
  115:   (branch (label ev-appl-last-arg))
  127: ev-appl-last-arg
  128:   (assign continue (label ev-appl-accum-last-arg))
  129:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
   63:   (test (op variable?) (reg exp))
   64:   (branch (label ev-variable))
  252: ev-variable
  253:   (assign val (op lookup-variable-value) (reg exp) (reg env))
  254:   (goto (reg continue))
  130: ev-appl-accum-last-arg
  131:   (restore argl)
  132:   (assign argl (op adjoin-arg) (reg val) (reg argl))
  133:   (restore proc)
  134:   (goto (label apply-dispatch))
  136: apply-dispatch
  137:   (test (op primitive-procedure?) (reg proc))
  138:   (branch (label primitive-apply))
  139:   (test (op compound-procedure?) (reg proc))
  140:   (branch (label compound-apply))
  141:   (test (op compiled-procedure?) (reg proc))
  142:   (branch (label compiled-apply))
  159: compiled-apply
  160:   (restore continue)
  161:   (assign val (op compiled-procedure-entry) (reg proc))
  162:   (goto (reg val))
  500: entry200209301958050
  501:   (assign env (op compiled-procedure-env) (reg proc))
  502:   (assign env (op extend-environment) (const (proc)) (reg argl) (reg env))
  503:   (assign proc (op lookup-variable-value) (const proc) (reg env))
  504:   (assign argl  (const ()))
  505:   (test (op primitive-procedure?) (reg proc))
  506:   (branch (label primitive-branch200209301958052))
  507:   (test (op compiled-procedure?) (reg proc))
  508:   (branch (label compiled-branch200209301958053))
  509: compound-branch200209301958054
  510:   (goto (label compound-apply))
  152: compound-apply
  153:   (assign unev (op procedure-parameters) (reg proc))
  154:   (assign env (op procedure-environment) (reg proc))
  155:   (assign env (op extend-environment) (reg unev) (reg argl) (reg env))
  156:   (assign unev (op procedure-body) (reg proc))
  157:   (goto (label ev-sequence))
  232: ev-sequence
  233:   (assign exp (op first-exp) (reg unev))
  234:   (test (op last-exp?) (reg unev))
  235:   (branch (label ev-sequence-last-exp))
  236:   (save unev)
  237:   (save env)
  238:   (assign continue (label ev-sequence-continue))
  239:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
   63:   (test (op variable?) (reg exp))
   64:   (branch (label ev-variable))
   65:   (test (op quoted?) (reg exp))
   66:   (branch (label ev-quoted))
   67:   (test (op quasiquote?) (reg exp))
   68:   (branch (label ev-quasiquote))
   69:   (test (op assignment?) (reg exp))
   70:   (branch (label ev-assignment))
   71:   (test (op definition?) (reg exp))
   72:   (branch (label ev-definition))
   73:   (test (op if?) (reg exp))
   74:   (branch (label ev-if))
   75:   (test (op lambda?) (reg exp))
   76:   (branch (label ev-lambda))
   77:   (test (op begin?) (reg exp))
   78:   (branch (label ev-begin))
   79:   (test (op let?) (reg exp))
   80:   (branch (label ev-let))
   81:   (test (op letrec?) (reg exp))
   82:   (branch (label ev-letrec))
   83:   (test (op cond?) (reg exp))
   84:   (branch (label ev-cond))
   85:   (test (op and?) (reg exp))
   86:   (branch (label ev-and))
   87:   (test (op or?) (reg exp))
   88:   (branch (label ev-or))
   89:   (test (op delay?) (reg exp))
   90:   (branch (label ev-delay))
   91:   (test (op application?) (reg exp))
   92:   (branch (label ev-application))
   95: ev-application
   96:   (save continue)
   97:   (save env)
   98:   (assign unev (op operands) (reg exp))
   99:   (save unev)
  100:   (assign exp (op operator) (reg exp))
  101:   (assign continue (label ev-appl-did-operator))
  102:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
   63:   (test (op variable?) (reg exp))
   64:   (branch (label ev-variable))
  252: ev-variable
  253:   (assign val (op lookup-variable-value) (reg exp) (reg env))
  254:   (goto (reg continue))
  103: ev-appl-did-operator
  104:   (restore unev)
  105:   (restore env)
  106:   (assign argl (op empty-arglist))
  107:   (assign proc (reg val))
  108:   (test (op no-operands?) (reg unev))
  109:   (branch (label apply-dispatch))
  110:   (save proc)
  111: ev-appl-operand-loop
  112:   (save argl)
  113:   (assign exp (op first-operand) (reg unev))
  114:   (test (op last-operand?) (reg unev))
  115:   (branch (label ev-appl-last-arg))
  127: ev-appl-last-arg
  128:   (assign continue (label ev-appl-accum-last-arg))
  129:   (goto (label eval-dispatch))
   60: eval-dispatch
   61:   (test (op self-evaluating?) (reg exp))
   62:   (branch (label ev-self-eval))
  249: ev-self-eval
  250:   (assign val (reg exp))
  251:   (goto (reg continue))
  130: ev-appl-accum-last-arg
  131:   (restore argl)
  132:   (assign argl (op adjoin-arg) (reg val) (reg argl))
  133:   (restore proc)
  134:   (goto (label apply-dispatch))
  136: apply-dispatch
  137:   (test (op primitive-procedure?) (reg proc))
  138:   (branch (label primitive-apply))
  147: primitive-apply
  148:   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
b called  
  149:   (restore continue)
  150:   (goto (reg continue))
  240: ev-sequence-continue
  241:   (restore env)
  242:   (restore unev)
  243:   (assign unev (op rest-exps) (reg unev))
  244:   (goto (label ev-sequence))
  232: ev-sequence
  233:   (assign exp (op first-exp) (reg unev))
  234:   (test (op last-exp?) (reg unev))
  235:   (branch (label ev-sequence-last-exp))
  245: ev-sequence-last-exp
  246:   (restore continue)
regsim: pairpointer.c:23: objGetPairPointer: Assertion `objIsPairPointer(obj)' failed.
